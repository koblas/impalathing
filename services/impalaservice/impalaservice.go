// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package impalaservice

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/MediaMath/impalathing/services/execstats"
	"github.com/MediaMath/impalathing/services/status"
	"github.com/MediaMath/impalathing/services/types"
	"github.com/MediaMath/impalathing/services/beeswax"
	"github.com/MediaMath/impalathing/services/tcliservice"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = execstats.GoUnusedProtection__
var _ = status.GoUnusedProtection__
var _ = types.GoUnusedProtection__
var _ = beeswax.GoUnusedProtection__
var _ = tcliservice.GoUnusedProtection__
type TImpalaQueryOptions int64
const (
  TImpalaQueryOptions_ABORT_ON_ERROR TImpalaQueryOptions = 0
  TImpalaQueryOptions_MAX_ERRORS TImpalaQueryOptions = 1
  TImpalaQueryOptions_DISABLE_CODEGEN TImpalaQueryOptions = 2
  TImpalaQueryOptions_BATCH_SIZE TImpalaQueryOptions = 3
  TImpalaQueryOptions_MEM_LIMIT TImpalaQueryOptions = 4
  TImpalaQueryOptions_NUM_NODES TImpalaQueryOptions = 5
  TImpalaQueryOptions_MAX_SCAN_RANGE_LENGTH TImpalaQueryOptions = 6
  TImpalaQueryOptions_MAX_IO_BUFFERS TImpalaQueryOptions = 7
  TImpalaQueryOptions_NUM_SCANNER_THREADS TImpalaQueryOptions = 8
  TImpalaQueryOptions_ALLOW_UNSUPPORTED_FORMATS TImpalaQueryOptions = 9
  TImpalaQueryOptions_DEFAULT_ORDER_BY_LIMIT TImpalaQueryOptions = 10
  TImpalaQueryOptions_DEBUG_ACTION TImpalaQueryOptions = 11
  TImpalaQueryOptions_ABORT_ON_DEFAULT_LIMIT_EXCEEDED TImpalaQueryOptions = 12
  TImpalaQueryOptions_COMPRESSION_CODEC TImpalaQueryOptions = 13
  TImpalaQueryOptions_SEQ_COMPRESSION_MODE TImpalaQueryOptions = 14
  TImpalaQueryOptions_HBASE_CACHING TImpalaQueryOptions = 15
  TImpalaQueryOptions_HBASE_CACHE_BLOCKS TImpalaQueryOptions = 16
  TImpalaQueryOptions_PARQUET_FILE_SIZE TImpalaQueryOptions = 17
  TImpalaQueryOptions_EXPLAIN_LEVEL TImpalaQueryOptions = 18
  TImpalaQueryOptions_SYNC_DDL TImpalaQueryOptions = 19
  TImpalaQueryOptions_REQUEST_POOL TImpalaQueryOptions = 20
  TImpalaQueryOptions_V_CPU_CORES TImpalaQueryOptions = 21
  TImpalaQueryOptions_RESERVATION_REQUEST_TIMEOUT TImpalaQueryOptions = 22
  TImpalaQueryOptions_DISABLE_CACHED_READS TImpalaQueryOptions = 23
  TImpalaQueryOptions_DISABLE_OUTERMOST_TOPN TImpalaQueryOptions = 24
  TImpalaQueryOptions_RM_INITIAL_MEM TImpalaQueryOptions = 25
  TImpalaQueryOptions_QUERY_TIMEOUT_S TImpalaQueryOptions = 26
  TImpalaQueryOptions_BUFFER_POOL_LIMIT TImpalaQueryOptions = 27
  TImpalaQueryOptions_APPX_COUNT_DISTINCT TImpalaQueryOptions = 28
  TImpalaQueryOptions_DISABLE_UNSAFE_SPILLS TImpalaQueryOptions = 29
  TImpalaQueryOptions_EXEC_SINGLE_NODE_ROWS_THRESHOLD TImpalaQueryOptions = 30
  TImpalaQueryOptions_OPTIMIZE_PARTITION_KEY_SCANS TImpalaQueryOptions = 31
  TImpalaQueryOptions_REPLICA_PREFERENCE TImpalaQueryOptions = 32
  TImpalaQueryOptions_SCHEDULE_RANDOM_REPLICA TImpalaQueryOptions = 33
  TImpalaQueryOptions_SCAN_NODE_CODEGEN_THRESHOLD TImpalaQueryOptions = 34
  TImpalaQueryOptions_DISABLE_STREAMING_PREAGGREGATIONS TImpalaQueryOptions = 35
  TImpalaQueryOptions_RUNTIME_FILTER_MODE TImpalaQueryOptions = 36
  TImpalaQueryOptions_RUNTIME_BLOOM_FILTER_SIZE TImpalaQueryOptions = 37
  TImpalaQueryOptions_RUNTIME_FILTER_WAIT_TIME_MS TImpalaQueryOptions = 38
  TImpalaQueryOptions_DISABLE_ROW_RUNTIME_FILTERING TImpalaQueryOptions = 39
  TImpalaQueryOptions_MAX_NUM_RUNTIME_FILTERS TImpalaQueryOptions = 40
  TImpalaQueryOptions_PARQUET_ANNOTATE_STRINGS_UTF8 TImpalaQueryOptions = 41
  TImpalaQueryOptions_PARQUET_FALLBACK_SCHEMA_RESOLUTION TImpalaQueryOptions = 42
  TImpalaQueryOptions_MT_DOP TImpalaQueryOptions = 43
  TImpalaQueryOptions_S3_SKIP_INSERT_STAGING TImpalaQueryOptions = 44
  TImpalaQueryOptions_RUNTIME_FILTER_MAX_SIZE TImpalaQueryOptions = 45
  TImpalaQueryOptions_RUNTIME_FILTER_MIN_SIZE TImpalaQueryOptions = 46
  TImpalaQueryOptions_PREFETCH_MODE TImpalaQueryOptions = 47
  TImpalaQueryOptions_STRICT_MODE TImpalaQueryOptions = 48
  TImpalaQueryOptions_SCRATCH_LIMIT TImpalaQueryOptions = 49
  TImpalaQueryOptions_ENABLE_EXPR_REWRITES TImpalaQueryOptions = 50
  TImpalaQueryOptions_DECIMAL_V2 TImpalaQueryOptions = 51
  TImpalaQueryOptions_PARQUET_DICTIONARY_FILTERING TImpalaQueryOptions = 52
  TImpalaQueryOptions_PARQUET_ARRAY_RESOLUTION TImpalaQueryOptions = 53
  TImpalaQueryOptions_PARQUET_READ_STATISTICS TImpalaQueryOptions = 54
  TImpalaQueryOptions_DEFAULT_JOIN_DISTRIBUTION_MODE TImpalaQueryOptions = 55
  TImpalaQueryOptions_DISABLE_CODEGEN_ROWS_THRESHOLD TImpalaQueryOptions = 56
  TImpalaQueryOptions_DEFAULT_SPILLABLE_BUFFER_SIZE TImpalaQueryOptions = 57
  TImpalaQueryOptions_MIN_SPILLABLE_BUFFER_SIZE TImpalaQueryOptions = 58
  TImpalaQueryOptions_MAX_ROW_SIZE TImpalaQueryOptions = 59
)

func (p TImpalaQueryOptions) String() string {
  switch p {
  case TImpalaQueryOptions_ABORT_ON_ERROR: return "ABORT_ON_ERROR"
  case TImpalaQueryOptions_MAX_ERRORS: return "MAX_ERRORS"
  case TImpalaQueryOptions_DISABLE_CODEGEN: return "DISABLE_CODEGEN"
  case TImpalaQueryOptions_BATCH_SIZE: return "BATCH_SIZE"
  case TImpalaQueryOptions_MEM_LIMIT: return "MEM_LIMIT"
  case TImpalaQueryOptions_NUM_NODES: return "NUM_NODES"
  case TImpalaQueryOptions_MAX_SCAN_RANGE_LENGTH: return "MAX_SCAN_RANGE_LENGTH"
  case TImpalaQueryOptions_MAX_IO_BUFFERS: return "MAX_IO_BUFFERS"
  case TImpalaQueryOptions_NUM_SCANNER_THREADS: return "NUM_SCANNER_THREADS"
  case TImpalaQueryOptions_ALLOW_UNSUPPORTED_FORMATS: return "ALLOW_UNSUPPORTED_FORMATS"
  case TImpalaQueryOptions_DEFAULT_ORDER_BY_LIMIT: return "DEFAULT_ORDER_BY_LIMIT"
  case TImpalaQueryOptions_DEBUG_ACTION: return "DEBUG_ACTION"
  case TImpalaQueryOptions_ABORT_ON_DEFAULT_LIMIT_EXCEEDED: return "ABORT_ON_DEFAULT_LIMIT_EXCEEDED"
  case TImpalaQueryOptions_COMPRESSION_CODEC: return "COMPRESSION_CODEC"
  case TImpalaQueryOptions_SEQ_COMPRESSION_MODE: return "SEQ_COMPRESSION_MODE"
  case TImpalaQueryOptions_HBASE_CACHING: return "HBASE_CACHING"
  case TImpalaQueryOptions_HBASE_CACHE_BLOCKS: return "HBASE_CACHE_BLOCKS"
  case TImpalaQueryOptions_PARQUET_FILE_SIZE: return "PARQUET_FILE_SIZE"
  case TImpalaQueryOptions_EXPLAIN_LEVEL: return "EXPLAIN_LEVEL"
  case TImpalaQueryOptions_SYNC_DDL: return "SYNC_DDL"
  case TImpalaQueryOptions_REQUEST_POOL: return "REQUEST_POOL"
  case TImpalaQueryOptions_V_CPU_CORES: return "V_CPU_CORES"
  case TImpalaQueryOptions_RESERVATION_REQUEST_TIMEOUT: return "RESERVATION_REQUEST_TIMEOUT"
  case TImpalaQueryOptions_DISABLE_CACHED_READS: return "DISABLE_CACHED_READS"
  case TImpalaQueryOptions_DISABLE_OUTERMOST_TOPN: return "DISABLE_OUTERMOST_TOPN"
  case TImpalaQueryOptions_RM_INITIAL_MEM: return "RM_INITIAL_MEM"
  case TImpalaQueryOptions_QUERY_TIMEOUT_S: return "QUERY_TIMEOUT_S"
  case TImpalaQueryOptions_BUFFER_POOL_LIMIT: return "BUFFER_POOL_LIMIT"
  case TImpalaQueryOptions_APPX_COUNT_DISTINCT: return "APPX_COUNT_DISTINCT"
  case TImpalaQueryOptions_DISABLE_UNSAFE_SPILLS: return "DISABLE_UNSAFE_SPILLS"
  case TImpalaQueryOptions_EXEC_SINGLE_NODE_ROWS_THRESHOLD: return "EXEC_SINGLE_NODE_ROWS_THRESHOLD"
  case TImpalaQueryOptions_OPTIMIZE_PARTITION_KEY_SCANS: return "OPTIMIZE_PARTITION_KEY_SCANS"
  case TImpalaQueryOptions_REPLICA_PREFERENCE: return "REPLICA_PREFERENCE"
  case TImpalaQueryOptions_SCHEDULE_RANDOM_REPLICA: return "SCHEDULE_RANDOM_REPLICA"
  case TImpalaQueryOptions_SCAN_NODE_CODEGEN_THRESHOLD: return "SCAN_NODE_CODEGEN_THRESHOLD"
  case TImpalaQueryOptions_DISABLE_STREAMING_PREAGGREGATIONS: return "DISABLE_STREAMING_PREAGGREGATIONS"
  case TImpalaQueryOptions_RUNTIME_FILTER_MODE: return "RUNTIME_FILTER_MODE"
  case TImpalaQueryOptions_RUNTIME_BLOOM_FILTER_SIZE: return "RUNTIME_BLOOM_FILTER_SIZE"
  case TImpalaQueryOptions_RUNTIME_FILTER_WAIT_TIME_MS: return "RUNTIME_FILTER_WAIT_TIME_MS"
  case TImpalaQueryOptions_DISABLE_ROW_RUNTIME_FILTERING: return "DISABLE_ROW_RUNTIME_FILTERING"
  case TImpalaQueryOptions_MAX_NUM_RUNTIME_FILTERS: return "MAX_NUM_RUNTIME_FILTERS"
  case TImpalaQueryOptions_PARQUET_ANNOTATE_STRINGS_UTF8: return "PARQUET_ANNOTATE_STRINGS_UTF8"
  case TImpalaQueryOptions_PARQUET_FALLBACK_SCHEMA_RESOLUTION: return "PARQUET_FALLBACK_SCHEMA_RESOLUTION"
  case TImpalaQueryOptions_MT_DOP: return "MT_DOP"
  case TImpalaQueryOptions_S3_SKIP_INSERT_STAGING: return "S3_SKIP_INSERT_STAGING"
  case TImpalaQueryOptions_RUNTIME_FILTER_MAX_SIZE: return "RUNTIME_FILTER_MAX_SIZE"
  case TImpalaQueryOptions_RUNTIME_FILTER_MIN_SIZE: return "RUNTIME_FILTER_MIN_SIZE"
  case TImpalaQueryOptions_PREFETCH_MODE: return "PREFETCH_MODE"
  case TImpalaQueryOptions_STRICT_MODE: return "STRICT_MODE"
  case TImpalaQueryOptions_SCRATCH_LIMIT: return "SCRATCH_LIMIT"
  case TImpalaQueryOptions_ENABLE_EXPR_REWRITES: return "ENABLE_EXPR_REWRITES"
  case TImpalaQueryOptions_DECIMAL_V2: return "DECIMAL_V2"
  case TImpalaQueryOptions_PARQUET_DICTIONARY_FILTERING: return "PARQUET_DICTIONARY_FILTERING"
  case TImpalaQueryOptions_PARQUET_ARRAY_RESOLUTION: return "PARQUET_ARRAY_RESOLUTION"
  case TImpalaQueryOptions_PARQUET_READ_STATISTICS: return "PARQUET_READ_STATISTICS"
  case TImpalaQueryOptions_DEFAULT_JOIN_DISTRIBUTION_MODE: return "DEFAULT_JOIN_DISTRIBUTION_MODE"
  case TImpalaQueryOptions_DISABLE_CODEGEN_ROWS_THRESHOLD: return "DISABLE_CODEGEN_ROWS_THRESHOLD"
  case TImpalaQueryOptions_DEFAULT_SPILLABLE_BUFFER_SIZE: return "DEFAULT_SPILLABLE_BUFFER_SIZE"
  case TImpalaQueryOptions_MIN_SPILLABLE_BUFFER_SIZE: return "MIN_SPILLABLE_BUFFER_SIZE"
  case TImpalaQueryOptions_MAX_ROW_SIZE: return "MAX_ROW_SIZE"
  }
  return "<UNSET>"
}

func TImpalaQueryOptionsFromString(s string) (TImpalaQueryOptions, error) {
  switch s {
  case "ABORT_ON_ERROR": return TImpalaQueryOptions_ABORT_ON_ERROR, nil 
  case "MAX_ERRORS": return TImpalaQueryOptions_MAX_ERRORS, nil 
  case "DISABLE_CODEGEN": return TImpalaQueryOptions_DISABLE_CODEGEN, nil 
  case "BATCH_SIZE": return TImpalaQueryOptions_BATCH_SIZE, nil 
  case "MEM_LIMIT": return TImpalaQueryOptions_MEM_LIMIT, nil 
  case "NUM_NODES": return TImpalaQueryOptions_NUM_NODES, nil 
  case "MAX_SCAN_RANGE_LENGTH": return TImpalaQueryOptions_MAX_SCAN_RANGE_LENGTH, nil 
  case "MAX_IO_BUFFERS": return TImpalaQueryOptions_MAX_IO_BUFFERS, nil 
  case "NUM_SCANNER_THREADS": return TImpalaQueryOptions_NUM_SCANNER_THREADS, nil 
  case "ALLOW_UNSUPPORTED_FORMATS": return TImpalaQueryOptions_ALLOW_UNSUPPORTED_FORMATS, nil 
  case "DEFAULT_ORDER_BY_LIMIT": return TImpalaQueryOptions_DEFAULT_ORDER_BY_LIMIT, nil 
  case "DEBUG_ACTION": return TImpalaQueryOptions_DEBUG_ACTION, nil 
  case "ABORT_ON_DEFAULT_LIMIT_EXCEEDED": return TImpalaQueryOptions_ABORT_ON_DEFAULT_LIMIT_EXCEEDED, nil 
  case "COMPRESSION_CODEC": return TImpalaQueryOptions_COMPRESSION_CODEC, nil 
  case "SEQ_COMPRESSION_MODE": return TImpalaQueryOptions_SEQ_COMPRESSION_MODE, nil 
  case "HBASE_CACHING": return TImpalaQueryOptions_HBASE_CACHING, nil 
  case "HBASE_CACHE_BLOCKS": return TImpalaQueryOptions_HBASE_CACHE_BLOCKS, nil 
  case "PARQUET_FILE_SIZE": return TImpalaQueryOptions_PARQUET_FILE_SIZE, nil 
  case "EXPLAIN_LEVEL": return TImpalaQueryOptions_EXPLAIN_LEVEL, nil 
  case "SYNC_DDL": return TImpalaQueryOptions_SYNC_DDL, nil 
  case "REQUEST_POOL": return TImpalaQueryOptions_REQUEST_POOL, nil 
  case "V_CPU_CORES": return TImpalaQueryOptions_V_CPU_CORES, nil 
  case "RESERVATION_REQUEST_TIMEOUT": return TImpalaQueryOptions_RESERVATION_REQUEST_TIMEOUT, nil 
  case "DISABLE_CACHED_READS": return TImpalaQueryOptions_DISABLE_CACHED_READS, nil 
  case "DISABLE_OUTERMOST_TOPN": return TImpalaQueryOptions_DISABLE_OUTERMOST_TOPN, nil 
  case "RM_INITIAL_MEM": return TImpalaQueryOptions_RM_INITIAL_MEM, nil 
  case "QUERY_TIMEOUT_S": return TImpalaQueryOptions_QUERY_TIMEOUT_S, nil 
  case "BUFFER_POOL_LIMIT": return TImpalaQueryOptions_BUFFER_POOL_LIMIT, nil 
  case "APPX_COUNT_DISTINCT": return TImpalaQueryOptions_APPX_COUNT_DISTINCT, nil 
  case "DISABLE_UNSAFE_SPILLS": return TImpalaQueryOptions_DISABLE_UNSAFE_SPILLS, nil 
  case "EXEC_SINGLE_NODE_ROWS_THRESHOLD": return TImpalaQueryOptions_EXEC_SINGLE_NODE_ROWS_THRESHOLD, nil 
  case "OPTIMIZE_PARTITION_KEY_SCANS": return TImpalaQueryOptions_OPTIMIZE_PARTITION_KEY_SCANS, nil 
  case "REPLICA_PREFERENCE": return TImpalaQueryOptions_REPLICA_PREFERENCE, nil 
  case "SCHEDULE_RANDOM_REPLICA": return TImpalaQueryOptions_SCHEDULE_RANDOM_REPLICA, nil 
  case "SCAN_NODE_CODEGEN_THRESHOLD": return TImpalaQueryOptions_SCAN_NODE_CODEGEN_THRESHOLD, nil 
  case "DISABLE_STREAMING_PREAGGREGATIONS": return TImpalaQueryOptions_DISABLE_STREAMING_PREAGGREGATIONS, nil 
  case "RUNTIME_FILTER_MODE": return TImpalaQueryOptions_RUNTIME_FILTER_MODE, nil 
  case "RUNTIME_BLOOM_FILTER_SIZE": return TImpalaQueryOptions_RUNTIME_BLOOM_FILTER_SIZE, nil 
  case "RUNTIME_FILTER_WAIT_TIME_MS": return TImpalaQueryOptions_RUNTIME_FILTER_WAIT_TIME_MS, nil 
  case "DISABLE_ROW_RUNTIME_FILTERING": return TImpalaQueryOptions_DISABLE_ROW_RUNTIME_FILTERING, nil 
  case "MAX_NUM_RUNTIME_FILTERS": return TImpalaQueryOptions_MAX_NUM_RUNTIME_FILTERS, nil 
  case "PARQUET_ANNOTATE_STRINGS_UTF8": return TImpalaQueryOptions_PARQUET_ANNOTATE_STRINGS_UTF8, nil 
  case "PARQUET_FALLBACK_SCHEMA_RESOLUTION": return TImpalaQueryOptions_PARQUET_FALLBACK_SCHEMA_RESOLUTION, nil 
  case "MT_DOP": return TImpalaQueryOptions_MT_DOP, nil 
  case "S3_SKIP_INSERT_STAGING": return TImpalaQueryOptions_S3_SKIP_INSERT_STAGING, nil 
  case "RUNTIME_FILTER_MAX_SIZE": return TImpalaQueryOptions_RUNTIME_FILTER_MAX_SIZE, nil 
  case "RUNTIME_FILTER_MIN_SIZE": return TImpalaQueryOptions_RUNTIME_FILTER_MIN_SIZE, nil 
  case "PREFETCH_MODE": return TImpalaQueryOptions_PREFETCH_MODE, nil 
  case "STRICT_MODE": return TImpalaQueryOptions_STRICT_MODE, nil 
  case "SCRATCH_LIMIT": return TImpalaQueryOptions_SCRATCH_LIMIT, nil 
  case "ENABLE_EXPR_REWRITES": return TImpalaQueryOptions_ENABLE_EXPR_REWRITES, nil 
  case "DECIMAL_V2": return TImpalaQueryOptions_DECIMAL_V2, nil 
  case "PARQUET_DICTIONARY_FILTERING": return TImpalaQueryOptions_PARQUET_DICTIONARY_FILTERING, nil 
  case "PARQUET_ARRAY_RESOLUTION": return TImpalaQueryOptions_PARQUET_ARRAY_RESOLUTION, nil 
  case "PARQUET_READ_STATISTICS": return TImpalaQueryOptions_PARQUET_READ_STATISTICS, nil 
  case "DEFAULT_JOIN_DISTRIBUTION_MODE": return TImpalaQueryOptions_DEFAULT_JOIN_DISTRIBUTION_MODE, nil 
  case "DISABLE_CODEGEN_ROWS_THRESHOLD": return TImpalaQueryOptions_DISABLE_CODEGEN_ROWS_THRESHOLD, nil 
  case "DEFAULT_SPILLABLE_BUFFER_SIZE": return TImpalaQueryOptions_DEFAULT_SPILLABLE_BUFFER_SIZE, nil 
  case "MIN_SPILLABLE_BUFFER_SIZE": return TImpalaQueryOptions_MIN_SPILLABLE_BUFFER_SIZE, nil 
  case "MAX_ROW_SIZE": return TImpalaQueryOptions_MAX_ROW_SIZE, nil 
  }
  return TImpalaQueryOptions(0), fmt.Errorf("not a valid TImpalaQueryOptions string")
}


func TImpalaQueryOptionsPtr(v TImpalaQueryOptions) *TImpalaQueryOptions { return &v }

func (p TImpalaQueryOptions) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TImpalaQueryOptions) UnmarshalText(text []byte) error {
q, err := TImpalaQueryOptionsFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TImpalaQueryOptions) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TImpalaQueryOptions(v)
return nil
}

func (p * TImpalaQueryOptions) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - RowsModified
//  - NumRowErrors
type TInsertResult_ struct {
  RowsModified map[string]int64 `thrift:"rows_modified,1,required" db:"rows_modified" json:"rows_modified"`
  NumRowErrors *int64 `thrift:"num_row_errors,2" db:"num_row_errors" json:"num_row_errors,omitempty"`
}

func NewTInsertResult_() *TInsertResult_ {
  return &TInsertResult_{}
}


func (p *TInsertResult_) GetRowsModified() map[string]int64 {
  return p.RowsModified
}
var TInsertResult__NumRowErrors_DEFAULT int64
func (p *TInsertResult_) GetNumRowErrors() int64 {
  if !p.IsSetNumRowErrors() {
    return TInsertResult__NumRowErrors_DEFAULT
  }
return *p.NumRowErrors
}
func (p *TInsertResult_) IsSetNumRowErrors() bool {
  return p.NumRowErrors != nil
}

func (p *TInsertResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRowsModified bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetRowsModified = true
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRowsModified{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RowsModified is not set"));
  }
  return nil
}

func (p *TInsertResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.RowsModified =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.RowsModified[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TInsertResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumRowErrors = &v
}
  return nil
}

func (p *TInsertResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TInsertResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TInsertResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows_modified", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rows_modified: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.RowsModified)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.RowsModified {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rows_modified: ", p), err) }
  return err
}

func (p *TInsertResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumRowErrors() {
    if err := oprot.WriteFieldBegin("num_row_errors", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_row_errors: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumRowErrors)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.num_row_errors (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_row_errors: ", p), err) }
  }
  return err
}

func (p *TInsertResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TInsertResult_(%+v)", *p)
}

// Attributes:
//  - Version
//  - WebserverAddress
type TPingImpalaServiceResp struct {
  Version string `thrift:"version,1" db:"version" json:"version"`
  WebserverAddress string `thrift:"webserver_address,2" db:"webserver_address" json:"webserver_address"`
}

func NewTPingImpalaServiceResp() *TPingImpalaServiceResp {
  return &TPingImpalaServiceResp{}
}


func (p *TPingImpalaServiceResp) GetVersion() string {
  return p.Version
}

func (p *TPingImpalaServiceResp) GetWebserverAddress() string {
  return p.WebserverAddress
}
func (p *TPingImpalaServiceResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPingImpalaServiceResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TPingImpalaServiceResp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WebserverAddress = v
}
  return nil
}

func (p *TPingImpalaServiceResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPingImpalaServiceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPingImpalaServiceResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *TPingImpalaServiceResp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("webserver_address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:webserver_address: ", p), err) }
  if err := oprot.WriteString(string(p.WebserverAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.webserver_address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:webserver_address: ", p), err) }
  return err
}

func (p *TPingImpalaServiceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPingImpalaServiceResp(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
type TResetTableReq struct {
  DbName string `thrift:"db_name,1,required" db:"db_name" json:"db_name"`
  TableName string `thrift:"table_name,2,required" db:"table_name" json:"table_name"`
}

func NewTResetTableReq() *TResetTableReq {
  return &TResetTableReq{}
}


func (p *TResetTableReq) GetDbName() string {
  return p.DbName
}

func (p *TResetTableReq) GetTableName() string {
  return p.TableName
}
func (p *TResetTableReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDbName bool = false;
  var issetTableName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDbName = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTableName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTableName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TableName is not set"));
  }
  return nil
}

func (p *TResetTableReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *TResetTableReq)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *TResetTableReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TResetTableReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TResetTableReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *TResetTableReq) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *TResetTableReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TResetTableReq(%+v)", *p)
}

// Attributes:
//  - OperationHandle
//  - SessionHandle
type TGetExecSummaryReq struct {
  OperationHandle *tcliservice.TOperationHandle `thrift:"operationHandle,1" db:"operationHandle" json:"operationHandle,omitempty"`
  SessionHandle *tcliservice.TSessionHandle `thrift:"sessionHandle,2" db:"sessionHandle" json:"sessionHandle,omitempty"`
}

func NewTGetExecSummaryReq() *TGetExecSummaryReq {
  return &TGetExecSummaryReq{}
}

var TGetExecSummaryReq_OperationHandle_DEFAULT *tcliservice.TOperationHandle
func (p *TGetExecSummaryReq) GetOperationHandle() *tcliservice.TOperationHandle {
  if !p.IsSetOperationHandle() {
    return TGetExecSummaryReq_OperationHandle_DEFAULT
  }
return p.OperationHandle
}
var TGetExecSummaryReq_SessionHandle_DEFAULT *tcliservice.TSessionHandle
func (p *TGetExecSummaryReq) GetSessionHandle() *tcliservice.TSessionHandle {
  if !p.IsSetSessionHandle() {
    return TGetExecSummaryReq_SessionHandle_DEFAULT
  }
return p.SessionHandle
}
func (p *TGetExecSummaryReq) IsSetOperationHandle() bool {
  return p.OperationHandle != nil
}

func (p *TGetExecSummaryReq) IsSetSessionHandle() bool {
  return p.SessionHandle != nil
}

func (p *TGetExecSummaryReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGetExecSummaryReq)  ReadField1(iprot thrift.TProtocol) error {
  p.OperationHandle = &tcliservice.TOperationHandle{}
  if err := p.OperationHandle.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OperationHandle), err)
  }
  return nil
}

func (p *TGetExecSummaryReq)  ReadField2(iprot thrift.TProtocol) error {
  p.SessionHandle = &tcliservice.TSessionHandle{}
  if err := p.SessionHandle.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionHandle), err)
  }
  return nil
}

func (p *TGetExecSummaryReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGetExecSummaryReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGetExecSummaryReq) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetOperationHandle() {
    if err := oprot.WriteFieldBegin("operationHandle", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:operationHandle: ", p), err) }
    if err := p.OperationHandle.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OperationHandle), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:operationHandle: ", p), err) }
  }
  return err
}

func (p *TGetExecSummaryReq) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionHandle() {
    if err := oprot.WriteFieldBegin("sessionHandle", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionHandle: ", p), err) }
    if err := p.SessionHandle.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionHandle), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionHandle: ", p), err) }
  }
  return err
}

func (p *TGetExecSummaryReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGetExecSummaryReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - Summary
type TGetExecSummaryResp struct {
  Status *tcliservice.TStatus `thrift:"status,1,required" db:"status" json:"status"`
  Summary *execstats.TExecSummary `thrift:"summary,2" db:"summary" json:"summary,omitempty"`
}

func NewTGetExecSummaryResp() *TGetExecSummaryResp {
  return &TGetExecSummaryResp{}
}

var TGetExecSummaryResp_Status_DEFAULT *tcliservice.TStatus
func (p *TGetExecSummaryResp) GetStatus() *tcliservice.TStatus {
  if !p.IsSetStatus() {
    return TGetExecSummaryResp_Status_DEFAULT
  }
return p.Status
}
var TGetExecSummaryResp_Summary_DEFAULT *execstats.TExecSummary
func (p *TGetExecSummaryResp) GetSummary() *execstats.TExecSummary {
  if !p.IsSetSummary() {
    return TGetExecSummaryResp_Summary_DEFAULT
  }
return p.Summary
}
func (p *TGetExecSummaryResp) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TGetExecSummaryResp) IsSetSummary() bool {
  return p.Summary != nil
}

func (p *TGetExecSummaryResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TGetExecSummaryResp)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &tcliservice.TStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TGetExecSummaryResp)  ReadField2(iprot thrift.TProtocol) error {
  p.Summary = &execstats.TExecSummary{}
  if err := p.Summary.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Summary), err)
  }
  return nil
}

func (p *TGetExecSummaryResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGetExecSummaryResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGetExecSummaryResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TGetExecSummaryResp) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSummary() {
    if err := oprot.WriteFieldBegin("summary", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:summary: ", p), err) }
    if err := p.Summary.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Summary), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:summary: ", p), err) }
  }
  return err
}

func (p *TGetExecSummaryResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGetExecSummaryResp(%+v)", *p)
}

// Attributes:
//  - OperationHandle
//  - SessionHandle
type TGetRuntimeProfileReq struct {
  OperationHandle *tcliservice.TOperationHandle `thrift:"operationHandle,1" db:"operationHandle" json:"operationHandle,omitempty"`
  SessionHandle *tcliservice.TSessionHandle `thrift:"sessionHandle,2" db:"sessionHandle" json:"sessionHandle,omitempty"`
}

func NewTGetRuntimeProfileReq() *TGetRuntimeProfileReq {
  return &TGetRuntimeProfileReq{}
}

var TGetRuntimeProfileReq_OperationHandle_DEFAULT *tcliservice.TOperationHandle
func (p *TGetRuntimeProfileReq) GetOperationHandle() *tcliservice.TOperationHandle {
  if !p.IsSetOperationHandle() {
    return TGetRuntimeProfileReq_OperationHandle_DEFAULT
  }
return p.OperationHandle
}
var TGetRuntimeProfileReq_SessionHandle_DEFAULT *tcliservice.TSessionHandle
func (p *TGetRuntimeProfileReq) GetSessionHandle() *tcliservice.TSessionHandle {
  if !p.IsSetSessionHandle() {
    return TGetRuntimeProfileReq_SessionHandle_DEFAULT
  }
return p.SessionHandle
}
func (p *TGetRuntimeProfileReq) IsSetOperationHandle() bool {
  return p.OperationHandle != nil
}

func (p *TGetRuntimeProfileReq) IsSetSessionHandle() bool {
  return p.SessionHandle != nil
}

func (p *TGetRuntimeProfileReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGetRuntimeProfileReq)  ReadField1(iprot thrift.TProtocol) error {
  p.OperationHandle = &tcliservice.TOperationHandle{}
  if err := p.OperationHandle.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OperationHandle), err)
  }
  return nil
}

func (p *TGetRuntimeProfileReq)  ReadField2(iprot thrift.TProtocol) error {
  p.SessionHandle = &tcliservice.TSessionHandle{}
  if err := p.SessionHandle.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionHandle), err)
  }
  return nil
}

func (p *TGetRuntimeProfileReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGetRuntimeProfileReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGetRuntimeProfileReq) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetOperationHandle() {
    if err := oprot.WriteFieldBegin("operationHandle", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:operationHandle: ", p), err) }
    if err := p.OperationHandle.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OperationHandle), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:operationHandle: ", p), err) }
  }
  return err
}

func (p *TGetRuntimeProfileReq) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionHandle() {
    if err := oprot.WriteFieldBegin("sessionHandle", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionHandle: ", p), err) }
    if err := p.SessionHandle.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionHandle), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionHandle: ", p), err) }
  }
  return err
}

func (p *TGetRuntimeProfileReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGetRuntimeProfileReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - Profile
type TGetRuntimeProfileResp struct {
  Status *tcliservice.TStatus `thrift:"status,1,required" db:"status" json:"status"`
  Profile *string `thrift:"profile,2" db:"profile" json:"profile,omitempty"`
}

func NewTGetRuntimeProfileResp() *TGetRuntimeProfileResp {
  return &TGetRuntimeProfileResp{}
}

var TGetRuntimeProfileResp_Status_DEFAULT *tcliservice.TStatus
func (p *TGetRuntimeProfileResp) GetStatus() *tcliservice.TStatus {
  if !p.IsSetStatus() {
    return TGetRuntimeProfileResp_Status_DEFAULT
  }
return p.Status
}
var TGetRuntimeProfileResp_Profile_DEFAULT string
func (p *TGetRuntimeProfileResp) GetProfile() string {
  if !p.IsSetProfile() {
    return TGetRuntimeProfileResp_Profile_DEFAULT
  }
return *p.Profile
}
func (p *TGetRuntimeProfileResp) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TGetRuntimeProfileResp) IsSetProfile() bool {
  return p.Profile != nil
}

func (p *TGetRuntimeProfileResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatus bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatus = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatus{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"));
  }
  return nil
}

func (p *TGetRuntimeProfileResp)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &tcliservice.TStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TGetRuntimeProfileResp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Profile = &v
}
  return nil
}

func (p *TGetRuntimeProfileResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGetRuntimeProfileResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGetRuntimeProfileResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := p.Status.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TGetRuntimeProfileResp) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetProfile() {
    if err := oprot.WriteFieldBegin("profile", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:profile: ", p), err) }
    if err := oprot.WriteString(string(*p.Profile)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.profile (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:profile: ", p), err) }
  }
  return err
}

func (p *TGetRuntimeProfileResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGetRuntimeProfileResp(%+v)", *p)
}

type ImpalaService interface {
  beeswax.BeeswaxService

  // Parameters:
  //  - QueryID
  Cancel(ctx context.Context, query_id *beeswax.QueryHandle) (r *status.TStatus, err error)
  ResetCatalog(ctx context.Context) (r *status.TStatus, err error)
  // Parameters:
  //  - Request
  ResetTable(ctx context.Context, request *TResetTableReq) (r *status.TStatus, err error)
  // Parameters:
  //  - QueryID
  GetRuntimeProfile(ctx context.Context, query_id *beeswax.QueryHandle) (r string, err error)
  // Parameters:
  //  - Handle
  CloseInsert(ctx context.Context, handle *beeswax.QueryHandle) (r *TInsertResult_, err error)
  PingImpalaService(ctx context.Context) (r *TPingImpalaServiceResp, err error)
  // Parameters:
  //  - Handle
  GetExecSummary(ctx context.Context, handle *beeswax.QueryHandle) (r *execstats.TExecSummary, err error)
}

type ImpalaServiceClient struct {
  c thrift.TClient
  *beeswax.BeeswaxServiceClient
}

// Deprecated: Use NewImpalaService instead
func NewImpalaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ImpalaServiceClient {
  return &ImpalaServiceClient{BeeswaxServiceClient: beeswax.NewBeeswaxServiceClientFactory(t, f)}}

// Deprecated: Use NewImpalaService instead
func NewImpalaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ImpalaServiceClient {
  return &ImpalaServiceClient{BeeswaxServiceClient: beeswax.NewBeeswaxServiceClientProtocol(t, iprot, oprot)}
}

func NewImpalaServiceClient(c thrift.TClient) *ImpalaServiceClient {
  return &ImpalaServiceClient{
    c: c,
    BeeswaxServiceClient: beeswax.NewBeeswaxServiceClient(c),
  }
}

// Parameters:
//  - QueryID
func (p *ImpalaServiceClient) Cancel(ctx context.Context, query_id *beeswax.QueryHandle) (r *status.TStatus, err error) {
  var _args2 ImpalaServiceCancelArgs
  _args2.QueryID = query_id
  var _result3 ImpalaServiceCancelResult
  if err = p.c.Call(ctx, "Cancel", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.Error!= nil:
    return r, _result3.Error
  }

  return _result3.GetSuccess(), nil
}

func (p *ImpalaServiceClient) ResetCatalog(ctx context.Context) (r *status.TStatus, err error) {
  var _args4 ImpalaServiceResetCatalogArgs
  var _result5 ImpalaServiceResetCatalogResult
  if err = p.c.Call(ctx, "ResetCatalog", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *ImpalaServiceClient) ResetTable(ctx context.Context, request *TResetTableReq) (r *status.TStatus, err error) {
  var _args6 ImpalaServiceResetTableArgs
  _args6.Request = request
  var _result7 ImpalaServiceResetTableResult
  if err = p.c.Call(ctx, "ResetTable", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - QueryID
func (p *ImpalaServiceClient) GetRuntimeProfile(ctx context.Context, query_id *beeswax.QueryHandle) (r string, err error) {
  var _args8 ImpalaServiceGetRuntimeProfileArgs
  _args8.QueryID = query_id
  var _result9 ImpalaServiceGetRuntimeProfileResult
  if err = p.c.Call(ctx, "GetRuntimeProfile", &_args8, &_result9); err != nil {
    return
  }
  switch {
  case _result9.Error!= nil:
    return r, _result9.Error
  }

  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Handle
func (p *ImpalaServiceClient) CloseInsert(ctx context.Context, handle *beeswax.QueryHandle) (r *TInsertResult_, err error) {
  var _args10 ImpalaServiceCloseInsertArgs
  _args10.Handle = handle
  var _result11 ImpalaServiceCloseInsertResult
  if err = p.c.Call(ctx, "CloseInsert", &_args10, &_result11); err != nil {
    return
  }
  switch {
  case _result11.Error!= nil:
    return r, _result11.Error
  case _result11.Error2!= nil:
    return r, _result11.Error2
  }

  return _result11.GetSuccess(), nil
}

func (p *ImpalaServiceClient) PingImpalaService(ctx context.Context) (r *TPingImpalaServiceResp, err error) {
  var _args12 ImpalaServicePingImpalaServiceArgs
  var _result13 ImpalaServicePingImpalaServiceResult
  if err = p.c.Call(ctx, "PingImpalaService", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - Handle
func (p *ImpalaServiceClient) GetExecSummary(ctx context.Context, handle *beeswax.QueryHandle) (r *execstats.TExecSummary, err error) {
  var _args14 ImpalaServiceGetExecSummaryArgs
  _args14.Handle = handle
  var _result15 ImpalaServiceGetExecSummaryResult
  if err = p.c.Call(ctx, "GetExecSummary", &_args14, &_result15); err != nil {
    return
  }
  switch {
  case _result15.Error!= nil:
    return r, _result15.Error
  case _result15.Error2!= nil:
    return r, _result15.Error2
  }

  return _result15.GetSuccess(), nil
}

type ImpalaServiceProcessor struct {
  *beeswax.BeeswaxServiceProcessor
}

func NewImpalaServiceProcessor(handler ImpalaService) *ImpalaServiceProcessor {
  self16 := &ImpalaServiceProcessor{beeswax.NewBeeswaxServiceProcessor(handler)}
  self16.AddToProcessorMap("Cancel", &impalaServiceProcessorCancel{handler:handler})
  self16.AddToProcessorMap("ResetCatalog", &impalaServiceProcessorResetCatalog{handler:handler})
  self16.AddToProcessorMap("ResetTable", &impalaServiceProcessorResetTable{handler:handler})
  self16.AddToProcessorMap("GetRuntimeProfile", &impalaServiceProcessorGetRuntimeProfile{handler:handler})
  self16.AddToProcessorMap("CloseInsert", &impalaServiceProcessorCloseInsert{handler:handler})
  self16.AddToProcessorMap("PingImpalaService", &impalaServiceProcessorPingImpalaService{handler:handler})
  self16.AddToProcessorMap("GetExecSummary", &impalaServiceProcessorGetExecSummary{handler:handler})
  return self16
}

type impalaServiceProcessorCancel struct {
  handler ImpalaService
}

func (p *impalaServiceProcessorCancel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ImpalaServiceCancelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Cancel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ImpalaServiceCancelResult{}
var retval *status.TStatus
  var err2 error
  if retval, err2 = p.handler.Cancel(ctx, args.QueryID); err2 != nil {
  switch v := err2.(type) {
    case *beeswax.BeeswaxException:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Cancel: " + err2.Error())
    oprot.WriteMessageBegin("Cancel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Cancel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type impalaServiceProcessorResetCatalog struct {
  handler ImpalaService
}

func (p *impalaServiceProcessorResetCatalog) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ImpalaServiceResetCatalogArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ResetCatalog", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ImpalaServiceResetCatalogResult{}
var retval *status.TStatus
  var err2 error
  if retval, err2 = p.handler.ResetCatalog(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResetCatalog: " + err2.Error())
    oprot.WriteMessageBegin("ResetCatalog", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ResetCatalog", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type impalaServiceProcessorResetTable struct {
  handler ImpalaService
}

func (p *impalaServiceProcessorResetTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ImpalaServiceResetTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ResetTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ImpalaServiceResetTableResult{}
var retval *status.TStatus
  var err2 error
  if retval, err2 = p.handler.ResetTable(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResetTable: " + err2.Error())
    oprot.WriteMessageBegin("ResetTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ResetTable", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type impalaServiceProcessorGetRuntimeProfile struct {
  handler ImpalaService
}

func (p *impalaServiceProcessorGetRuntimeProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ImpalaServiceGetRuntimeProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetRuntimeProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ImpalaServiceGetRuntimeProfileResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetRuntimeProfile(ctx, args.QueryID); err2 != nil {
  switch v := err2.(type) {
    case *beeswax.BeeswaxException:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRuntimeProfile: " + err2.Error())
    oprot.WriteMessageBegin("GetRuntimeProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetRuntimeProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type impalaServiceProcessorCloseInsert struct {
  handler ImpalaService
}

func (p *impalaServiceProcessorCloseInsert) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ImpalaServiceCloseInsertArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CloseInsert", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ImpalaServiceCloseInsertResult{}
var retval *TInsertResult_
  var err2 error
  if retval, err2 = p.handler.CloseInsert(ctx, args.Handle); err2 != nil {
  switch v := err2.(type) {
    case *beeswax.QueryNotFoundException:
  result.Error = v
    case *beeswax.BeeswaxException:
  result.Error2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CloseInsert: " + err2.Error())
    oprot.WriteMessageBegin("CloseInsert", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CloseInsert", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type impalaServiceProcessorPingImpalaService struct {
  handler ImpalaService
}

func (p *impalaServiceProcessorPingImpalaService) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ImpalaServicePingImpalaServiceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("PingImpalaService", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ImpalaServicePingImpalaServiceResult{}
var retval *TPingImpalaServiceResp
  var err2 error
  if retval, err2 = p.handler.PingImpalaService(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PingImpalaService: " + err2.Error())
    oprot.WriteMessageBegin("PingImpalaService", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("PingImpalaService", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type impalaServiceProcessorGetExecSummary struct {
  handler ImpalaService
}

func (p *impalaServiceProcessorGetExecSummary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ImpalaServiceGetExecSummaryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetExecSummary", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ImpalaServiceGetExecSummaryResult{}
var retval *execstats.TExecSummary
  var err2 error
  if retval, err2 = p.handler.GetExecSummary(ctx, args.Handle); err2 != nil {
  switch v := err2.(type) {
    case *beeswax.QueryNotFoundException:
  result.Error = v
    case *beeswax.BeeswaxException:
  result.Error2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetExecSummary: " + err2.Error())
    oprot.WriteMessageBegin("GetExecSummary", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetExecSummary", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - QueryID
type ImpalaServiceCancelArgs struct {
  QueryID *beeswax.QueryHandle `thrift:"query_id,1" db:"query_id" json:"query_id"`
}

func NewImpalaServiceCancelArgs() *ImpalaServiceCancelArgs {
  return &ImpalaServiceCancelArgs{}
}

var ImpalaServiceCancelArgs_QueryID_DEFAULT *beeswax.QueryHandle
func (p *ImpalaServiceCancelArgs) GetQueryID() *beeswax.QueryHandle {
  if !p.IsSetQueryID() {
    return ImpalaServiceCancelArgs_QueryID_DEFAULT
  }
return p.QueryID
}
func (p *ImpalaServiceCancelArgs) IsSetQueryID() bool {
  return p.QueryID != nil
}

func (p *ImpalaServiceCancelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceCancelArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.QueryID = &beeswax.QueryHandle{}
  if err := p.QueryID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryID), err)
  }
  return nil
}

func (p *ImpalaServiceCancelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Cancel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceCancelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query_id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query_id: ", p), err) }
  if err := p.QueryID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query_id: ", p), err) }
  return err
}

func (p *ImpalaServiceCancelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceCancelArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type ImpalaServiceCancelResult struct {
  Success *status.TStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *beeswax.BeeswaxException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewImpalaServiceCancelResult() *ImpalaServiceCancelResult {
  return &ImpalaServiceCancelResult{}
}

var ImpalaServiceCancelResult_Success_DEFAULT *status.TStatus
func (p *ImpalaServiceCancelResult) GetSuccess() *status.TStatus {
  if !p.IsSetSuccess() {
    return ImpalaServiceCancelResult_Success_DEFAULT
  }
return p.Success
}
var ImpalaServiceCancelResult_Error_DEFAULT *beeswax.BeeswaxException
func (p *ImpalaServiceCancelResult) GetError() *beeswax.BeeswaxException {
  if !p.IsSetError() {
    return ImpalaServiceCancelResult_Error_DEFAULT
  }
return p.Error
}
func (p *ImpalaServiceCancelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ImpalaServiceCancelResult) IsSetError() bool {
  return p.Error != nil
}

func (p *ImpalaServiceCancelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceCancelResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &status.TStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ImpalaServiceCancelResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &beeswax.BeeswaxException{
  SQLState: "     ",
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *ImpalaServiceCancelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Cancel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceCancelResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceCancelResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceCancelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceCancelResult(%+v)", *p)
}

type ImpalaServiceResetCatalogArgs struct {
}

func NewImpalaServiceResetCatalogArgs() *ImpalaServiceResetCatalogArgs {
  return &ImpalaServiceResetCatalogArgs{}
}

func (p *ImpalaServiceResetCatalogArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceResetCatalogArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResetCatalog_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceResetCatalogArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceResetCatalogArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ImpalaServiceResetCatalogResult struct {
  Success *status.TStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewImpalaServiceResetCatalogResult() *ImpalaServiceResetCatalogResult {
  return &ImpalaServiceResetCatalogResult{}
}

var ImpalaServiceResetCatalogResult_Success_DEFAULT *status.TStatus
func (p *ImpalaServiceResetCatalogResult) GetSuccess() *status.TStatus {
  if !p.IsSetSuccess() {
    return ImpalaServiceResetCatalogResult_Success_DEFAULT
  }
return p.Success
}
func (p *ImpalaServiceResetCatalogResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ImpalaServiceResetCatalogResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceResetCatalogResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &status.TStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ImpalaServiceResetCatalogResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResetCatalog_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceResetCatalogResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceResetCatalogResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceResetCatalogResult(%+v)", *p)
}

// Attributes:
//  - Request
type ImpalaServiceResetTableArgs struct {
  Request *TResetTableReq `thrift:"request,1" db:"request" json:"request"`
}

func NewImpalaServiceResetTableArgs() *ImpalaServiceResetTableArgs {
  return &ImpalaServiceResetTableArgs{}
}

var ImpalaServiceResetTableArgs_Request_DEFAULT *TResetTableReq
func (p *ImpalaServiceResetTableArgs) GetRequest() *TResetTableReq {
  if !p.IsSetRequest() {
    return ImpalaServiceResetTableArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ImpalaServiceResetTableArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ImpalaServiceResetTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceResetTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &TResetTableReq{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ImpalaServiceResetTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResetTable_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceResetTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ImpalaServiceResetTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceResetTableArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ImpalaServiceResetTableResult struct {
  Success *status.TStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewImpalaServiceResetTableResult() *ImpalaServiceResetTableResult {
  return &ImpalaServiceResetTableResult{}
}

var ImpalaServiceResetTableResult_Success_DEFAULT *status.TStatus
func (p *ImpalaServiceResetTableResult) GetSuccess() *status.TStatus {
  if !p.IsSetSuccess() {
    return ImpalaServiceResetTableResult_Success_DEFAULT
  }
return p.Success
}
func (p *ImpalaServiceResetTableResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ImpalaServiceResetTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceResetTableResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &status.TStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ImpalaServiceResetTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResetTable_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceResetTableResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceResetTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceResetTableResult(%+v)", *p)
}

// Attributes:
//  - QueryID
type ImpalaServiceGetRuntimeProfileArgs struct {
  QueryID *beeswax.QueryHandle `thrift:"query_id,1" db:"query_id" json:"query_id"`
}

func NewImpalaServiceGetRuntimeProfileArgs() *ImpalaServiceGetRuntimeProfileArgs {
  return &ImpalaServiceGetRuntimeProfileArgs{}
}

var ImpalaServiceGetRuntimeProfileArgs_QueryID_DEFAULT *beeswax.QueryHandle
func (p *ImpalaServiceGetRuntimeProfileArgs) GetQueryID() *beeswax.QueryHandle {
  if !p.IsSetQueryID() {
    return ImpalaServiceGetRuntimeProfileArgs_QueryID_DEFAULT
  }
return p.QueryID
}
func (p *ImpalaServiceGetRuntimeProfileArgs) IsSetQueryID() bool {
  return p.QueryID != nil
}

func (p *ImpalaServiceGetRuntimeProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceGetRuntimeProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.QueryID = &beeswax.QueryHandle{}
  if err := p.QueryID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryID), err)
  }
  return nil
}

func (p *ImpalaServiceGetRuntimeProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetRuntimeProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceGetRuntimeProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query_id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query_id: ", p), err) }
  if err := p.QueryID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query_id: ", p), err) }
  return err
}

func (p *ImpalaServiceGetRuntimeProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceGetRuntimeProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type ImpalaServiceGetRuntimeProfileResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *beeswax.BeeswaxException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewImpalaServiceGetRuntimeProfileResult() *ImpalaServiceGetRuntimeProfileResult {
  return &ImpalaServiceGetRuntimeProfileResult{}
}

var ImpalaServiceGetRuntimeProfileResult_Success_DEFAULT string
func (p *ImpalaServiceGetRuntimeProfileResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ImpalaServiceGetRuntimeProfileResult_Success_DEFAULT
  }
return *p.Success
}
var ImpalaServiceGetRuntimeProfileResult_Error_DEFAULT *beeswax.BeeswaxException
func (p *ImpalaServiceGetRuntimeProfileResult) GetError() *beeswax.BeeswaxException {
  if !p.IsSetError() {
    return ImpalaServiceGetRuntimeProfileResult_Error_DEFAULT
  }
return p.Error
}
func (p *ImpalaServiceGetRuntimeProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ImpalaServiceGetRuntimeProfileResult) IsSetError() bool {
  return p.Error != nil
}

func (p *ImpalaServiceGetRuntimeProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceGetRuntimeProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ImpalaServiceGetRuntimeProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &beeswax.BeeswaxException{
  SQLState: "     ",
}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *ImpalaServiceGetRuntimeProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetRuntimeProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceGetRuntimeProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceGetRuntimeProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceGetRuntimeProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceGetRuntimeProfileResult(%+v)", *p)
}

// Attributes:
//  - Handle
type ImpalaServiceCloseInsertArgs struct {
  Handle *beeswax.QueryHandle `thrift:"handle,1" db:"handle" json:"handle"`
}

func NewImpalaServiceCloseInsertArgs() *ImpalaServiceCloseInsertArgs {
  return &ImpalaServiceCloseInsertArgs{}
}

var ImpalaServiceCloseInsertArgs_Handle_DEFAULT *beeswax.QueryHandle
func (p *ImpalaServiceCloseInsertArgs) GetHandle() *beeswax.QueryHandle {
  if !p.IsSetHandle() {
    return ImpalaServiceCloseInsertArgs_Handle_DEFAULT
  }
return p.Handle
}
func (p *ImpalaServiceCloseInsertArgs) IsSetHandle() bool {
  return p.Handle != nil
}

func (p *ImpalaServiceCloseInsertArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceCloseInsertArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Handle = &beeswax.QueryHandle{}
  if err := p.Handle.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Handle), err)
  }
  return nil
}

func (p *ImpalaServiceCloseInsertArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CloseInsert_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceCloseInsertArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("handle", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:handle: ", p), err) }
  if err := p.Handle.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Handle), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:handle: ", p), err) }
  return err
}

func (p *ImpalaServiceCloseInsertArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceCloseInsertArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
//  - Error2
type ImpalaServiceCloseInsertResult struct {
  Success *TInsertResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *beeswax.QueryNotFoundException `thrift:"error,1" db:"error" json:"error,omitempty"`
  Error2 *beeswax.BeeswaxException `thrift:"error2,2" db:"error2" json:"error2,omitempty"`
}

func NewImpalaServiceCloseInsertResult() *ImpalaServiceCloseInsertResult {
  return &ImpalaServiceCloseInsertResult{}
}

var ImpalaServiceCloseInsertResult_Success_DEFAULT *TInsertResult_
func (p *ImpalaServiceCloseInsertResult) GetSuccess() *TInsertResult_ {
  if !p.IsSetSuccess() {
    return ImpalaServiceCloseInsertResult_Success_DEFAULT
  }
return p.Success
}
var ImpalaServiceCloseInsertResult_Error_DEFAULT *beeswax.QueryNotFoundException
func (p *ImpalaServiceCloseInsertResult) GetError() *beeswax.QueryNotFoundException {
  if !p.IsSetError() {
    return ImpalaServiceCloseInsertResult_Error_DEFAULT
  }
return p.Error
}
var ImpalaServiceCloseInsertResult_Error2_DEFAULT *beeswax.BeeswaxException
func (p *ImpalaServiceCloseInsertResult) GetError2() *beeswax.BeeswaxException {
  if !p.IsSetError2() {
    return ImpalaServiceCloseInsertResult_Error2_DEFAULT
  }
return p.Error2
}
func (p *ImpalaServiceCloseInsertResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ImpalaServiceCloseInsertResult) IsSetError() bool {
  return p.Error != nil
}

func (p *ImpalaServiceCloseInsertResult) IsSetError2() bool {
  return p.Error2 != nil
}

func (p *ImpalaServiceCloseInsertResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceCloseInsertResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TInsertResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ImpalaServiceCloseInsertResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &beeswax.QueryNotFoundException{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *ImpalaServiceCloseInsertResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Error2 = &beeswax.BeeswaxException{
  SQLState: "     ",
}
  if err := p.Error2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error2), err)
  }
  return nil
}

func (p *ImpalaServiceCloseInsertResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CloseInsert_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceCloseInsertResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceCloseInsertResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceCloseInsertResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetError2() {
    if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error2: ", p), err) }
    if err := p.Error2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error2: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceCloseInsertResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceCloseInsertResult(%+v)", *p)
}

type ImpalaServicePingImpalaServiceArgs struct {
}

func NewImpalaServicePingImpalaServiceArgs() *ImpalaServicePingImpalaServiceArgs {
  return &ImpalaServicePingImpalaServiceArgs{}
}

func (p *ImpalaServicePingImpalaServiceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServicePingImpalaServiceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PingImpalaService_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServicePingImpalaServiceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServicePingImpalaServiceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ImpalaServicePingImpalaServiceResult struct {
  Success *TPingImpalaServiceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewImpalaServicePingImpalaServiceResult() *ImpalaServicePingImpalaServiceResult {
  return &ImpalaServicePingImpalaServiceResult{}
}

var ImpalaServicePingImpalaServiceResult_Success_DEFAULT *TPingImpalaServiceResp
func (p *ImpalaServicePingImpalaServiceResult) GetSuccess() *TPingImpalaServiceResp {
  if !p.IsSetSuccess() {
    return ImpalaServicePingImpalaServiceResult_Success_DEFAULT
  }
return p.Success
}
func (p *ImpalaServicePingImpalaServiceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ImpalaServicePingImpalaServiceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServicePingImpalaServiceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TPingImpalaServiceResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ImpalaServicePingImpalaServiceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PingImpalaService_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServicePingImpalaServiceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ImpalaServicePingImpalaServiceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServicePingImpalaServiceResult(%+v)", *p)
}

// Attributes:
//  - Handle
type ImpalaServiceGetExecSummaryArgs struct {
  Handle *beeswax.QueryHandle `thrift:"handle,1" db:"handle" json:"handle"`
}

func NewImpalaServiceGetExecSummaryArgs() *ImpalaServiceGetExecSummaryArgs {
  return &ImpalaServiceGetExecSummaryArgs{}
}

var ImpalaServiceGetExecSummaryArgs_Handle_DEFAULT *beeswax.QueryHandle
func (p *ImpalaServiceGetExecSummaryArgs) GetHandle() *beeswax.QueryHandle {
  if !p.IsSetHandle() {
    return ImpalaServiceGetExecSummaryArgs_Handle_DEFAULT
  }
return p.Handle
}
func (p *ImpalaServiceGetExecSummaryArgs) IsSetHandle() bool {
  return p.Handle != nil
}

func (p *ImpalaServiceGetExecSummaryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceGetExecSummaryArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Handle = &beeswax.QueryHandle{}
  if err := p.Handle.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Handle), err)
  }
  return nil
}

func (p *ImpalaServiceGetExecSummaryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetExecSummary_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceGetExecSummaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("handle", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:handle: ", p), err) }
  if err := p.Handle.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Handle), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:handle: ", p), err) }
  return err
}

func (p *ImpalaServiceGetExecSummaryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceGetExecSummaryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
//  - Error2
type ImpalaServiceGetExecSummaryResult struct {
  Success *execstats.TExecSummary `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *beeswax.QueryNotFoundException `thrift:"error,1" db:"error" json:"error,omitempty"`
  Error2 *beeswax.BeeswaxException `thrift:"error2,2" db:"error2" json:"error2,omitempty"`
}

func NewImpalaServiceGetExecSummaryResult() *ImpalaServiceGetExecSummaryResult {
  return &ImpalaServiceGetExecSummaryResult{}
}

var ImpalaServiceGetExecSummaryResult_Success_DEFAULT *execstats.TExecSummary
func (p *ImpalaServiceGetExecSummaryResult) GetSuccess() *execstats.TExecSummary {
  if !p.IsSetSuccess() {
    return ImpalaServiceGetExecSummaryResult_Success_DEFAULT
  }
return p.Success
}
var ImpalaServiceGetExecSummaryResult_Error_DEFAULT *beeswax.QueryNotFoundException
func (p *ImpalaServiceGetExecSummaryResult) GetError() *beeswax.QueryNotFoundException {
  if !p.IsSetError() {
    return ImpalaServiceGetExecSummaryResult_Error_DEFAULT
  }
return p.Error
}
var ImpalaServiceGetExecSummaryResult_Error2_DEFAULT *beeswax.BeeswaxException
func (p *ImpalaServiceGetExecSummaryResult) GetError2() *beeswax.BeeswaxException {
  if !p.IsSetError2() {
    return ImpalaServiceGetExecSummaryResult_Error2_DEFAULT
  }
return p.Error2
}
func (p *ImpalaServiceGetExecSummaryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ImpalaServiceGetExecSummaryResult) IsSetError() bool {
  return p.Error != nil
}

func (p *ImpalaServiceGetExecSummaryResult) IsSetError2() bool {
  return p.Error2 != nil
}

func (p *ImpalaServiceGetExecSummaryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaServiceGetExecSummaryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &execstats.TExecSummary{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ImpalaServiceGetExecSummaryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &beeswax.QueryNotFoundException{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *ImpalaServiceGetExecSummaryResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Error2 = &beeswax.BeeswaxException{
  SQLState: "     ",
}
  if err := p.Error2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error2), err)
  }
  return nil
}

func (p *ImpalaServiceGetExecSummaryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetExecSummary_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaServiceGetExecSummaryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceGetExecSummaryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceGetExecSummaryResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetError2() {
    if err := oprot.WriteFieldBegin("error2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error2: ", p), err) }
    if err := p.Error2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error2: ", p), err) }
  }
  return err
}

func (p *ImpalaServiceGetExecSummaryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaServiceGetExecSummaryResult(%+v)", *p)
}


type ImpalaHiveServer2Service interface {
  tcliservice.TCLIService

  // Parameters:
  //  - Req
  GetExecSummary(ctx context.Context, req *TGetExecSummaryReq) (r *TGetExecSummaryResp, err error)
  // Parameters:
  //  - Req
  GetRuntimeProfile(ctx context.Context, req *TGetRuntimeProfileReq) (r *TGetRuntimeProfileResp, err error)
}

type ImpalaHiveServer2ServiceClient struct {
  c thrift.TClient
  *tcliservice.TCLIServiceClient
}

// Deprecated: Use NewImpalaHiveServer2Service instead
func NewImpalaHiveServer2ServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ImpalaHiveServer2ServiceClient {
  return &ImpalaHiveServer2ServiceClient{TCLIServiceClient: tcliservice.NewTCLIServiceClientFactory(t, f)}}

// Deprecated: Use NewImpalaHiveServer2Service instead
func NewImpalaHiveServer2ServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ImpalaHiveServer2ServiceClient {
  return &ImpalaHiveServer2ServiceClient{TCLIServiceClient: tcliservice.NewTCLIServiceClientProtocol(t, iprot, oprot)}
}

func NewImpalaHiveServer2ServiceClient(c thrift.TClient) *ImpalaHiveServer2ServiceClient {
  return &ImpalaHiveServer2ServiceClient{
    c: c,
    TCLIServiceClient: tcliservice.NewTCLIServiceClient(c),
  }
}

// Parameters:
//  - Req
func (p *ImpalaHiveServer2ServiceClient) GetExecSummary(ctx context.Context, req *TGetExecSummaryReq) (r *TGetExecSummaryResp, err error) {
  var _args96 ImpalaHiveServer2ServiceGetExecSummaryArgs
  _args96.Req = req
  var _result97 ImpalaHiveServer2ServiceGetExecSummaryResult
  if err = p.c.Call(ctx, "GetExecSummary", &_args96, &_result97); err != nil {
    return
  }
  return _result97.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ImpalaHiveServer2ServiceClient) GetRuntimeProfile(ctx context.Context, req *TGetRuntimeProfileReq) (r *TGetRuntimeProfileResp, err error) {
  var _args98 ImpalaHiveServer2ServiceGetRuntimeProfileArgs
  _args98.Req = req
  var _result99 ImpalaHiveServer2ServiceGetRuntimeProfileResult
  if err = p.c.Call(ctx, "GetRuntimeProfile", &_args98, &_result99); err != nil {
    return
  }
  return _result99.GetSuccess(), nil
}

type ImpalaHiveServer2ServiceProcessor struct {
  *tcliservice.TCLIServiceProcessor
}

func NewImpalaHiveServer2ServiceProcessor(handler ImpalaHiveServer2Service) *ImpalaHiveServer2ServiceProcessor {
  self100 := &ImpalaHiveServer2ServiceProcessor{tcliservice.NewTCLIServiceProcessor(handler)}
  self100.AddToProcessorMap("GetExecSummary", &impalaHiveServer2ServiceProcessorGetExecSummary{handler:handler})
  self100.AddToProcessorMap("GetRuntimeProfile", &impalaHiveServer2ServiceProcessorGetRuntimeProfile{handler:handler})
  return self100
}

type impalaHiveServer2ServiceProcessorGetExecSummary struct {
  handler ImpalaHiveServer2Service
}

func (p *impalaHiveServer2ServiceProcessorGetExecSummary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ImpalaHiveServer2ServiceGetExecSummaryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetExecSummary", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ImpalaHiveServer2ServiceGetExecSummaryResult{}
var retval *TGetExecSummaryResp
  var err2 error
  if retval, err2 = p.handler.GetExecSummary(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetExecSummary: " + err2.Error())
    oprot.WriteMessageBegin("GetExecSummary", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetExecSummary", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type impalaHiveServer2ServiceProcessorGetRuntimeProfile struct {
  handler ImpalaHiveServer2Service
}

func (p *impalaHiveServer2ServiceProcessorGetRuntimeProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ImpalaHiveServer2ServiceGetRuntimeProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetRuntimeProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ImpalaHiveServer2ServiceGetRuntimeProfileResult{}
var retval *TGetRuntimeProfileResp
  var err2 error
  if retval, err2 = p.handler.GetRuntimeProfile(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRuntimeProfile: " + err2.Error())
    oprot.WriteMessageBegin("GetRuntimeProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetRuntimeProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type ImpalaHiveServer2ServiceGetExecSummaryArgs struct {
  Req *TGetExecSummaryReq `thrift:"req,1" db:"req" json:"req"`
}

func NewImpalaHiveServer2ServiceGetExecSummaryArgs() *ImpalaHiveServer2ServiceGetExecSummaryArgs {
  return &ImpalaHiveServer2ServiceGetExecSummaryArgs{}
}

var ImpalaHiveServer2ServiceGetExecSummaryArgs_Req_DEFAULT *TGetExecSummaryReq
func (p *ImpalaHiveServer2ServiceGetExecSummaryArgs) GetReq() *TGetExecSummaryReq {
  if !p.IsSetReq() {
    return ImpalaHiveServer2ServiceGetExecSummaryArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ImpalaHiveServer2ServiceGetExecSummaryArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ImpalaHiveServer2ServiceGetExecSummaryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetExecSummaryArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &TGetExecSummaryReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetExecSummaryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetExecSummary_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetExecSummaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ImpalaHiveServer2ServiceGetExecSummaryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaHiveServer2ServiceGetExecSummaryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ImpalaHiveServer2ServiceGetExecSummaryResult struct {
  Success *TGetExecSummaryResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewImpalaHiveServer2ServiceGetExecSummaryResult() *ImpalaHiveServer2ServiceGetExecSummaryResult {
  return &ImpalaHiveServer2ServiceGetExecSummaryResult{}
}

var ImpalaHiveServer2ServiceGetExecSummaryResult_Success_DEFAULT *TGetExecSummaryResp
func (p *ImpalaHiveServer2ServiceGetExecSummaryResult) GetSuccess() *TGetExecSummaryResp {
  if !p.IsSetSuccess() {
    return ImpalaHiveServer2ServiceGetExecSummaryResult_Success_DEFAULT
  }
return p.Success
}
func (p *ImpalaHiveServer2ServiceGetExecSummaryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ImpalaHiveServer2ServiceGetExecSummaryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetExecSummaryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TGetExecSummaryResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetExecSummaryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetExecSummary_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetExecSummaryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ImpalaHiveServer2ServiceGetExecSummaryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaHiveServer2ServiceGetExecSummaryResult(%+v)", *p)
}

// Attributes:
//  - Req
type ImpalaHiveServer2ServiceGetRuntimeProfileArgs struct {
  Req *TGetRuntimeProfileReq `thrift:"req,1" db:"req" json:"req"`
}

func NewImpalaHiveServer2ServiceGetRuntimeProfileArgs() *ImpalaHiveServer2ServiceGetRuntimeProfileArgs {
  return &ImpalaHiveServer2ServiceGetRuntimeProfileArgs{}
}

var ImpalaHiveServer2ServiceGetRuntimeProfileArgs_Req_DEFAULT *TGetRuntimeProfileReq
func (p *ImpalaHiveServer2ServiceGetRuntimeProfileArgs) GetReq() *TGetRuntimeProfileReq {
  if !p.IsSetReq() {
    return ImpalaHiveServer2ServiceGetRuntimeProfileArgs_Req_DEFAULT
  }
return p.Req
}
func (p *ImpalaHiveServer2ServiceGetRuntimeProfileArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *ImpalaHiveServer2ServiceGetRuntimeProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetRuntimeProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &TGetRuntimeProfileReq{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetRuntimeProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetRuntimeProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetRuntimeProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ImpalaHiveServer2ServiceGetRuntimeProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaHiveServer2ServiceGetRuntimeProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ImpalaHiveServer2ServiceGetRuntimeProfileResult struct {
  Success *TGetRuntimeProfileResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewImpalaHiveServer2ServiceGetRuntimeProfileResult() *ImpalaHiveServer2ServiceGetRuntimeProfileResult {
  return &ImpalaHiveServer2ServiceGetRuntimeProfileResult{}
}

var ImpalaHiveServer2ServiceGetRuntimeProfileResult_Success_DEFAULT *TGetRuntimeProfileResp
func (p *ImpalaHiveServer2ServiceGetRuntimeProfileResult) GetSuccess() *TGetRuntimeProfileResp {
  if !p.IsSetSuccess() {
    return ImpalaHiveServer2ServiceGetRuntimeProfileResult_Success_DEFAULT
  }
return p.Success
}
func (p *ImpalaHiveServer2ServiceGetRuntimeProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ImpalaHiveServer2ServiceGetRuntimeProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetRuntimeProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TGetRuntimeProfileResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetRuntimeProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetRuntimeProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImpalaHiveServer2ServiceGetRuntimeProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ImpalaHiveServer2ServiceGetRuntimeProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImpalaHiveServer2ServiceGetRuntimeProfileResult(%+v)", *p)
}


