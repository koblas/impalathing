// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package execstats

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/MediaMath/impalathing/services/status"
	"github.com/MediaMath/impalathing/services/types"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = status.GoUnusedProtection__
var _ = types.GoUnusedProtection__
type TExecState int64
const (
  TExecState_REGISTERED TExecState = 0
  TExecState_PLANNING TExecState = 1
  TExecState_QUEUED TExecState = 2
  TExecState_RUNNING TExecState = 3
  TExecState_FINISHED TExecState = 4
  TExecState_CANCELLED TExecState = 5
  TExecState_FAILED TExecState = 6
)

func (p TExecState) String() string {
  switch p {
  case TExecState_REGISTERED: return "REGISTERED"
  case TExecState_PLANNING: return "PLANNING"
  case TExecState_QUEUED: return "QUEUED"
  case TExecState_RUNNING: return "RUNNING"
  case TExecState_FINISHED: return "FINISHED"
  case TExecState_CANCELLED: return "CANCELLED"
  case TExecState_FAILED: return "FAILED"
  }
  return "<UNSET>"
}

func TExecStateFromString(s string) (TExecState, error) {
  switch s {
  case "REGISTERED": return TExecState_REGISTERED, nil 
  case "PLANNING": return TExecState_PLANNING, nil 
  case "QUEUED": return TExecState_QUEUED, nil 
  case "RUNNING": return TExecState_RUNNING, nil 
  case "FINISHED": return TExecState_FINISHED, nil 
  case "CANCELLED": return TExecState_CANCELLED, nil 
  case "FAILED": return TExecState_FAILED, nil 
  }
  return TExecState(0), fmt.Errorf("not a valid TExecState string")
}


func TExecStatePtr(v TExecState) *TExecState { return &v }

func (p TExecState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TExecState) UnmarshalText(text []byte) error {
q, err := TExecStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TExecState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TExecState(v)
return nil
}

func (p * TExecState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - LatencyNs
//  - CPUTimeNs
//  - Cardinality
//  - MemoryUsed
type TExecStats struct {
  LatencyNs *int64 `thrift:"latency_ns,1" db:"latency_ns" json:"latency_ns,omitempty"`
  CPUTimeNs *int64 `thrift:"cpu_time_ns,2" db:"cpu_time_ns" json:"cpu_time_ns,omitempty"`
  Cardinality *int64 `thrift:"cardinality,3" db:"cardinality" json:"cardinality,omitempty"`
  MemoryUsed *int64 `thrift:"memory_used,4" db:"memory_used" json:"memory_used,omitempty"`
}

func NewTExecStats() *TExecStats {
  return &TExecStats{}
}

var TExecStats_LatencyNs_DEFAULT int64
func (p *TExecStats) GetLatencyNs() int64 {
  if !p.IsSetLatencyNs() {
    return TExecStats_LatencyNs_DEFAULT
  }
return *p.LatencyNs
}
var TExecStats_CPUTimeNs_DEFAULT int64
func (p *TExecStats) GetCPUTimeNs() int64 {
  if !p.IsSetCPUTimeNs() {
    return TExecStats_CPUTimeNs_DEFAULT
  }
return *p.CPUTimeNs
}
var TExecStats_Cardinality_DEFAULT int64
func (p *TExecStats) GetCardinality() int64 {
  if !p.IsSetCardinality() {
    return TExecStats_Cardinality_DEFAULT
  }
return *p.Cardinality
}
var TExecStats_MemoryUsed_DEFAULT int64
func (p *TExecStats) GetMemoryUsed() int64 {
  if !p.IsSetMemoryUsed() {
    return TExecStats_MemoryUsed_DEFAULT
  }
return *p.MemoryUsed
}
func (p *TExecStats) IsSetLatencyNs() bool {
  return p.LatencyNs != nil
}

func (p *TExecStats) IsSetCPUTimeNs() bool {
  return p.CPUTimeNs != nil
}

func (p *TExecStats) IsSetCardinality() bool {
  return p.Cardinality != nil
}

func (p *TExecStats) IsSetMemoryUsed() bool {
  return p.MemoryUsed != nil
}

func (p *TExecStats) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExecStats)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LatencyNs = &v
}
  return nil
}

func (p *TExecStats)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CPUTimeNs = &v
}
  return nil
}

func (p *TExecStats)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Cardinality = &v
}
  return nil
}

func (p *TExecStats)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MemoryUsed = &v
}
  return nil
}

func (p *TExecStats) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TExecStats"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExecStats) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetLatencyNs() {
    if err := oprot.WriteFieldBegin("latency_ns", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:latency_ns: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LatencyNs)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.latency_ns (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:latency_ns: ", p), err) }
  }
  return err
}

func (p *TExecStats) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCPUTimeNs() {
    if err := oprot.WriteFieldBegin("cpu_time_ns", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cpu_time_ns: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CPUTimeNs)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cpu_time_ns (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cpu_time_ns: ", p), err) }
  }
  return err
}

func (p *TExecStats) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCardinality() {
    if err := oprot.WriteFieldBegin("cardinality", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cardinality: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Cardinality)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cardinality (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cardinality: ", p), err) }
  }
  return err
}

func (p *TExecStats) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetMemoryUsed() {
    if err := oprot.WriteFieldBegin("memory_used", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memory_used: ", p), err) }
    if err := oprot.WriteI64(int64(*p.MemoryUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.memory_used (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memory_used: ", p), err) }
  }
  return err
}

func (p *TExecStats) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExecStats(%+v)", *p)
}

// Attributes:
//  - NodeID
//  - FragmentIdx
//  - Label
//  - LabelDetail
//  - NumChildren
//  - EstimatedStats
//  - ExecStats
//  - IsBroadcast
type TPlanNodeExecSummary struct {
  NodeID types.TPlanNodeId `thrift:"node_id,1,required" db:"node_id" json:"node_id"`
  FragmentIdx types.TFragmentIdx `thrift:"fragment_idx,2,required" db:"fragment_idx" json:"fragment_idx"`
  Label string `thrift:"label,3,required" db:"label" json:"label"`
  LabelDetail *string `thrift:"label_detail,4" db:"label_detail" json:"label_detail,omitempty"`
  NumChildren int32 `thrift:"num_children,5,required" db:"num_children" json:"num_children"`
  EstimatedStats *TExecStats `thrift:"estimated_stats,6" db:"estimated_stats" json:"estimated_stats,omitempty"`
  ExecStats []*TExecStats `thrift:"exec_stats,7" db:"exec_stats" json:"exec_stats,omitempty"`
  IsBroadcast *bool `thrift:"is_broadcast,8" db:"is_broadcast" json:"is_broadcast,omitempty"`
}

func NewTPlanNodeExecSummary() *TPlanNodeExecSummary {
  return &TPlanNodeExecSummary{}
}


func (p *TPlanNodeExecSummary) GetNodeID() types.TPlanNodeId {
  return p.NodeID
}

func (p *TPlanNodeExecSummary) GetFragmentIdx() types.TFragmentIdx {
  return p.FragmentIdx
}

func (p *TPlanNodeExecSummary) GetLabel() string {
  return p.Label
}
var TPlanNodeExecSummary_LabelDetail_DEFAULT string
func (p *TPlanNodeExecSummary) GetLabelDetail() string {
  if !p.IsSetLabelDetail() {
    return TPlanNodeExecSummary_LabelDetail_DEFAULT
  }
return *p.LabelDetail
}

func (p *TPlanNodeExecSummary) GetNumChildren() int32 {
  return p.NumChildren
}
var TPlanNodeExecSummary_EstimatedStats_DEFAULT *TExecStats
func (p *TPlanNodeExecSummary) GetEstimatedStats() *TExecStats {
  if !p.IsSetEstimatedStats() {
    return TPlanNodeExecSummary_EstimatedStats_DEFAULT
  }
return p.EstimatedStats
}
var TPlanNodeExecSummary_ExecStats_DEFAULT []*TExecStats

func (p *TPlanNodeExecSummary) GetExecStats() []*TExecStats {
  return p.ExecStats
}
var TPlanNodeExecSummary_IsBroadcast_DEFAULT bool
func (p *TPlanNodeExecSummary) GetIsBroadcast() bool {
  if !p.IsSetIsBroadcast() {
    return TPlanNodeExecSummary_IsBroadcast_DEFAULT
  }
return *p.IsBroadcast
}
func (p *TPlanNodeExecSummary) IsSetLabelDetail() bool {
  return p.LabelDetail != nil
}

func (p *TPlanNodeExecSummary) IsSetEstimatedStats() bool {
  return p.EstimatedStats != nil
}

func (p *TPlanNodeExecSummary) IsSetExecStats() bool {
  return p.ExecStats != nil
}

func (p *TPlanNodeExecSummary) IsSetIsBroadcast() bool {
  return p.IsBroadcast != nil
}

func (p *TPlanNodeExecSummary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNodeID bool = false;
  var issetFragmentIdx bool = false;
  var issetLabel bool = false;
  var issetNumChildren bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNodeID = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetFragmentIdx = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLabel = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNumChildren = true
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNodeID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NodeID is not set"));
  }
  if !issetFragmentIdx{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FragmentIdx is not set"));
  }
  if !issetLabel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Label is not set"));
  }
  if !issetNumChildren{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumChildren is not set"));
  }
  return nil
}

func (p *TPlanNodeExecSummary)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := types.TPlanNodeId(v)
  p.NodeID = temp
}
  return nil
}

func (p *TPlanNodeExecSummary)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := types.TFragmentIdx(v)
  p.FragmentIdx = temp
}
  return nil
}

func (p *TPlanNodeExecSummary)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Label = v
}
  return nil
}

func (p *TPlanNodeExecSummary)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LabelDetail = &v
}
  return nil
}

func (p *TPlanNodeExecSummary)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NumChildren = v
}
  return nil
}

func (p *TPlanNodeExecSummary)  ReadField6(iprot thrift.TProtocol) error {
  p.EstimatedStats = &TExecStats{}
  if err := p.EstimatedStats.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EstimatedStats), err)
  }
  return nil
}

func (p *TPlanNodeExecSummary)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TExecStats, 0, size)
  p.ExecStats =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TExecStats{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ExecStats = append(p.ExecStats, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPlanNodeExecSummary)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IsBroadcast = &v
}
  return nil
}

func (p *TPlanNodeExecSummary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPlanNodeExecSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPlanNodeExecSummary) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.NodeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.node_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node_id: ", p), err) }
  return err
}

func (p *TPlanNodeExecSummary) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fragment_idx", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fragment_idx: ", p), err) }
  if err := oprot.WriteI32(int32(p.FragmentIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fragment_idx (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fragment_idx: ", p), err) }
  return err
}

func (p *TPlanNodeExecSummary) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("label", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:label: ", p), err) }
  if err := oprot.WriteString(string(p.Label)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.label (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:label: ", p), err) }
  return err
}

func (p *TPlanNodeExecSummary) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLabelDetail() {
    if err := oprot.WriteFieldBegin("label_detail", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:label_detail: ", p), err) }
    if err := oprot.WriteString(string(*p.LabelDetail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.label_detail (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:label_detail: ", p), err) }
  }
  return err
}

func (p *TPlanNodeExecSummary) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_children", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:num_children: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumChildren)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_children (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:num_children: ", p), err) }
  return err
}

func (p *TPlanNodeExecSummary) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetEstimatedStats() {
    if err := oprot.WriteFieldBegin("estimated_stats", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:estimated_stats: ", p), err) }
    if err := p.EstimatedStats.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EstimatedStats), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:estimated_stats: ", p), err) }
  }
  return err
}

func (p *TPlanNodeExecSummary) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetExecStats() {
    if err := oprot.WriteFieldBegin("exec_stats", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:exec_stats: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExecStats)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExecStats {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:exec_stats: ", p), err) }
  }
  return err
}

func (p *TPlanNodeExecSummary) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsBroadcast() {
    if err := oprot.WriteFieldBegin("is_broadcast", thrift.BOOL, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:is_broadcast: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsBroadcast)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.is_broadcast (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:is_broadcast: ", p), err) }
  }
  return err
}

func (p *TPlanNodeExecSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPlanNodeExecSummary(%+v)", *p)
}

// Attributes:
//  - TotalScanRanges
//  - NumCompletedScanRanges
type TExecProgress struct {
  TotalScanRanges *int64 `thrift:"total_scan_ranges,1" db:"total_scan_ranges" json:"total_scan_ranges,omitempty"`
  NumCompletedScanRanges *int64 `thrift:"num_completed_scan_ranges,2" db:"num_completed_scan_ranges" json:"num_completed_scan_ranges,omitempty"`
}

func NewTExecProgress() *TExecProgress {
  return &TExecProgress{}
}

var TExecProgress_TotalScanRanges_DEFAULT int64
func (p *TExecProgress) GetTotalScanRanges() int64 {
  if !p.IsSetTotalScanRanges() {
    return TExecProgress_TotalScanRanges_DEFAULT
  }
return *p.TotalScanRanges
}
var TExecProgress_NumCompletedScanRanges_DEFAULT int64
func (p *TExecProgress) GetNumCompletedScanRanges() int64 {
  if !p.IsSetNumCompletedScanRanges() {
    return TExecProgress_NumCompletedScanRanges_DEFAULT
  }
return *p.NumCompletedScanRanges
}
func (p *TExecProgress) IsSetTotalScanRanges() bool {
  return p.TotalScanRanges != nil
}

func (p *TExecProgress) IsSetNumCompletedScanRanges() bool {
  return p.NumCompletedScanRanges != nil
}

func (p *TExecProgress) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExecProgress)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalScanRanges = &v
}
  return nil
}

func (p *TExecProgress)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumCompletedScanRanges = &v
}
  return nil
}

func (p *TExecProgress) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TExecProgress"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExecProgress) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTotalScanRanges() {
    if err := oprot.WriteFieldBegin("total_scan_ranges", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:total_scan_ranges: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TotalScanRanges)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.total_scan_ranges (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:total_scan_ranges: ", p), err) }
  }
  return err
}

func (p *TExecProgress) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumCompletedScanRanges() {
    if err := oprot.WriteFieldBegin("num_completed_scan_ranges", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_completed_scan_ranges: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumCompletedScanRanges)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.num_completed_scan_ranges (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_completed_scan_ranges: ", p), err) }
  }
  return err
}

func (p *TExecProgress) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExecProgress(%+v)", *p)
}

// Attributes:
//  - State
//  - Status
//  - Nodes
//  - ExchToSenderMap
//  - ErrorLogs
//  - Progress
type TExecSummary struct {
  State TExecState `thrift:"state,1,required" db:"state" json:"state"`
  Status *status.TStatus `thrift:"status,2" db:"status" json:"status,omitempty"`
  Nodes []*TPlanNodeExecSummary `thrift:"nodes,3" db:"nodes" json:"nodes,omitempty"`
  ExchToSenderMap map[int32]int32 `thrift:"exch_to_sender_map,4" db:"exch_to_sender_map" json:"exch_to_sender_map,omitempty"`
  ErrorLogs []string `thrift:"error_logs,5" db:"error_logs" json:"error_logs,omitempty"`
  Progress *TExecProgress `thrift:"progress,6" db:"progress" json:"progress,omitempty"`
}

func NewTExecSummary() *TExecSummary {
  return &TExecSummary{}
}


func (p *TExecSummary) GetState() TExecState {
  return p.State
}
var TExecSummary_Status_DEFAULT *status.TStatus
func (p *TExecSummary) GetStatus() *status.TStatus {
  if !p.IsSetStatus() {
    return TExecSummary_Status_DEFAULT
  }
return p.Status
}
var TExecSummary_Nodes_DEFAULT []*TPlanNodeExecSummary

func (p *TExecSummary) GetNodes() []*TPlanNodeExecSummary {
  return p.Nodes
}
var TExecSummary_ExchToSenderMap_DEFAULT map[int32]int32

func (p *TExecSummary) GetExchToSenderMap() map[int32]int32 {
  return p.ExchToSenderMap
}
var TExecSummary_ErrorLogs_DEFAULT []string

func (p *TExecSummary) GetErrorLogs() []string {
  return p.ErrorLogs
}
var TExecSummary_Progress_DEFAULT *TExecProgress
func (p *TExecSummary) GetProgress() *TExecProgress {
  if !p.IsSetProgress() {
    return TExecSummary_Progress_DEFAULT
  }
return p.Progress
}
func (p *TExecSummary) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TExecSummary) IsSetNodes() bool {
  return p.Nodes != nil
}

func (p *TExecSummary) IsSetExchToSenderMap() bool {
  return p.ExchToSenderMap != nil
}

func (p *TExecSummary) IsSetErrorLogs() bool {
  return p.ErrorLogs != nil
}

func (p *TExecSummary) IsSetProgress() bool {
  return p.Progress != nil
}

func (p *TExecSummary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetState = true
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  return nil
}

func (p *TExecSummary)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TExecState(v)
  p.State = temp
}
  return nil
}

func (p *TExecSummary)  ReadField2(iprot thrift.TProtocol) error {
  p.Status = &status.TStatus{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *TExecSummary)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TPlanNodeExecSummary, 0, size)
  p.Nodes =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TPlanNodeExecSummary{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Nodes = append(p.Nodes, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TExecSummary)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]int32, size)
  p.ExchToSenderMap =  tMap
  for i := 0; i < size; i ++ {
var _key2 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
var _val3 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val3 = v
}
    p.ExchToSenderMap[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TExecSummary)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ErrorLogs =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.ErrorLogs = append(p.ErrorLogs, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TExecSummary)  ReadField6(iprot thrift.TProtocol) error {
  p.Progress = &TExecProgress{}
  if err := p.Progress.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Progress), err)
  }
  return nil
}

func (p *TExecSummary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TExecSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExecSummary) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:state: ", p), err) }
  return err
}

func (p *TExecSummary) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  }
  return err
}

func (p *TExecSummary) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNodes() {
    if err := oprot.WriteFieldBegin("nodes", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nodes: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nodes {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nodes: ", p), err) }
  }
  return err
}

func (p *TExecSummary) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetExchToSenderMap() {
    if err := oprot.WriteFieldBegin("exch_to_sender_map", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:exch_to_sender_map: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.ExchToSenderMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExchToSenderMap {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:exch_to_sender_map: ", p), err) }
  }
  return err
}

func (p *TExecSummary) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorLogs() {
    if err := oprot.WriteFieldBegin("error_logs", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:error_logs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ErrorLogs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ErrorLogs {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:error_logs: ", p), err) }
  }
  return err
}

func (p *TExecSummary) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetProgress() {
    if err := oprot.WriteFieldBegin("progress", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:progress: ", p), err) }
    if err := p.Progress.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Progress), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:progress: ", p), err) }
  }
  return err
}

func (p *TExecSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExecSummary(%+v)", *p)
}

