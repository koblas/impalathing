// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hive_metastore

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/MediaMath/impalathing/services/fb303"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = fb303.GoUnusedProtection__
type HiveObjectType int64
const (
  HiveObjectType_GLOBAL HiveObjectType = 1
  HiveObjectType_DATABASE HiveObjectType = 2
  HiveObjectType_TABLE HiveObjectType = 3
  HiveObjectType_PARTITION HiveObjectType = 4
  HiveObjectType_COLUMN HiveObjectType = 5
)

func (p HiveObjectType) String() string {
  switch p {
  case HiveObjectType_GLOBAL: return "GLOBAL"
  case HiveObjectType_DATABASE: return "DATABASE"
  case HiveObjectType_TABLE: return "TABLE"
  case HiveObjectType_PARTITION: return "PARTITION"
  case HiveObjectType_COLUMN: return "COLUMN"
  }
  return "<UNSET>"
}

func HiveObjectTypeFromString(s string) (HiveObjectType, error) {
  switch s {
  case "GLOBAL": return HiveObjectType_GLOBAL, nil 
  case "DATABASE": return HiveObjectType_DATABASE, nil 
  case "TABLE": return HiveObjectType_TABLE, nil 
  case "PARTITION": return HiveObjectType_PARTITION, nil 
  case "COLUMN": return HiveObjectType_COLUMN, nil 
  }
  return HiveObjectType(0), fmt.Errorf("not a valid HiveObjectType string")
}


func HiveObjectTypePtr(v HiveObjectType) *HiveObjectType { return &v }

func (p HiveObjectType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *HiveObjectType) UnmarshalText(text []byte) error {
q, err := HiveObjectTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *HiveObjectType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = HiveObjectType(v)
return nil
}

func (p * HiveObjectType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrincipalType int64
const (
  PrincipalType_USER PrincipalType = 1
  PrincipalType_ROLE PrincipalType = 2
  PrincipalType_GROUP PrincipalType = 3
)

func (p PrincipalType) String() string {
  switch p {
  case PrincipalType_USER: return "USER"
  case PrincipalType_ROLE: return "ROLE"
  case PrincipalType_GROUP: return "GROUP"
  }
  return "<UNSET>"
}

func PrincipalTypeFromString(s string) (PrincipalType, error) {
  switch s {
  case "USER": return PrincipalType_USER, nil 
  case "ROLE": return PrincipalType_ROLE, nil 
  case "GROUP": return PrincipalType_GROUP, nil 
  }
  return PrincipalType(0), fmt.Errorf("not a valid PrincipalType string")
}


func PrincipalTypePtr(v PrincipalType) *PrincipalType { return &v }

func (p PrincipalType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrincipalType) UnmarshalText(text []byte) error {
q, err := PrincipalTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrincipalType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrincipalType(v)
return nil
}

func (p * PrincipalType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PartitionEventType int64
const (
  PartitionEventType_LOAD_DONE PartitionEventType = 1
)

func (p PartitionEventType) String() string {
  switch p {
  case PartitionEventType_LOAD_DONE: return "LOAD_DONE"
  }
  return "<UNSET>"
}

func PartitionEventTypeFromString(s string) (PartitionEventType, error) {
  switch s {
  case "LOAD_DONE": return PartitionEventType_LOAD_DONE, nil 
  }
  return PartitionEventType(0), fmt.Errorf("not a valid PartitionEventType string")
}


func PartitionEventTypePtr(v PartitionEventType) *PartitionEventType { return &v }

func (p PartitionEventType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PartitionEventType) UnmarshalText(text []byte) error {
q, err := PartitionEventTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PartitionEventType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PartitionEventType(v)
return nil
}

func (p * PartitionEventType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Version
//  - Comments
type Version struct {
  Version string `thrift:"version,1" db:"version" json:"version"`
  Comments string `thrift:"comments,2" db:"comments" json:"comments"`
}

func NewVersion() *Version {
  return &Version{}
}


func (p *Version) GetVersion() string {
  return p.Version
}

func (p *Version) GetComments() string {
  return p.Comments
}
func (p *Version) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Version)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *Version)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Comments = v
}
  return nil
}

func (p *Version) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Version"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Version) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *Version) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("comments", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:comments: ", p), err) }
  if err := oprot.WriteString(string(p.Comments)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.comments (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:comments: ", p), err) }
  return err
}

func (p *Version) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Version(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type
//  - Comment
type FieldSchema struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Type string `thrift:"type,2" db:"type" json:"type"`
  Comment string `thrift:"comment,3" db:"comment" json:"comment"`
}

func NewFieldSchema() *FieldSchema {
  return &FieldSchema{}
}


func (p *FieldSchema) GetName() string {
  return p.Name
}

func (p *FieldSchema) GetType() string {
  return p.Type
}

func (p *FieldSchema) GetComment() string {
  return p.Comment
}
func (p *FieldSchema) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FieldSchema)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *FieldSchema)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *FieldSchema)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Comment = v
}
  return nil
}

func (p *FieldSchema) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FieldSchema"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FieldSchema) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *FieldSchema) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *FieldSchema) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("comment", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:comment: ", p), err) }
  if err := oprot.WriteString(string(p.Comment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.comment (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:comment: ", p), err) }
  return err
}

func (p *FieldSchema) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FieldSchema(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type1
//  - Type2
//  - Fields
type Type struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Type1 *string `thrift:"type1,2" db:"type1" json:"type1,omitempty"`
  Type2 *string `thrift:"type2,3" db:"type2" json:"type2,omitempty"`
  Fields []*FieldSchema `thrift:"fields,4" db:"fields" json:"fields,omitempty"`
}

func NewType() *Type {
  return &Type{}
}


func (p *Type) GetName() string {
  return p.Name
}
var Type_Type1_DEFAULT string
func (p *Type) GetType1() string {
  if !p.IsSetType1() {
    return Type_Type1_DEFAULT
  }
return *p.Type1
}
var Type_Type2_DEFAULT string
func (p *Type) GetType2() string {
  if !p.IsSetType2() {
    return Type_Type2_DEFAULT
  }
return *p.Type2
}
var Type_Fields_DEFAULT []*FieldSchema

func (p *Type) GetFields() []*FieldSchema {
  return p.Fields
}
func (p *Type) IsSetType1() bool {
  return p.Type1 != nil
}

func (p *Type) IsSetType2() bool {
  return p.Type2 != nil
}

func (p *Type) IsSetFields() bool {
  return p.Fields != nil
}

func (p *Type) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Type)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Type)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type1 = &v
}
  return nil
}

func (p *Type)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type2 = &v
}
  return nil
}

func (p *Type)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &FieldSchema{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Fields = append(p.Fields, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Type) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Type"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Type) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Type) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetType1() {
    if err := oprot.WriteFieldBegin("type1", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type1: ", p), err) }
    if err := oprot.WriteString(string(*p.Type1)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type1 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type1: ", p), err) }
  }
  return err
}

func (p *Type) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetType2() {
    if err := oprot.WriteFieldBegin("type2", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type2: ", p), err) }
    if err := oprot.WriteString(string(*p.Type2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type2 (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type2: ", p), err) }
  }
  return err
}

func (p *Type) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetFields() {
    if err := oprot.WriteFieldBegin("fields", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fields: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Fields {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fields: ", p), err) }
  }
  return err
}

func (p *Type) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Type(%+v)", *p)
}

// Attributes:
//  - ObjectType
//  - DbName
//  - ObjectName
//  - PartValues
//  - ColumnName
type HiveObjectRef struct {
  ObjectType HiveObjectType `thrift:"objectType,1" db:"objectType" json:"objectType"`
  DbName string `thrift:"dbName,2" db:"dbName" json:"dbName"`
  ObjectName string `thrift:"objectName,3" db:"objectName" json:"objectName"`
  PartValues []string `thrift:"partValues,4" db:"partValues" json:"partValues"`
  ColumnName string `thrift:"columnName,5" db:"columnName" json:"columnName"`
}

func NewHiveObjectRef() *HiveObjectRef {
  return &HiveObjectRef{}
}


func (p *HiveObjectRef) GetObjectType() HiveObjectType {
  return p.ObjectType
}

func (p *HiveObjectRef) GetDbName() string {
  return p.DbName
}

func (p *HiveObjectRef) GetObjectName() string {
  return p.ObjectName
}

func (p *HiveObjectRef) GetPartValues() []string {
  return p.PartValues
}

func (p *HiveObjectRef) GetColumnName() string {
  return p.ColumnName
}
func (p *HiveObjectRef) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HiveObjectRef)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := HiveObjectType(v)
  p.ObjectType = temp
}
  return nil
}

func (p *HiveObjectRef)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *HiveObjectRef)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ObjectName = v
}
  return nil
}

func (p *HiveObjectRef)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartValues =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.PartValues = append(p.PartValues, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HiveObjectRef)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ColumnName = v
}
  return nil
}

func (p *HiveObjectRef) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HiveObjectRef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HiveObjectRef) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("objectType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:objectType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ObjectType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.objectType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:objectType: ", p), err) }
  return err
}

func (p *HiveObjectRef) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbName: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbName: ", p), err) }
  return err
}

func (p *HiveObjectRef) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("objectName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:objectName: ", p), err) }
  if err := oprot.WriteString(string(p.ObjectName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.objectName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:objectName: ", p), err) }
  return err
}

func (p *HiveObjectRef) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partValues", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partValues: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PartValues)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartValues {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partValues: ", p), err) }
  return err
}

func (p *HiveObjectRef) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columnName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:columnName: ", p), err) }
  if err := oprot.WriteString(string(p.ColumnName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.columnName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:columnName: ", p), err) }
  return err
}

func (p *HiveObjectRef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HiveObjectRef(%+v)", *p)
}

// Attributes:
//  - Privilege
//  - CreateTime
//  - Grantor
//  - GrantorType
//  - GrantOption
type PrivilegeGrantInfo struct {
  Privilege string `thrift:"privilege,1" db:"privilege" json:"privilege"`
  CreateTime int32 `thrift:"createTime,2" db:"createTime" json:"createTime"`
  Grantor string `thrift:"grantor,3" db:"grantor" json:"grantor"`
  GrantorType PrincipalType `thrift:"grantorType,4" db:"grantorType" json:"grantorType"`
  GrantOption bool `thrift:"grantOption,5" db:"grantOption" json:"grantOption"`
}

func NewPrivilegeGrantInfo() *PrivilegeGrantInfo {
  return &PrivilegeGrantInfo{}
}


func (p *PrivilegeGrantInfo) GetPrivilege() string {
  return p.Privilege
}

func (p *PrivilegeGrantInfo) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *PrivilegeGrantInfo) GetGrantor() string {
  return p.Grantor
}

func (p *PrivilegeGrantInfo) GetGrantorType() PrincipalType {
  return p.GrantorType
}

func (p *PrivilegeGrantInfo) GetGrantOption() bool {
  return p.GrantOption
}
func (p *PrivilegeGrantInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrivilegeGrantInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Privilege = v
}
  return nil
}

func (p *PrivilegeGrantInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *PrivilegeGrantInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Grantor = v
}
  return nil
}

func (p *PrivilegeGrantInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := PrincipalType(v)
  p.GrantorType = temp
}
  return nil
}

func (p *PrivilegeGrantInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.GrantOption = v
}
  return nil
}

func (p *PrivilegeGrantInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrivilegeGrantInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrivilegeGrantInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privilege", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privilege: ", p), err) }
  if err := oprot.WriteString(string(p.Privilege)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privilege (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privilege: ", p), err) }
  return err
}

func (p *PrivilegeGrantInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createTime: ", p), err) }
  if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createTime: ", p), err) }
  return err
}

func (p *PrivilegeGrantInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("grantor", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:grantor: ", p), err) }
  if err := oprot.WriteString(string(p.Grantor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantor (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:grantor: ", p), err) }
  return err
}

func (p *PrivilegeGrantInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("grantorType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:grantorType: ", p), err) }
  if err := oprot.WriteI32(int32(p.GrantorType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantorType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:grantorType: ", p), err) }
  return err
}

func (p *PrivilegeGrantInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("grantOption", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:grantOption: ", p), err) }
  if err := oprot.WriteBool(bool(p.GrantOption)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantOption (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:grantOption: ", p), err) }
  return err
}

func (p *PrivilegeGrantInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrivilegeGrantInfo(%+v)", *p)
}

// Attributes:
//  - HiveObject
//  - PrincipalName
//  - PrincipalType
//  - GrantInfo
type HiveObjectPrivilege struct {
  HiveObject *HiveObjectRef `thrift:"hiveObject,1" db:"hiveObject" json:"hiveObject"`
  PrincipalName string `thrift:"principalName,2" db:"principalName" json:"principalName"`
  PrincipalType PrincipalType `thrift:"principalType,3" db:"principalType" json:"principalType"`
  GrantInfo *PrivilegeGrantInfo `thrift:"grantInfo,4" db:"grantInfo" json:"grantInfo"`
}

func NewHiveObjectPrivilege() *HiveObjectPrivilege {
  return &HiveObjectPrivilege{}
}

var HiveObjectPrivilege_HiveObject_DEFAULT *HiveObjectRef
func (p *HiveObjectPrivilege) GetHiveObject() *HiveObjectRef {
  if !p.IsSetHiveObject() {
    return HiveObjectPrivilege_HiveObject_DEFAULT
  }
return p.HiveObject
}

func (p *HiveObjectPrivilege) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *HiveObjectPrivilege) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}
var HiveObjectPrivilege_GrantInfo_DEFAULT *PrivilegeGrantInfo
func (p *HiveObjectPrivilege) GetGrantInfo() *PrivilegeGrantInfo {
  if !p.IsSetGrantInfo() {
    return HiveObjectPrivilege_GrantInfo_DEFAULT
  }
return p.GrantInfo
}
func (p *HiveObjectPrivilege) IsSetHiveObject() bool {
  return p.HiveObject != nil
}

func (p *HiveObjectPrivilege) IsSetGrantInfo() bool {
  return p.GrantInfo != nil
}

func (p *HiveObjectPrivilege) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HiveObjectPrivilege)  ReadField1(iprot thrift.TProtocol) error {
  p.HiveObject = &HiveObjectRef{}
  if err := p.HiveObject.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HiveObject), err)
  }
  return nil
}

func (p *HiveObjectPrivilege)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *HiveObjectPrivilege)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *HiveObjectPrivilege)  ReadField4(iprot thrift.TProtocol) error {
  p.GrantInfo = &PrivilegeGrantInfo{}
  if err := p.GrantInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GrantInfo), err)
  }
  return nil
}

func (p *HiveObjectPrivilege) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HiveObjectPrivilege"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HiveObjectPrivilege) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hiveObject: ", p), err) }
  if err := p.HiveObject.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HiveObject), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hiveObject: ", p), err) }
  return err
}

func (p *HiveObjectPrivilege) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("principalName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principalName: ", p), err) }
  if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principalName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principalName: ", p), err) }
  return err
}

func (p *HiveObjectPrivilege) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("principalType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:principalType: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principalType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:principalType: ", p), err) }
  return err
}

func (p *HiveObjectPrivilege) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("grantInfo", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:grantInfo: ", p), err) }
  if err := p.GrantInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GrantInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:grantInfo: ", p), err) }
  return err
}

func (p *HiveObjectPrivilege) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HiveObjectPrivilege(%+v)", *p)
}

// Attributes:
//  - Privileges
type PrivilegeBag struct {
  Privileges []*HiveObjectPrivilege `thrift:"privileges,1" db:"privileges" json:"privileges"`
}

func NewPrivilegeBag() *PrivilegeBag {
  return &PrivilegeBag{}
}


func (p *PrivilegeBag) GetPrivileges() []*HiveObjectPrivilege {
  return p.Privileges
}
func (p *PrivilegeBag) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrivilegeBag)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HiveObjectPrivilege, 0, size)
  p.Privileges =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &HiveObjectPrivilege{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Privileges = append(p.Privileges, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrivilegeBag) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrivilegeBag"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrivilegeBag) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privileges", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privileges: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Privileges {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privileges: ", p), err) }
  return err
}

func (p *PrivilegeBag) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrivilegeBag(%+v)", *p)
}

// Attributes:
//  - UserPrivileges
//  - GroupPrivileges
//  - RolePrivileges
type PrincipalPrivilegeSet struct {
  UserPrivileges map[string][]*PrivilegeGrantInfo `thrift:"userPrivileges,1" db:"userPrivileges" json:"userPrivileges"`
  GroupPrivileges map[string][]*PrivilegeGrantInfo `thrift:"groupPrivileges,2" db:"groupPrivileges" json:"groupPrivileges"`
  RolePrivileges map[string][]*PrivilegeGrantInfo `thrift:"rolePrivileges,3" db:"rolePrivileges" json:"rolePrivileges"`
}

func NewPrincipalPrivilegeSet() *PrincipalPrivilegeSet {
  return &PrincipalPrivilegeSet{}
}


func (p *PrincipalPrivilegeSet) GetUserPrivileges() map[string][]*PrivilegeGrantInfo {
  return p.UserPrivileges
}

func (p *PrincipalPrivilegeSet) GetGroupPrivileges() map[string][]*PrivilegeGrantInfo {
  return p.GroupPrivileges
}

func (p *PrincipalPrivilegeSet) GetRolePrivileges() map[string][]*PrivilegeGrantInfo {
  return p.RolePrivileges
}
func (p *PrincipalPrivilegeSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrincipalPrivilegeSet)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*PrivilegeGrantInfo, size)
  p.UserPrivileges =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*PrivilegeGrantInfo, 0, size)
    _val4 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem5 := &PrivilegeGrantInfo{}
      if err := _elem5.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
      }
      _val4 = append(_val4, _elem5)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.UserPrivileges[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PrincipalPrivilegeSet)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*PrivilegeGrantInfo, size)
  p.GroupPrivileges =  tMap
  for i := 0; i < size; i ++ {
var _key6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*PrivilegeGrantInfo, 0, size)
    _val7 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem8 := &PrivilegeGrantInfo{}
      if err := _elem8.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
      }
      _val7 = append(_val7, _elem8)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.GroupPrivileges[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PrincipalPrivilegeSet)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*PrivilegeGrantInfo, size)
  p.RolePrivileges =  tMap
  for i := 0; i < size; i ++ {
var _key9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key9 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*PrivilegeGrantInfo, 0, size)
    _val10 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem11 := &PrivilegeGrantInfo{}
      if err := _elem11.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
      }
      _val10 = append(_val10, _elem11)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.RolePrivileges[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PrincipalPrivilegeSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrincipalPrivilegeSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrincipalPrivilegeSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userPrivileges", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userPrivileges: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.UserPrivileges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.UserPrivileges {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userPrivileges: ", p), err) }
  return err
}

func (p *PrincipalPrivilegeSet) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupPrivileges", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupPrivileges: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.GroupPrivileges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.GroupPrivileges {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupPrivileges: ", p), err) }
  return err
}

func (p *PrincipalPrivilegeSet) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rolePrivileges", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rolePrivileges: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.RolePrivileges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.RolePrivileges {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rolePrivileges: ", p), err) }
  return err
}

func (p *PrincipalPrivilegeSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrincipalPrivilegeSet(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - CreateTime
//  - OwnerName
type Role struct {
  RoleName string `thrift:"roleName,1" db:"roleName" json:"roleName"`
  CreateTime int32 `thrift:"createTime,2" db:"createTime" json:"createTime"`
  OwnerName string `thrift:"ownerName,3" db:"ownerName" json:"ownerName"`
}

func NewRole() *Role {
  return &Role{}
}


func (p *Role) GetRoleName() string {
  return p.RoleName
}

func (p *Role) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *Role) GetOwnerName() string {
  return p.OwnerName
}
func (p *Role) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Role)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *Role)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Role)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OwnerName = v
}
  return nil
}

func (p *Role) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Role"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Role) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:roleName: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roleName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:roleName: ", p), err) }
  return err
}

func (p *Role) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createTime: ", p), err) }
  if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createTime: ", p), err) }
  return err
}

func (p *Role) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ownerName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ownerName: ", p), err) }
  if err := oprot.WriteString(string(p.OwnerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ownerName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ownerName: ", p), err) }
  return err
}

func (p *Role) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Role(%+v)", *p)
}

// Attributes:
//  - Name
//  - Description
//  - LocationUri
//  - Parameters
//  - Privileges
type Database struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Description string `thrift:"description,2" db:"description" json:"description"`
  LocationUri string `thrift:"locationUri,3" db:"locationUri" json:"locationUri"`
  Parameters map[string]string `thrift:"parameters,4" db:"parameters" json:"parameters"`
  Privileges *PrincipalPrivilegeSet `thrift:"privileges,5" db:"privileges" json:"privileges,omitempty"`
}

func NewDatabase() *Database {
  return &Database{}
}


func (p *Database) GetName() string {
  return p.Name
}

func (p *Database) GetDescription() string {
  return p.Description
}

func (p *Database) GetLocationUri() string {
  return p.LocationUri
}

func (p *Database) GetParameters() map[string]string {
  return p.Parameters
}
var Database_Privileges_DEFAULT *PrincipalPrivilegeSet
func (p *Database) GetPrivileges() *PrincipalPrivilegeSet {
  if !p.IsSetPrivileges() {
    return Database_Privileges_DEFAULT
  }
return p.Privileges
}
func (p *Database) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *Database) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Database)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Database)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *Database)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LocationUri = v
}
  return nil
}

func (p *Database)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key12 = v
}
var _val13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val13 = v
}
    p.Parameters[_key12] = _val13
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Database)  ReadField5(iprot thrift.TProtocol) error {
  p.Privileges = &PrincipalPrivilegeSet{}
  if err := p.Privileges.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *Database) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Database"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Database) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Database) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:description: ", p), err) }
  return err
}

func (p *Database) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locationUri", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locationUri: ", p), err) }
  if err := oprot.WriteString(string(p.LocationUri)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locationUri (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locationUri: ", p), err) }
  return err
}

func (p *Database) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:parameters: ", p), err) }
  return err
}

func (p *Database) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:privileges: ", p), err) }
    if err := p.Privileges.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:privileges: ", p), err) }
  }
  return err
}

func (p *Database) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Database(%+v)", *p)
}

// Attributes:
//  - Name
//  - SerializationLib
//  - Parameters
type SerDeInfo struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  SerializationLib string `thrift:"serializationLib,2" db:"serializationLib" json:"serializationLib"`
  Parameters map[string]string `thrift:"parameters,3" db:"parameters" json:"parameters"`
}

func NewSerDeInfo() *SerDeInfo {
  return &SerDeInfo{}
}


func (p *SerDeInfo) GetName() string {
  return p.Name
}

func (p *SerDeInfo) GetSerializationLib() string {
  return p.SerializationLib
}

func (p *SerDeInfo) GetParameters() map[string]string {
  return p.Parameters
}
func (p *SerDeInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SerDeInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SerDeInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SerializationLib = v
}
  return nil
}

func (p *SerDeInfo)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key14 = v
}
var _val15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val15 = v
}
    p.Parameters[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SerDeInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SerDeInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SerDeInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *SerDeInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serializationLib", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serializationLib: ", p), err) }
  if err := oprot.WriteString(string(p.SerializationLib)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serializationLib (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serializationLib: ", p), err) }
  return err
}

func (p *SerDeInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameters: ", p), err) }
  return err
}

func (p *SerDeInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SerDeInfo(%+v)", *p)
}

// Attributes:
//  - Col
//  - Order
type Order struct {
  Col string `thrift:"col,1" db:"col" json:"col"`
  Order int32 `thrift:"order,2" db:"order" json:"order"`
}

func NewOrder() *Order {
  return &Order{}
}


func (p *Order) GetCol() string {
  return p.Col
}

func (p *Order) GetOrder() int32 {
  return p.Order
}
func (p *Order) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Order)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Col = v
}
  return nil
}

func (p *Order)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Order = v
}
  return nil
}

func (p *Order) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Order"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Order) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:col: ", p), err) }
  if err := oprot.WriteString(string(p.Col)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:col: ", p), err) }
  return err
}

func (p *Order) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:order: ", p), err) }
  if err := oprot.WriteI32(int32(p.Order)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:order: ", p), err) }
  return err
}

func (p *Order) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Order(%+v)", *p)
}

// Attributes:
//  - Cols
//  - Location
//  - InputFormat
//  - OutputFormat
//  - Compressed
//  - NumBuckets
//  - SerdeInfo
//  - BucketCols
//  - SortCols
//  - Parameters
//  - StoredAsSubDirectories
type StorageDescriptor struct {
  Cols []*FieldSchema `thrift:"cols,1" db:"cols" json:"cols"`
  Location string `thrift:"location,2" db:"location" json:"location"`
  InputFormat string `thrift:"inputFormat,3" db:"inputFormat" json:"inputFormat"`
  OutputFormat string `thrift:"outputFormat,4" db:"outputFormat" json:"outputFormat"`
  Compressed bool `thrift:"compressed,5" db:"compressed" json:"compressed"`
  NumBuckets int32 `thrift:"numBuckets,6" db:"numBuckets" json:"numBuckets"`
  SerdeInfo *SerDeInfo `thrift:"serdeInfo,7" db:"serdeInfo" json:"serdeInfo"`
  BucketCols []string `thrift:"bucketCols,8" db:"bucketCols" json:"bucketCols"`
  SortCols []*Order `thrift:"sortCols,9" db:"sortCols" json:"sortCols"`
  Parameters map[string]string `thrift:"parameters,10" db:"parameters" json:"parameters"`
  // unused field # 11
  StoredAsSubDirectories *bool `thrift:"storedAsSubDirectories,12" db:"storedAsSubDirectories" json:"storedAsSubDirectories,omitempty"`
}

func NewStorageDescriptor() *StorageDescriptor {
  return &StorageDescriptor{}
}


func (p *StorageDescriptor) GetCols() []*FieldSchema {
  return p.Cols
}

func (p *StorageDescriptor) GetLocation() string {
  return p.Location
}

func (p *StorageDescriptor) GetInputFormat() string {
  return p.InputFormat
}

func (p *StorageDescriptor) GetOutputFormat() string {
  return p.OutputFormat
}

func (p *StorageDescriptor) GetCompressed() bool {
  return p.Compressed
}

func (p *StorageDescriptor) GetNumBuckets() int32 {
  return p.NumBuckets
}
var StorageDescriptor_SerdeInfo_DEFAULT *SerDeInfo
func (p *StorageDescriptor) GetSerdeInfo() *SerDeInfo {
  if !p.IsSetSerdeInfo() {
    return StorageDescriptor_SerdeInfo_DEFAULT
  }
return p.SerdeInfo
}

func (p *StorageDescriptor) GetBucketCols() []string {
  return p.BucketCols
}

func (p *StorageDescriptor) GetSortCols() []*Order {
  return p.SortCols
}

func (p *StorageDescriptor) GetParameters() map[string]string {
  return p.Parameters
}
var StorageDescriptor_StoredAsSubDirectories_DEFAULT bool
func (p *StorageDescriptor) GetStoredAsSubDirectories() bool {
  if !p.IsSetStoredAsSubDirectories() {
    return StorageDescriptor_StoredAsSubDirectories_DEFAULT
  }
return *p.StoredAsSubDirectories
}
func (p *StorageDescriptor) IsSetSerdeInfo() bool {
  return p.SerdeInfo != nil
}

func (p *StorageDescriptor) IsSetStoredAsSubDirectories() bool {
  return p.StoredAsSubDirectories != nil
}

func (p *StorageDescriptor) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.Cols =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &FieldSchema{}
    if err := _elem16.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.Cols = append(p.Cols, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Location = v
}
  return nil
}

func (p *StorageDescriptor)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InputFormat = v
}
  return nil
}

func (p *StorageDescriptor)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OutputFormat = v
}
  return nil
}

func (p *StorageDescriptor)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Compressed = v
}
  return nil
}

func (p *StorageDescriptor)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NumBuckets = v
}
  return nil
}

func (p *StorageDescriptor)  ReadField7(iprot thrift.TProtocol) error {
  p.SerdeInfo = &SerDeInfo{}
  if err := p.SerdeInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SerdeInfo), err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.BucketCols =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.BucketCols = append(p.BucketCols, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Order, 0, size)
  p.SortCols =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &Order{}
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.SortCols = append(p.SortCols, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField10(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key19 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key19 = v
}
var _val20 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val20 = v
}
    p.Parameters[_key19] = _val20
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StorageDescriptor)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.StoredAsSubDirectories = &v
}
  return nil
}

func (p *StorageDescriptor) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StorageDescriptor"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cols", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cols: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Cols {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cols: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("location", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:location: ", p), err) }
  if err := oprot.WriteString(string(p.Location)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.location (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:location: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inputFormat", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:inputFormat: ", p), err) }
  if err := oprot.WriteString(string(p.InputFormat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inputFormat (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:inputFormat: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outputFormat", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outputFormat: ", p), err) }
  if err := oprot.WriteString(string(p.OutputFormat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outputFormat (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outputFormat: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("compressed", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:compressed: ", p), err) }
  if err := oprot.WriteBool(bool(p.Compressed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.compressed (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:compressed: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numBuckets", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:numBuckets: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumBuckets)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numBuckets (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:numBuckets: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serdeInfo", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:serdeInfo: ", p), err) }
  if err := p.SerdeInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SerdeInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:serdeInfo: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bucketCols", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bucketCols: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.BucketCols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BucketCols {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bucketCols: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sortCols", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:sortCols: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SortCols)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SortCols {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:sortCols: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:parameters: ", p), err) }
  return err
}

func (p *StorageDescriptor) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetStoredAsSubDirectories() {
    if err := oprot.WriteFieldBegin("storedAsSubDirectories", thrift.BOOL, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:storedAsSubDirectories: ", p), err) }
    if err := oprot.WriteBool(bool(*p.StoredAsSubDirectories)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storedAsSubDirectories (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:storedAsSubDirectories: ", p), err) }
  }
  return err
}

func (p *StorageDescriptor) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageDescriptor(%+v)", *p)
}

// Attributes:
//  - TableName
//  - DbName
//  - Owner
//  - CreateTime
//  - LastAccessTime
//  - Retention
//  - Sd
//  - PartitionKeys
//  - Parameters
//  - ViewOriginalText
//  - ViewExpandedText
//  - TableType
//  - Privileges
type Table struct {
  TableName string `thrift:"tableName,1" db:"tableName" json:"tableName"`
  DbName string `thrift:"dbName,2" db:"dbName" json:"dbName"`
  Owner string `thrift:"owner,3" db:"owner" json:"owner"`
  CreateTime int32 `thrift:"createTime,4" db:"createTime" json:"createTime"`
  LastAccessTime int32 `thrift:"lastAccessTime,5" db:"lastAccessTime" json:"lastAccessTime"`
  Retention int32 `thrift:"retention,6" db:"retention" json:"retention"`
  Sd *StorageDescriptor `thrift:"sd,7" db:"sd" json:"sd"`
  PartitionKeys []*FieldSchema `thrift:"partitionKeys,8" db:"partitionKeys" json:"partitionKeys"`
  Parameters map[string]string `thrift:"parameters,9" db:"parameters" json:"parameters"`
  ViewOriginalText string `thrift:"viewOriginalText,10" db:"viewOriginalText" json:"viewOriginalText"`
  ViewExpandedText string `thrift:"viewExpandedText,11" db:"viewExpandedText" json:"viewExpandedText"`
  TableType string `thrift:"tableType,12" db:"tableType" json:"tableType"`
  Privileges *PrincipalPrivilegeSet `thrift:"privileges,13" db:"privileges" json:"privileges,omitempty"`
}

func NewTable() *Table {
  return &Table{}
}


func (p *Table) GetTableName() string {
  return p.TableName
}

func (p *Table) GetDbName() string {
  return p.DbName
}

func (p *Table) GetOwner() string {
  return p.Owner
}

func (p *Table) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *Table) GetLastAccessTime() int32 {
  return p.LastAccessTime
}

func (p *Table) GetRetention() int32 {
  return p.Retention
}
var Table_Sd_DEFAULT *StorageDescriptor
func (p *Table) GetSd() *StorageDescriptor {
  if !p.IsSetSd() {
    return Table_Sd_DEFAULT
  }
return p.Sd
}

func (p *Table) GetPartitionKeys() []*FieldSchema {
  return p.PartitionKeys
}

func (p *Table) GetParameters() map[string]string {
  return p.Parameters
}

func (p *Table) GetViewOriginalText() string {
  return p.ViewOriginalText
}

func (p *Table) GetViewExpandedText() string {
  return p.ViewExpandedText
}

func (p *Table) GetTableType() string {
  return p.TableType
}
var Table_Privileges_DEFAULT *PrincipalPrivilegeSet
func (p *Table) GetPrivileges() *PrincipalPrivilegeSet {
  if !p.IsSetPrivileges() {
    return Table_Privileges_DEFAULT
  }
return p.Privileges
}
func (p *Table) IsSetSd() bool {
  return p.Sd != nil
}

func (p *Table) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *Table) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Table)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *Table)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *Table)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Owner = v
}
  return nil
}

func (p *Table)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Table)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastAccessTime = v
}
  return nil
}

func (p *Table)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Retention = v
}
  return nil
}

func (p *Table)  ReadField7(iprot thrift.TProtocol) error {
  p.Sd = &StorageDescriptor{}
  if err := p.Sd.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sd), err)
  }
  return nil
}

func (p *Table)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.PartitionKeys =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &FieldSchema{}
    if err := _elem21.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.PartitionKeys = append(p.PartitionKeys, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Table)  ReadField9(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key22 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key22 = v
}
var _val23 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val23 = v
}
    p.Parameters[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Table)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ViewOriginalText = v
}
  return nil
}

func (p *Table)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ViewExpandedText = v
}
  return nil
}

func (p *Table)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.TableType = v
}
  return nil
}

func (p *Table)  ReadField13(iprot thrift.TProtocol) error {
  p.Privileges = &PrincipalPrivilegeSet{}
  if err := p.Privileges.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *Table) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Table"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Table) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err) }
  return err
}

func (p *Table) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbName: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbName: ", p), err) }
  return err
}

func (p *Table) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("owner", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:owner: ", p), err) }
  if err := oprot.WriteString(string(p.Owner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owner (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:owner: ", p), err) }
  return err
}

func (p *Table) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createTime: ", p), err) }
  if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createTime: ", p), err) }
  return err
}

func (p *Table) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastAccessTime: ", p), err) }
  if err := oprot.WriteI32(int32(p.LastAccessTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastAccessTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastAccessTime: ", p), err) }
  return err
}

func (p *Table) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retention", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:retention: ", p), err) }
  if err := oprot.WriteI32(int32(p.Retention)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.retention (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:retention: ", p), err) }
  return err
}

func (p *Table) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sd", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sd: ", p), err) }
  if err := p.Sd.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sd), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sd: ", p), err) }
  return err
}

func (p *Table) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partitionKeys", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:partitionKeys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartitionKeys {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:partitionKeys: ", p), err) }
  return err
}

func (p *Table) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:parameters: ", p), err) }
  return err
}

func (p *Table) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("viewOriginalText", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:viewOriginalText: ", p), err) }
  if err := oprot.WriteString(string(p.ViewOriginalText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.viewOriginalText (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:viewOriginalText: ", p), err) }
  return err
}

func (p *Table) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("viewExpandedText", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:viewExpandedText: ", p), err) }
  if err := oprot.WriteString(string(p.ViewExpandedText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.viewExpandedText (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:viewExpandedText: ", p), err) }
  return err
}

func (p *Table) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tableType", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tableType: ", p), err) }
  if err := oprot.WriteString(string(p.TableType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableType (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tableType: ", p), err) }
  return err
}

func (p *Table) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:privileges: ", p), err) }
    if err := p.Privileges.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:privileges: ", p), err) }
  }
  return err
}

func (p *Table) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Table(%+v)", *p)
}

// Attributes:
//  - Values
//  - DbName
//  - TableName
//  - CreateTime
//  - LastAccessTime
//  - Sd
//  - Parameters
//  - Privileges
type Partition struct {
  Values []string `thrift:"values,1" db:"values" json:"values"`
  DbName string `thrift:"dbName,2" db:"dbName" json:"dbName"`
  TableName string `thrift:"tableName,3" db:"tableName" json:"tableName"`
  CreateTime int32 `thrift:"createTime,4" db:"createTime" json:"createTime"`
  LastAccessTime int32 `thrift:"lastAccessTime,5" db:"lastAccessTime" json:"lastAccessTime"`
  Sd *StorageDescriptor `thrift:"sd,6" db:"sd" json:"sd"`
  Parameters map[string]string `thrift:"parameters,7" db:"parameters" json:"parameters"`
  Privileges *PrincipalPrivilegeSet `thrift:"privileges,8" db:"privileges" json:"privileges,omitempty"`
}

func NewPartition() *Partition {
  return &Partition{}
}


func (p *Partition) GetValues() []string {
  return p.Values
}

func (p *Partition) GetDbName() string {
  return p.DbName
}

func (p *Partition) GetTableName() string {
  return p.TableName
}

func (p *Partition) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *Partition) GetLastAccessTime() int32 {
  return p.LastAccessTime
}
var Partition_Sd_DEFAULT *StorageDescriptor
func (p *Partition) GetSd() *StorageDescriptor {
  if !p.IsSetSd() {
    return Partition_Sd_DEFAULT
  }
return p.Sd
}

func (p *Partition) GetParameters() map[string]string {
  return p.Parameters
}
var Partition_Privileges_DEFAULT *PrincipalPrivilegeSet
func (p *Partition) GetPrivileges() *PrincipalPrivilegeSet {
  if !p.IsSetPrivileges() {
    return Partition_Privileges_DEFAULT
  }
return p.Privileges
}
func (p *Partition) IsSetSd() bool {
  return p.Sd != nil
}

func (p *Partition) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *Partition) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Partition)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem24 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem24 = v
}
    p.Values = append(p.Values, _elem24)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Partition)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *Partition)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *Partition)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Partition)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastAccessTime = v
}
  return nil
}

func (p *Partition)  ReadField6(iprot thrift.TProtocol) error {
  p.Sd = &StorageDescriptor{}
  if err := p.Sd.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sd), err)
  }
  return nil
}

func (p *Partition)  ReadField7(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key25 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key25 = v
}
var _val26 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val26 = v
}
    p.Parameters[_key25] = _val26
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Partition)  ReadField8(iprot thrift.TProtocol) error {
  p.Privileges = &PrincipalPrivilegeSet{}
  if err := p.Privileges.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *Partition) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Partition"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Partition) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err) }
  return err
}

func (p *Partition) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbName: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbName: ", p), err) }
  return err
}

func (p *Partition) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tableName: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tableName: ", p), err) }
  return err
}

func (p *Partition) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createTime: ", p), err) }
  if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createTime: ", p), err) }
  return err
}

func (p *Partition) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastAccessTime: ", p), err) }
  if err := oprot.WriteI32(int32(p.LastAccessTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastAccessTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastAccessTime: ", p), err) }
  return err
}

func (p *Partition) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sd", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sd: ", p), err) }
  if err := p.Sd.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sd), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sd: ", p), err) }
  return err
}

func (p *Partition) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:parameters: ", p), err) }
  return err
}

func (p *Partition) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrivileges() {
    if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:privileges: ", p), err) }
    if err := p.Privileges.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:privileges: ", p), err) }
  }
  return err
}

func (p *Partition) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Partition(%+v)", *p)
}

// Attributes:
//  - IndexName
//  - IndexHandlerClass
//  - DbName
//  - OrigTableName
//  - CreateTime
//  - LastAccessTime
//  - IndexTableName
//  - Sd
//  - Parameters
//  - DeferredRebuild
type Index struct {
  IndexName string `thrift:"indexName,1" db:"indexName" json:"indexName"`
  IndexHandlerClass string `thrift:"indexHandlerClass,2" db:"indexHandlerClass" json:"indexHandlerClass"`
  DbName string `thrift:"dbName,3" db:"dbName" json:"dbName"`
  OrigTableName string `thrift:"origTableName,4" db:"origTableName" json:"origTableName"`
  CreateTime int32 `thrift:"createTime,5" db:"createTime" json:"createTime"`
  LastAccessTime int32 `thrift:"lastAccessTime,6" db:"lastAccessTime" json:"lastAccessTime"`
  IndexTableName string `thrift:"indexTableName,7" db:"indexTableName" json:"indexTableName"`
  Sd *StorageDescriptor `thrift:"sd,8" db:"sd" json:"sd"`
  Parameters map[string]string `thrift:"parameters,9" db:"parameters" json:"parameters"`
  DeferredRebuild bool `thrift:"deferredRebuild,10" db:"deferredRebuild" json:"deferredRebuild"`
}

func NewIndex() *Index {
  return &Index{}
}


func (p *Index) GetIndexName() string {
  return p.IndexName
}

func (p *Index) GetIndexHandlerClass() string {
  return p.IndexHandlerClass
}

func (p *Index) GetDbName() string {
  return p.DbName
}

func (p *Index) GetOrigTableName() string {
  return p.OrigTableName
}

func (p *Index) GetCreateTime() int32 {
  return p.CreateTime
}

func (p *Index) GetLastAccessTime() int32 {
  return p.LastAccessTime
}

func (p *Index) GetIndexTableName() string {
  return p.IndexTableName
}
var Index_Sd_DEFAULT *StorageDescriptor
func (p *Index) GetSd() *StorageDescriptor {
  if !p.IsSetSd() {
    return Index_Sd_DEFAULT
  }
return p.Sd
}

func (p *Index) GetParameters() map[string]string {
  return p.Parameters
}

func (p *Index) GetDeferredRebuild() bool {
  return p.DeferredRebuild
}
func (p *Index) IsSetSd() bool {
  return p.Sd != nil
}

func (p *Index) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Index)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *Index)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexHandlerClass = v
}
  return nil
}

func (p *Index)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *Index)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OrigTableName = v
}
  return nil
}

func (p *Index)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *Index)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastAccessTime = v
}
  return nil
}

func (p *Index)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IndexTableName = v
}
  return nil
}

func (p *Index)  ReadField8(iprot thrift.TProtocol) error {
  p.Sd = &StorageDescriptor{}
  if err := p.Sd.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sd), err)
  }
  return nil
}

func (p *Index)  ReadField9(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Parameters =  tMap
  for i := 0; i < size; i ++ {
var _key27 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key27 = v
}
var _val28 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val28 = v
}
    p.Parameters[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Index)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DeferredRebuild = v
}
  return nil
}

func (p *Index) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Index"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Index) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("indexName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:indexName: ", p), err) }
  if err := oprot.WriteString(string(p.IndexName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.indexName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:indexName: ", p), err) }
  return err
}

func (p *Index) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("indexHandlerClass", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:indexHandlerClass: ", p), err) }
  if err := oprot.WriteString(string(p.IndexHandlerClass)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.indexHandlerClass (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:indexHandlerClass: ", p), err) }
  return err
}

func (p *Index) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dbName: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dbName: ", p), err) }
  return err
}

func (p *Index) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("origTableName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:origTableName: ", p), err) }
  if err := oprot.WriteString(string(p.OrigTableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.origTableName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:origTableName: ", p), err) }
  return err
}

func (p *Index) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createTime: ", p), err) }
  if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createTime: ", p), err) }
  return err
}

func (p *Index) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastAccessTime: ", p), err) }
  if err := oprot.WriteI32(int32(p.LastAccessTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastAccessTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastAccessTime: ", p), err) }
  return err
}

func (p *Index) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("indexTableName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:indexTableName: ", p), err) }
  if err := oprot.WriteString(string(p.IndexTableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.indexTableName (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:indexTableName: ", p), err) }
  return err
}

func (p *Index) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sd", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sd: ", p), err) }
  if err := p.Sd.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sd), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sd: ", p), err) }
  return err
}

func (p *Index) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:parameters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parameters {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:parameters: ", p), err) }
  return err
}

func (p *Index) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deferredRebuild", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:deferredRebuild: ", p), err) }
  if err := oprot.WriteBool(bool(p.DeferredRebuild)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deferredRebuild (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:deferredRebuild: ", p), err) }
  return err
}

func (p *Index) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Index(%+v)", *p)
}

// Attributes:
//  - NumTrues
//  - NumFalses
//  - NumNulls
type BooleanColumnStatsData struct {
  NumTrues int64 `thrift:"numTrues,1,required" db:"numTrues" json:"numTrues"`
  NumFalses int64 `thrift:"numFalses,2,required" db:"numFalses" json:"numFalses"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
}

func NewBooleanColumnStatsData() *BooleanColumnStatsData {
  return &BooleanColumnStatsData{}
}


func (p *BooleanColumnStatsData) GetNumTrues() int64 {
  return p.NumTrues
}

func (p *BooleanColumnStatsData) GetNumFalses() int64 {
  return p.NumFalses
}

func (p *BooleanColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}
func (p *BooleanColumnStatsData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNumTrues bool = false;
  var issetNumFalses bool = false;
  var issetNumNulls bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNumTrues = true
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNumFalses = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNumNulls = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNumTrues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumTrues is not set"));
  }
  if !issetNumFalses{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumFalses is not set"));
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  return nil
}

func (p *BooleanColumnStatsData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumTrues = v
}
  return nil
}

func (p *BooleanColumnStatsData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumFalses = v
}
  return nil
}

func (p *BooleanColumnStatsData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *BooleanColumnStatsData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BooleanColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BooleanColumnStatsData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numTrues", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numTrues: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumTrues)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numTrues (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numTrues: ", p), err) }
  return err
}

func (p *BooleanColumnStatsData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numFalses", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numFalses: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumFalses)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numFalses (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numFalses: ", p), err) }
  return err
}

func (p *BooleanColumnStatsData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *BooleanColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BooleanColumnStatsData(%+v)", *p)
}

// Attributes:
//  - LowValue
//  - HighValue
//  - NumNulls
//  - NumDVs
type DoubleColumnStatsData struct {
  LowValue float64 `thrift:"lowValue,1,required" db:"lowValue" json:"lowValue"`
  HighValue float64 `thrift:"highValue,2,required" db:"highValue" json:"highValue"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
  NumDVs int64 `thrift:"numDVs,4,required" db:"numDVs" json:"numDVs"`
}

func NewDoubleColumnStatsData() *DoubleColumnStatsData {
  return &DoubleColumnStatsData{}
}


func (p *DoubleColumnStatsData) GetLowValue() float64 {
  return p.LowValue
}

func (p *DoubleColumnStatsData) GetHighValue() float64 {
  return p.HighValue
}

func (p *DoubleColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}

func (p *DoubleColumnStatsData) GetNumDVs() int64 {
  return p.NumDVs
}
func (p *DoubleColumnStatsData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetLowValue bool = false;
  var issetHighValue bool = false;
  var issetNumNulls bool = false;
  var issetNumDVs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLowValue = true
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetHighValue = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNumNulls = true
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNumDVs = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetLowValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LowValue is not set"));
  }
  if !issetHighValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HighValue is not set"));
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  if !issetNumDVs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumDVs is not set"));
  }
  return nil
}

func (p *DoubleColumnStatsData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LowValue = v
}
  return nil
}

func (p *DoubleColumnStatsData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HighValue = v
}
  return nil
}

func (p *DoubleColumnStatsData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *DoubleColumnStatsData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumDVs = v
}
  return nil
}

func (p *DoubleColumnStatsData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DoubleColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DoubleColumnStatsData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lowValue", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lowValue: ", p), err) }
  if err := oprot.WriteDouble(float64(p.LowValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lowValue (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lowValue: ", p), err) }
  return err
}

func (p *DoubleColumnStatsData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("highValue", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:highValue: ", p), err) }
  if err := oprot.WriteDouble(float64(p.HighValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.highValue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:highValue: ", p), err) }
  return err
}

func (p *DoubleColumnStatsData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *DoubleColumnStatsData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numDVs", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numDVs: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumDVs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numDVs (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numDVs: ", p), err) }
  return err
}

func (p *DoubleColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DoubleColumnStatsData(%+v)", *p)
}

// Attributes:
//  - LowValue
//  - HighValue
//  - NumNulls
//  - NumDVs
type LongColumnStatsData struct {
  LowValue int64 `thrift:"lowValue,1,required" db:"lowValue" json:"lowValue"`
  HighValue int64 `thrift:"highValue,2,required" db:"highValue" json:"highValue"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
  NumDVs int64 `thrift:"numDVs,4,required" db:"numDVs" json:"numDVs"`
}

func NewLongColumnStatsData() *LongColumnStatsData {
  return &LongColumnStatsData{}
}


func (p *LongColumnStatsData) GetLowValue() int64 {
  return p.LowValue
}

func (p *LongColumnStatsData) GetHighValue() int64 {
  return p.HighValue
}

func (p *LongColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}

func (p *LongColumnStatsData) GetNumDVs() int64 {
  return p.NumDVs
}
func (p *LongColumnStatsData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetLowValue bool = false;
  var issetHighValue bool = false;
  var issetNumNulls bool = false;
  var issetNumDVs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetLowValue = true
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetHighValue = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNumNulls = true
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNumDVs = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetLowValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LowValue is not set"));
  }
  if !issetHighValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HighValue is not set"));
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  if !issetNumDVs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumDVs is not set"));
  }
  return nil
}

func (p *LongColumnStatsData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LowValue = v
}
  return nil
}

func (p *LongColumnStatsData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HighValue = v
}
  return nil
}

func (p *LongColumnStatsData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *LongColumnStatsData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumDVs = v
}
  return nil
}

func (p *LongColumnStatsData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LongColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LongColumnStatsData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lowValue", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lowValue: ", p), err) }
  if err := oprot.WriteI64(int64(p.LowValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lowValue (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lowValue: ", p), err) }
  return err
}

func (p *LongColumnStatsData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("highValue", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:highValue: ", p), err) }
  if err := oprot.WriteI64(int64(p.HighValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.highValue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:highValue: ", p), err) }
  return err
}

func (p *LongColumnStatsData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *LongColumnStatsData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numDVs", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numDVs: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumDVs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numDVs (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numDVs: ", p), err) }
  return err
}

func (p *LongColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LongColumnStatsData(%+v)", *p)
}

// Attributes:
//  - MaxColLen
//  - AvgColLen
//  - NumNulls
//  - NumDVs
type StringColumnStatsData struct {
  MaxColLen int64 `thrift:"maxColLen,1,required" db:"maxColLen" json:"maxColLen"`
  AvgColLen float64 `thrift:"avgColLen,2,required" db:"avgColLen" json:"avgColLen"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
  NumDVs int64 `thrift:"numDVs,4,required" db:"numDVs" json:"numDVs"`
}

func NewStringColumnStatsData() *StringColumnStatsData {
  return &StringColumnStatsData{}
}


func (p *StringColumnStatsData) GetMaxColLen() int64 {
  return p.MaxColLen
}

func (p *StringColumnStatsData) GetAvgColLen() float64 {
  return p.AvgColLen
}

func (p *StringColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}

func (p *StringColumnStatsData) GetNumDVs() int64 {
  return p.NumDVs
}
func (p *StringColumnStatsData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMaxColLen bool = false;
  var issetAvgColLen bool = false;
  var issetNumNulls bool = false;
  var issetNumDVs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMaxColLen = true
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAvgColLen = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNumNulls = true
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNumDVs = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMaxColLen{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxColLen is not set"));
  }
  if !issetAvgColLen{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AvgColLen is not set"));
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  if !issetNumDVs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumDVs is not set"));
  }
  return nil
}

func (p *StringColumnStatsData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MaxColLen = v
}
  return nil
}

func (p *StringColumnStatsData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AvgColLen = v
}
  return nil
}

func (p *StringColumnStatsData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *StringColumnStatsData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumDVs = v
}
  return nil
}

func (p *StringColumnStatsData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StringColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StringColumnStatsData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxColLen", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maxColLen: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxColLen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxColLen (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maxColLen: ", p), err) }
  return err
}

func (p *StringColumnStatsData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avgColLen", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:avgColLen: ", p), err) }
  if err := oprot.WriteDouble(float64(p.AvgColLen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avgColLen (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:avgColLen: ", p), err) }
  return err
}

func (p *StringColumnStatsData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *StringColumnStatsData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numDVs", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numDVs: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumDVs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numDVs (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numDVs: ", p), err) }
  return err
}

func (p *StringColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StringColumnStatsData(%+v)", *p)
}

// Attributes:
//  - MaxColLen
//  - AvgColLen
//  - NumNulls
type BinaryColumnStatsData struct {
  MaxColLen int64 `thrift:"maxColLen,1,required" db:"maxColLen" json:"maxColLen"`
  AvgColLen float64 `thrift:"avgColLen,2,required" db:"avgColLen" json:"avgColLen"`
  NumNulls int64 `thrift:"numNulls,3,required" db:"numNulls" json:"numNulls"`
}

func NewBinaryColumnStatsData() *BinaryColumnStatsData {
  return &BinaryColumnStatsData{}
}


func (p *BinaryColumnStatsData) GetMaxColLen() int64 {
  return p.MaxColLen
}

func (p *BinaryColumnStatsData) GetAvgColLen() float64 {
  return p.AvgColLen
}

func (p *BinaryColumnStatsData) GetNumNulls() int64 {
  return p.NumNulls
}
func (p *BinaryColumnStatsData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMaxColLen bool = false;
  var issetAvgColLen bool = false;
  var issetNumNulls bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMaxColLen = true
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetAvgColLen = true
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetNumNulls = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMaxColLen{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxColLen is not set"));
  }
  if !issetAvgColLen{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AvgColLen is not set"));
  }
  if !issetNumNulls{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"));
  }
  return nil
}

func (p *BinaryColumnStatsData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MaxColLen = v
}
  return nil
}

func (p *BinaryColumnStatsData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AvgColLen = v
}
  return nil
}

func (p *BinaryColumnStatsData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumNulls = v
}
  return nil
}

func (p *BinaryColumnStatsData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BinaryColumnStatsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BinaryColumnStatsData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxColLen", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maxColLen: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxColLen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxColLen (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maxColLen: ", p), err) }
  return err
}

func (p *BinaryColumnStatsData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avgColLen", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:avgColLen: ", p), err) }
  if err := oprot.WriteDouble(float64(p.AvgColLen)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avgColLen (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:avgColLen: ", p), err) }
  return err
}

func (p *BinaryColumnStatsData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numNulls", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numNulls: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumNulls)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numNulls (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numNulls: ", p), err) }
  return err
}

func (p *BinaryColumnStatsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BinaryColumnStatsData(%+v)", *p)
}

// Attributes:
//  - BooleanStats
//  - LongStats
//  - DoubleStats
//  - StringStats
//  - BinaryStats
type ColumnStatisticsData struct {
  BooleanStats *BooleanColumnStatsData `thrift:"booleanStats,1" db:"booleanStats" json:"booleanStats,omitempty"`
  LongStats *LongColumnStatsData `thrift:"longStats,2" db:"longStats" json:"longStats,omitempty"`
  DoubleStats *DoubleColumnStatsData `thrift:"doubleStats,3" db:"doubleStats" json:"doubleStats,omitempty"`
  StringStats *StringColumnStatsData `thrift:"stringStats,4" db:"stringStats" json:"stringStats,omitempty"`
  BinaryStats *BinaryColumnStatsData `thrift:"binaryStats,5" db:"binaryStats" json:"binaryStats,omitempty"`
}

func NewColumnStatisticsData() *ColumnStatisticsData {
  return &ColumnStatisticsData{}
}

var ColumnStatisticsData_BooleanStats_DEFAULT *BooleanColumnStatsData
func (p *ColumnStatisticsData) GetBooleanStats() *BooleanColumnStatsData {
  if !p.IsSetBooleanStats() {
    return ColumnStatisticsData_BooleanStats_DEFAULT
  }
return p.BooleanStats
}
var ColumnStatisticsData_LongStats_DEFAULT *LongColumnStatsData
func (p *ColumnStatisticsData) GetLongStats() *LongColumnStatsData {
  if !p.IsSetLongStats() {
    return ColumnStatisticsData_LongStats_DEFAULT
  }
return p.LongStats
}
var ColumnStatisticsData_DoubleStats_DEFAULT *DoubleColumnStatsData
func (p *ColumnStatisticsData) GetDoubleStats() *DoubleColumnStatsData {
  if !p.IsSetDoubleStats() {
    return ColumnStatisticsData_DoubleStats_DEFAULT
  }
return p.DoubleStats
}
var ColumnStatisticsData_StringStats_DEFAULT *StringColumnStatsData
func (p *ColumnStatisticsData) GetStringStats() *StringColumnStatsData {
  if !p.IsSetStringStats() {
    return ColumnStatisticsData_StringStats_DEFAULT
  }
return p.StringStats
}
var ColumnStatisticsData_BinaryStats_DEFAULT *BinaryColumnStatsData
func (p *ColumnStatisticsData) GetBinaryStats() *BinaryColumnStatsData {
  if !p.IsSetBinaryStats() {
    return ColumnStatisticsData_BinaryStats_DEFAULT
  }
return p.BinaryStats
}
func (p *ColumnStatisticsData) CountSetFieldsColumnStatisticsData() int {
  count := 0
  if (p.IsSetBooleanStats()) {
    count++
  }
  if (p.IsSetLongStats()) {
    count++
  }
  if (p.IsSetDoubleStats()) {
    count++
  }
  if (p.IsSetStringStats()) {
    count++
  }
  if (p.IsSetBinaryStats()) {
    count++
  }
  return count

}

func (p *ColumnStatisticsData) IsSetBooleanStats() bool {
  return p.BooleanStats != nil
}

func (p *ColumnStatisticsData) IsSetLongStats() bool {
  return p.LongStats != nil
}

func (p *ColumnStatisticsData) IsSetDoubleStats() bool {
  return p.DoubleStats != nil
}

func (p *ColumnStatisticsData) IsSetStringStats() bool {
  return p.StringStats != nil
}

func (p *ColumnStatisticsData) IsSetBinaryStats() bool {
  return p.BinaryStats != nil
}

func (p *ColumnStatisticsData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField1(iprot thrift.TProtocol) error {
  p.BooleanStats = &BooleanColumnStatsData{}
  if err := p.BooleanStats.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BooleanStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField2(iprot thrift.TProtocol) error {
  p.LongStats = &LongColumnStatsData{}
  if err := p.LongStats.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LongStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField3(iprot thrift.TProtocol) error {
  p.DoubleStats = &DoubleColumnStatsData{}
  if err := p.DoubleStats.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DoubleStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField4(iprot thrift.TProtocol) error {
  p.StringStats = &StringColumnStatsData{}
  if err := p.StringStats.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StringStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData)  ReadField5(iprot thrift.TProtocol) error {
  p.BinaryStats = &BinaryColumnStatsData{}
  if err := p.BinaryStats.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BinaryStats), err)
  }
  return nil
}

func (p *ColumnStatisticsData) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsColumnStatisticsData(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("ColumnStatisticsData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnStatisticsData) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBooleanStats() {
    if err := oprot.WriteFieldBegin("booleanStats", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:booleanStats: ", p), err) }
    if err := p.BooleanStats.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BooleanStats), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:booleanStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLongStats() {
    if err := oprot.WriteFieldBegin("longStats", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:longStats: ", p), err) }
    if err := p.LongStats.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LongStats), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:longStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubleStats() {
    if err := oprot.WriteFieldBegin("doubleStats", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:doubleStats: ", p), err) }
    if err := p.DoubleStats.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DoubleStats), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:doubleStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetStringStats() {
    if err := oprot.WriteFieldBegin("stringStats", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stringStats: ", p), err) }
    if err := p.StringStats.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StringStats), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stringStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetBinaryStats() {
    if err := oprot.WriteFieldBegin("binaryStats", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:binaryStats: ", p), err) }
    if err := p.BinaryStats.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BinaryStats), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:binaryStats: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnStatisticsData(%+v)", *p)
}

// Attributes:
//  - ColName
//  - ColType
//  - StatsData
type ColumnStatisticsObj struct {
  ColName string `thrift:"colName,1,required" db:"colName" json:"colName"`
  ColType string `thrift:"colType,2,required" db:"colType" json:"colType"`
  StatsData *ColumnStatisticsData `thrift:"statsData,3,required" db:"statsData" json:"statsData"`
}

func NewColumnStatisticsObj() *ColumnStatisticsObj {
  return &ColumnStatisticsObj{}
}


func (p *ColumnStatisticsObj) GetColName() string {
  return p.ColName
}

func (p *ColumnStatisticsObj) GetColType() string {
  return p.ColType
}
var ColumnStatisticsObj_StatsData_DEFAULT *ColumnStatisticsData
func (p *ColumnStatisticsObj) GetStatsData() *ColumnStatisticsData {
  if !p.IsSetStatsData() {
    return ColumnStatisticsObj_StatsData_DEFAULT
  }
return p.StatsData
}
func (p *ColumnStatisticsObj) IsSetStatsData() bool {
  return p.StatsData != nil
}

func (p *ColumnStatisticsObj) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetColName bool = false;
  var issetColType bool = false;
  var issetStatsData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetColName = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetColType = true
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatsData = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetColName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ColName is not set"));
  }
  if !issetColType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ColType is not set"));
  }
  if !issetStatsData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StatsData is not set"));
  }
  return nil
}

func (p *ColumnStatisticsObj)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *ColumnStatisticsObj)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ColType = v
}
  return nil
}

func (p *ColumnStatisticsObj)  ReadField3(iprot thrift.TProtocol) error {
  p.StatsData = &ColumnStatisticsData{}
  if err := p.StatsData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StatsData), err)
  }
  return nil
}

func (p *ColumnStatisticsObj) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ColumnStatisticsObj"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnStatisticsObj) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("colName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:colName: ", p), err) }
  if err := oprot.WriteString(string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.colName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:colName: ", p), err) }
  return err
}

func (p *ColumnStatisticsObj) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("colType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:colType: ", p), err) }
  if err := oprot.WriteString(string(p.ColType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.colType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:colType: ", p), err) }
  return err
}

func (p *ColumnStatisticsObj) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statsData", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:statsData: ", p), err) }
  if err := p.StatsData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StatsData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:statsData: ", p), err) }
  return err
}

func (p *ColumnStatisticsObj) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnStatisticsObj(%+v)", *p)
}

// Attributes:
//  - IsTblLevel
//  - DbName
//  - TableName
//  - PartName
//  - LastAnalyzed
type ColumnStatisticsDesc struct {
  IsTblLevel bool `thrift:"isTblLevel,1,required" db:"isTblLevel" json:"isTblLevel"`
  DbName string `thrift:"dbName,2,required" db:"dbName" json:"dbName"`
  TableName string `thrift:"tableName,3,required" db:"tableName" json:"tableName"`
  PartName *string `thrift:"partName,4" db:"partName" json:"partName,omitempty"`
  LastAnalyzed *int64 `thrift:"lastAnalyzed,5" db:"lastAnalyzed" json:"lastAnalyzed,omitempty"`
}

func NewColumnStatisticsDesc() *ColumnStatisticsDesc {
  return &ColumnStatisticsDesc{}
}


func (p *ColumnStatisticsDesc) GetIsTblLevel() bool {
  return p.IsTblLevel
}

func (p *ColumnStatisticsDesc) GetDbName() string {
  return p.DbName
}

func (p *ColumnStatisticsDesc) GetTableName() string {
  return p.TableName
}
var ColumnStatisticsDesc_PartName_DEFAULT string
func (p *ColumnStatisticsDesc) GetPartName() string {
  if !p.IsSetPartName() {
    return ColumnStatisticsDesc_PartName_DEFAULT
  }
return *p.PartName
}
var ColumnStatisticsDesc_LastAnalyzed_DEFAULT int64
func (p *ColumnStatisticsDesc) GetLastAnalyzed() int64 {
  if !p.IsSetLastAnalyzed() {
    return ColumnStatisticsDesc_LastAnalyzed_DEFAULT
  }
return *p.LastAnalyzed
}
func (p *ColumnStatisticsDesc) IsSetPartName() bool {
  return p.PartName != nil
}

func (p *ColumnStatisticsDesc) IsSetLastAnalyzed() bool {
  return p.LastAnalyzed != nil
}

func (p *ColumnStatisticsDesc) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIsTblLevel bool = false;
  var issetDbName bool = false;
  var issetTableName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetIsTblLevel = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetDbName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTableName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIsTblLevel{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsTblLevel is not set"));
  }
  if !issetDbName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DbName is not set"));
  }
  if !issetTableName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TableName is not set"));
  }
  return nil
}

func (p *ColumnStatisticsDesc)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsTblLevel = v
}
  return nil
}

func (p *ColumnStatisticsDesc)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ColumnStatisticsDesc)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *ColumnStatisticsDesc)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PartName = &v
}
  return nil
}

func (p *ColumnStatisticsDesc)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastAnalyzed = &v
}
  return nil
}

func (p *ColumnStatisticsDesc) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ColumnStatisticsDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnStatisticsDesc) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isTblLevel", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:isTblLevel: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsTblLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isTblLevel (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:isTblLevel: ", p), err) }
  return err
}

func (p *ColumnStatisticsDesc) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbName: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbName: ", p), err) }
  return err
}

func (p *ColumnStatisticsDesc) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tableName: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tableName: ", p), err) }
  return err
}

func (p *ColumnStatisticsDesc) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPartName() {
    if err := oprot.WriteFieldBegin("partName", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partName: ", p), err) }
    if err := oprot.WriteString(string(*p.PartName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partName (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partName: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsDesc) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastAnalyzed() {
    if err := oprot.WriteFieldBegin("lastAnalyzed", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastAnalyzed: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LastAnalyzed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastAnalyzed (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastAnalyzed: ", p), err) }
  }
  return err
}

func (p *ColumnStatisticsDesc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnStatisticsDesc(%+v)", *p)
}

// Attributes:
//  - StatsDesc
//  - StatsObj
type ColumnStatistics struct {
  StatsDesc *ColumnStatisticsDesc `thrift:"statsDesc,1,required" db:"statsDesc" json:"statsDesc"`
  StatsObj []*ColumnStatisticsObj `thrift:"statsObj,2,required" db:"statsObj" json:"statsObj"`
}

func NewColumnStatistics() *ColumnStatistics {
  return &ColumnStatistics{}
}

var ColumnStatistics_StatsDesc_DEFAULT *ColumnStatisticsDesc
func (p *ColumnStatistics) GetStatsDesc() *ColumnStatisticsDesc {
  if !p.IsSetStatsDesc() {
    return ColumnStatistics_StatsDesc_DEFAULT
  }
return p.StatsDesc
}

func (p *ColumnStatistics) GetStatsObj() []*ColumnStatisticsObj {
  return p.StatsObj
}
func (p *ColumnStatistics) IsSetStatsDesc() bool {
  return p.StatsDesc != nil
}

func (p *ColumnStatistics) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatsDesc bool = false;
  var issetStatsObj bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatsDesc = true
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetStatsObj = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatsDesc{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StatsDesc is not set"));
  }
  if !issetStatsObj{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StatsObj is not set"));
  }
  return nil
}

func (p *ColumnStatistics)  ReadField1(iprot thrift.TProtocol) error {
  p.StatsDesc = &ColumnStatisticsDesc{}
  if err := p.StatsDesc.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StatsDesc), err)
  }
  return nil
}

func (p *ColumnStatistics)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnStatisticsObj, 0, size)
  p.StatsObj =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := &ColumnStatisticsObj{}
    if err := _elem29.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.StatsObj = append(p.StatsObj, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ColumnStatistics) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ColumnStatistics"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnStatistics) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statsDesc", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:statsDesc: ", p), err) }
  if err := p.StatsDesc.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StatsDesc), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:statsDesc: ", p), err) }
  return err
}

func (p *ColumnStatistics) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statsObj", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:statsObj: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StatsObj)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StatsObj {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:statsObj: ", p), err) }
  return err
}

func (p *ColumnStatistics) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnStatistics(%+v)", *p)
}

// Attributes:
//  - FieldSchemas
//  - Properties
type Schema struct {
  FieldSchemas []*FieldSchema `thrift:"fieldSchemas,1" db:"fieldSchemas" json:"fieldSchemas"`
  Properties map[string]string `thrift:"properties,2" db:"properties" json:"properties"`
}

func NewSchema() *Schema {
  return &Schema{}
}


func (p *Schema) GetFieldSchemas() []*FieldSchema {
  return p.FieldSchemas
}

func (p *Schema) GetProperties() map[string]string {
  return p.Properties
}
func (p *Schema) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Schema)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.FieldSchemas =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := &FieldSchema{}
    if err := _elem30.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.FieldSchemas = append(p.FieldSchemas, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Schema)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Properties =  tMap
  for i := 0; i < size; i ++ {
var _key31 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key31 = v
}
var _val32 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val32 = v
}
    p.Properties[_key31] = _val32
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Schema) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Schema"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Schema) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fieldSchemas", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fieldSchemas: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldSchemas)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FieldSchemas {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fieldSchemas: ", p), err) }
  return err
}

func (p *Schema) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("properties", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Properties {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err) }
  return err
}

func (p *Schema) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Schema(%+v)", *p)
}

// Attributes:
//  - Properties
type EnvironmentContext struct {
  Properties map[string]string `thrift:"properties,1" db:"properties" json:"properties"`
}

func NewEnvironmentContext() *EnvironmentContext {
  return &EnvironmentContext{}
}


func (p *EnvironmentContext) GetProperties() map[string]string {
  return p.Properties
}
func (p *EnvironmentContext) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EnvironmentContext)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Properties =  tMap
  for i := 0; i < size; i ++ {
var _key33 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key33 = v
}
var _val34 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val34 = v
}
    p.Properties[_key33] = _val34
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *EnvironmentContext) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EnvironmentContext"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EnvironmentContext) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("properties", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:properties: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Properties {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:properties: ", p), err) }
  return err
}

func (p *EnvironmentContext) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnvironmentContext(%+v)", *p)
}

// Attributes:
//  - Message
type MetaException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewMetaException() *MetaException {
  return &MetaException{}
}


func (p *MetaException) GetMessage() string {
  return p.Message
}
func (p *MetaException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *MetaException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MetaException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *MetaException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaException(%+v)", *p)
}

func (p *MetaException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type UnknownTableException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewUnknownTableException() *UnknownTableException {
  return &UnknownTableException{}
}


func (p *UnknownTableException) GetMessage() string {
  return p.Message
}
func (p *UnknownTableException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnknownTableException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *UnknownTableException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnknownTableException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnknownTableException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *UnknownTableException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnknownTableException(%+v)", *p)
}

func (p *UnknownTableException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type UnknownDBException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewUnknownDBException() *UnknownDBException {
  return &UnknownDBException{}
}


func (p *UnknownDBException) GetMessage() string {
  return p.Message
}
func (p *UnknownDBException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnknownDBException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *UnknownDBException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnknownDBException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnknownDBException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *UnknownDBException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnknownDBException(%+v)", *p)
}

func (p *UnknownDBException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type AlreadyExistsException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewAlreadyExistsException() *AlreadyExistsException {
  return &AlreadyExistsException{}
}


func (p *AlreadyExistsException) GetMessage() string {
  return p.Message
}
func (p *AlreadyExistsException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlreadyExistsException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *AlreadyExistsException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AlreadyExistsException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlreadyExistsException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *AlreadyExistsException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlreadyExistsException(%+v)", *p)
}

func (p *AlreadyExistsException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type InvalidPartitionException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewInvalidPartitionException() *InvalidPartitionException {
  return &InvalidPartitionException{}
}


func (p *InvalidPartitionException) GetMessage() string {
  return p.Message
}
func (p *InvalidPartitionException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidPartitionException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidPartitionException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidPartitionException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidPartitionException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidPartitionException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidPartitionException(%+v)", *p)
}

func (p *InvalidPartitionException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type UnknownPartitionException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewUnknownPartitionException() *UnknownPartitionException {
  return &UnknownPartitionException{}
}


func (p *UnknownPartitionException) GetMessage() string {
  return p.Message
}
func (p *UnknownPartitionException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnknownPartitionException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *UnknownPartitionException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnknownPartitionException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnknownPartitionException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *UnknownPartitionException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnknownPartitionException(%+v)", *p)
}

func (p *UnknownPartitionException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type InvalidObjectException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewInvalidObjectException() *InvalidObjectException {
  return &InvalidObjectException{}
}


func (p *InvalidObjectException) GetMessage() string {
  return p.Message
}
func (p *InvalidObjectException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidObjectException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidObjectException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidObjectException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidObjectException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidObjectException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidObjectException(%+v)", *p)
}

func (p *InvalidObjectException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type NoSuchObjectException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewNoSuchObjectException() *NoSuchObjectException {
  return &NoSuchObjectException{}
}


func (p *NoSuchObjectException) GetMessage() string {
  return p.Message
}
func (p *NoSuchObjectException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NoSuchObjectException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *NoSuchObjectException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NoSuchObjectException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NoSuchObjectException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *NoSuchObjectException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NoSuchObjectException(%+v)", *p)
}

func (p *NoSuchObjectException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type IndexAlreadyExistsException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewIndexAlreadyExistsException() *IndexAlreadyExistsException {
  return &IndexAlreadyExistsException{}
}


func (p *IndexAlreadyExistsException) GetMessage() string {
  return p.Message
}
func (p *IndexAlreadyExistsException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexAlreadyExistsException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *IndexAlreadyExistsException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IndexAlreadyExistsException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexAlreadyExistsException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *IndexAlreadyExistsException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexAlreadyExistsException(%+v)", *p)
}

func (p *IndexAlreadyExistsException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type InvalidOperationException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewInvalidOperationException() *InvalidOperationException {
  return &InvalidOperationException{}
}


func (p *InvalidOperationException) GetMessage() string {
  return p.Message
}
func (p *InvalidOperationException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidOperationException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidOperationException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidOperationException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidOperationException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidOperationException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidOperationException(%+v)", *p)
}

func (p *InvalidOperationException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type ConfigValSecurityException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewConfigValSecurityException() *ConfigValSecurityException {
  return &ConfigValSecurityException{}
}


func (p *ConfigValSecurityException) GetMessage() string {
  return p.Message
}
func (p *ConfigValSecurityException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigValSecurityException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ConfigValSecurityException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConfigValSecurityException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigValSecurityException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *ConfigValSecurityException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigValSecurityException(%+v)", *p)
}

func (p *ConfigValSecurityException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type InvalidInputException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewInvalidInputException() *InvalidInputException {
  return &InvalidInputException{}
}


func (p *InvalidInputException) GetMessage() string {
  return p.Message
}
func (p *InvalidInputException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidInputException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidInputException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidInputException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidInputException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidInputException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidInputException(%+v)", *p)
}

func (p *InvalidInputException) Error() string {
  return p.String()
}

type ThriftHiveMetastore interface {
  fb303.FacebookService
  //This interface is live.

  // Parameters:
  //  - Database
  CreateDatabase(ctx context.Context, database *Database) (err error)
  // Parameters:
  //  - Name
  GetDatabase(ctx context.Context, name string) (r *Database, err error)
  // Parameters:
  //  - Name
  //  - DeleteData
  //  - Cascade
  DropDatabase(ctx context.Context, name string, deleteData bool, cascade bool) (err error)
  // Parameters:
  //  - Pattern
  GetDatabases(ctx context.Context, pattern string) (r []string, err error)
  GetAllDatabases(ctx context.Context) (r []string, err error)
  // Parameters:
  //  - Dbname
  //  - Db
  AlterDatabase(ctx context.Context, dbname string, db *Database) (err error)
  // Parameters:
  //  - Name
  GetType(ctx context.Context, name string) (r *Type, err error)
  // Parameters:
  //  - Type
  CreateType(ctx context.Context, type_a1 *Type) (r bool, err error)
  // Parameters:
  //  - Type
  DropType(ctx context.Context, type_a1 string) (r bool, err error)
  // Parameters:
  //  - Name
  GetTypeAll(ctx context.Context, name string) (r map[string]*Type, err error)
  // Parameters:
  //  - DbName
  //  - TableName
  GetFields(ctx context.Context, db_name string, table_name string) (r []*FieldSchema, err error)
  // Parameters:
  //  - DbName
  //  - TableName
  GetSchema(ctx context.Context, db_name string, table_name string) (r []*FieldSchema, err error)
  // Parameters:
  //  - Tbl
  CreateTable(ctx context.Context, tbl *Table) (err error)
  // Parameters:
  //  - Tbl
  //  - EnvironmentContext
  CreateTableWithEnvironmentContext(ctx context.Context, tbl *Table, environment_context *EnvironmentContext) (err error)
  // Parameters:
  //  - Dbname
  //  - Name
  //  - DeleteData
  DropTable(ctx context.Context, dbname string, name string, deleteData bool) (err error)
  // Parameters:
  //  - DbName
  //  - Pattern
  GetTables(ctx context.Context, db_name string, pattern string) (r []string, err error)
  // Parameters:
  //  - DbName
  GetAllTables(ctx context.Context, db_name string) (r []string, err error)
  // Parameters:
  //  - Dbname
  //  - TblName
  GetTable(ctx context.Context, dbname string, tbl_name string) (r *Table, err error)
  // Parameters:
  //  - Dbname
  //  - TblNames
  GetTableObjectsByName(ctx context.Context, dbname string, tbl_names []string) (r []*Table, err error)
  // Parameters:
  //  - Dbname
  //  - Filter
  //  - MaxTables
  GetTableNamesByFilter(ctx context.Context, dbname string, filter string, max_tables int16) (r []string, err error)
  // Parameters:
  //  - Dbname
  //  - TblName
  //  - NewTbl_
  AlterTable(ctx context.Context, dbname string, tbl_name string, new_tbl *Table) (err error)
  // Parameters:
  //  - Dbname
  //  - TblName
  //  - NewTbl_
  //  - EnvironmentContext
  AlterTableWithEnvironmentContext(ctx context.Context, dbname string, tbl_name string, new_tbl *Table, environment_context *EnvironmentContext) (err error)
  // Parameters:
  //  - NewPart_
  AddPartition(ctx context.Context, new_part *Partition) (r *Partition, err error)
  // Parameters:
  //  - NewPart_
  //  - EnvironmentContext
  AddPartitionWithEnvironmentContext(ctx context.Context, new_part *Partition, environment_context *EnvironmentContext) (r *Partition, err error)
  // Parameters:
  //  - NewParts_
  AddPartitions(ctx context.Context, new_parts []*Partition) (r int32, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  AppendPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string) (r *Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  AppendPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string) (r *Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - DeleteData
  DropPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  //  - DeleteData
  DropPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string, deleteData bool) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  GetPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string) (r *Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - UserName
  //  - GroupNames
  GetPartitionWithAuth(ctx context.Context, db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  GetPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string) (r *Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - MaxParts
  GetPartitions(ctx context.Context, db_name string, tbl_name string, max_parts int16) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - MaxParts
  //  - UserName
  //  - GroupNames
  GetPartitionsWithAuth(ctx context.Context, db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - MaxParts
  GetPartitionNames(ctx context.Context, db_name string, tbl_name string, max_parts int16) (r []string, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - MaxParts
  GetPartitionsPs(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - MaxParts
  //  - UserName
  //  - GroupNames
  GetPartitionsPsWithAuth(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - MaxParts
  GetPartitionNamesPs(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - Filter
  //  - MaxParts
  GetPartitionsByFilter(ctx context.Context, db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - Names
  GetPartitionsByNames(ctx context.Context, db_name string, tbl_name string, names []string) (r []*Partition, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - NewPart_
  AlterPartition(ctx context.Context, db_name string, tbl_name string, new_part *Partition) (err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - NewParts_
  AlterPartitions(ctx context.Context, db_name string, tbl_name string, new_parts []*Partition) (err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - NewPart_
  //  - EnvironmentContext
  AlterPartitionWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, new_part *Partition, environment_context *EnvironmentContext) (err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - NewPart_
  RenamePartition(ctx context.Context, db_name string, tbl_name string, part_vals []string, new_part *Partition) (err error)
  // Parameters:
  //  - Name
  //  - DefaultValue
  GetConfigValue(ctx context.Context, name string, defaultValue string) (r string, err error)
  // Parameters:
  //  - PartName
  PartitionNameToVals(ctx context.Context, part_name string) (r []string, err error)
  // Parameters:
  //  - PartName
  PartitionNameToSpec(ctx context.Context, part_name string) (r map[string]string, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - EventType
  MarkPartitionForEvent(ctx context.Context, db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartVals
  //  - EventType
  IsPartitionMarkedForEvent(ctx context.Context, db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (r bool, err error)
  // Parameters:
  //  - NewIndex_
  //  - IndexTable
  AddIndex(ctx context.Context, new_index *Index, index_table *Table) (r *Index, err error)
  // Parameters:
  //  - Dbname
  //  - BaseTblName
  //  - IdxName
  //  - NewIdx_
  AlterIndex(ctx context.Context, dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - IndexName
  //  - DeleteData
  DropIndexByName(ctx context.Context, db_name string, tbl_name string, index_name string, deleteData bool) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - IndexName
  GetIndexByName(ctx context.Context, db_name string, tbl_name string, index_name string) (r *Index, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - MaxIndexes
  GetIndexes(ctx context.Context, db_name string, tbl_name string, max_indexes int16) (r []*Index, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - MaxIndexes
  GetIndexNames(ctx context.Context, db_name string, tbl_name string, max_indexes int16) (r []string, err error)
  // Parameters:
  //  - StatsObj
  UpdateTableColumnStatistics(ctx context.Context, stats_obj *ColumnStatistics) (r bool, err error)
  // Parameters:
  //  - StatsObj
  UpdatePartitionColumnStatistics(ctx context.Context, stats_obj *ColumnStatistics) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - ColName
  GetTableColumnStatistics(ctx context.Context, db_name string, tbl_name string, col_name string) (r *ColumnStatistics, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  //  - ColName
  GetPartitionColumnStatistics(ctx context.Context, db_name string, tbl_name string, part_name string, col_name string) (r *ColumnStatistics, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - PartName
  //  - ColName
  DeletePartitionColumnStatistics(ctx context.Context, db_name string, tbl_name string, part_name string, col_name string) (r bool, err error)
  // Parameters:
  //  - DbName
  //  - TblName
  //  - ColName
  DeleteTableColumnStatistics(ctx context.Context, db_name string, tbl_name string, col_name string) (r bool, err error)
  // Parameters:
  //  - Role
  CreateRole(ctx context.Context, role *Role) (r bool, err error)
  // Parameters:
  //  - RoleName
  DropRole(ctx context.Context, role_name string) (r bool, err error)
  GetRoleNames(ctx context.Context) (r []string, err error)
  // Parameters:
  //  - RoleName
  //  - PrincipalName
  //  - PrincipalType
  //  - Grantor
  //  - GrantorType
  //  - GrantOption
  GrantRole(ctx context.Context, role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, err error)
  // Parameters:
  //  - RoleName
  //  - PrincipalName
  //  - PrincipalType
  RevokeRole(ctx context.Context, role_name string, principal_name string, principal_type PrincipalType) (r bool, err error)
  // Parameters:
  //  - PrincipalName
  //  - PrincipalType
  ListRoles(ctx context.Context, principal_name string, principal_type PrincipalType) (r []*Role, err error)
  // Parameters:
  //  - HiveObject
  //  - UserName
  //  - GroupNames
  GetPrivilegeSet(ctx context.Context, hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, err error)
  // Parameters:
  //  - PrincipalName
  //  - PrincipalType
  //  - HiveObject
  ListPrivileges(ctx context.Context, principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, err error)
  // Parameters:
  //  - Privileges
  GrantPrivileges(ctx context.Context, privileges *PrivilegeBag) (r bool, err error)
  // Parameters:
  //  - Privileges
  RevokePrivileges(ctx context.Context, privileges *PrivilegeBag) (r bool, err error)
  // Parameters:
  //  - UserName
  //  - GroupNames
  SetUgi(ctx context.Context, user_name string, group_names []string) (r []string, err error)
  // Parameters:
  //  - TokenOwner
  //  - RenewerKerberosPrincipalName
  GetDelegationToken(ctx context.Context, token_owner string, renewer_kerberos_principal_name string) (r string, err error)
  // Parameters:
  //  - TokenStrForm
  RenewDelegationToken(ctx context.Context, token_str_form string) (r int64, err error)
  // Parameters:
  //  - TokenStrForm
  CancelDelegationToken(ctx context.Context, token_str_form string) (err error)
}

//This interface is live.
type ThriftHiveMetastoreClient struct {
  c thrift.TClient
  *fb303.FacebookServiceClient
}

// Deprecated: Use NewThriftHiveMetastore instead
func NewThriftHiveMetastoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftHiveMetastoreClient {
  return &ThriftHiveMetastoreClient{FacebookServiceClient: fb303.NewFacebookServiceClientFactory(t, f)}}

// Deprecated: Use NewThriftHiveMetastore instead
func NewThriftHiveMetastoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftHiveMetastoreClient {
  return &ThriftHiveMetastoreClient{FacebookServiceClient: fb303.NewFacebookServiceClientProtocol(t, iprot, oprot)}
}

func NewThriftHiveMetastoreClient(c thrift.TClient) *ThriftHiveMetastoreClient {
  return &ThriftHiveMetastoreClient{
    c: c,
    FacebookServiceClient: fb303.NewFacebookServiceClient(c),
  }
}

// Parameters:
//  - Database
func (p *ThriftHiveMetastoreClient) CreateDatabase(ctx context.Context, database *Database) (err error) {
  var _args35 ThriftHiveMetastoreCreateDatabaseArgs
  _args35.Database = database
  var _result36 ThriftHiveMetastoreCreateDatabaseResult
  if err = p.c.Call(ctx, "create_database", &_args35, &_result36); err != nil {
    return
  }
  switch {
  case _result36.O1!= nil:
    return _result36.O1
  case _result36.O2!= nil:
    return _result36.O2
  case _result36.O3!= nil:
    return _result36.O3
  }

  return nil
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetDatabase(ctx context.Context, name string) (r *Database, err error) {
  var _args37 ThriftHiveMetastoreGetDatabaseArgs
  _args37.Name = name
  var _result38 ThriftHiveMetastoreGetDatabaseResult
  if err = p.c.Call(ctx, "get_database", &_args37, &_result38); err != nil {
    return
  }
  switch {
  case _result38.O1!= nil:
    return r, _result38.O1
  case _result38.O2!= nil:
    return r, _result38.O2
  }

  return _result38.GetSuccess(), nil
}

// Parameters:
//  - Name
//  - DeleteData
//  - Cascade
func (p *ThriftHiveMetastoreClient) DropDatabase(ctx context.Context, name string, deleteData bool, cascade bool) (err error) {
  var _args39 ThriftHiveMetastoreDropDatabaseArgs
  _args39.Name = name
  _args39.DeleteData = deleteData
  _args39.Cascade = cascade
  var _result40 ThriftHiveMetastoreDropDatabaseResult
  if err = p.c.Call(ctx, "drop_database", &_args39, &_result40); err != nil {
    return
  }
  switch {
  case _result40.O1!= nil:
    return _result40.O1
  case _result40.O2!= nil:
    return _result40.O2
  case _result40.O3!= nil:
    return _result40.O3
  }

  return nil
}

// Parameters:
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetDatabases(ctx context.Context, pattern string) (r []string, err error) {
  var _args41 ThriftHiveMetastoreGetDatabasesArgs
  _args41.Pattern = pattern
  var _result42 ThriftHiveMetastoreGetDatabasesResult
  if err = p.c.Call(ctx, "get_databases", &_args41, &_result42); err != nil {
    return
  }
  switch {
  case _result42.O1!= nil:
    return r, _result42.O1
  }

  return _result42.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) GetAllDatabases(ctx context.Context) (r []string, err error) {
  var _args43 ThriftHiveMetastoreGetAllDatabasesArgs
  var _result44 ThriftHiveMetastoreGetAllDatabasesResult
  if err = p.c.Call(ctx, "get_all_databases", &_args43, &_result44); err != nil {
    return
  }
  switch {
  case _result44.O1!= nil:
    return r, _result44.O1
  }

  return _result44.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - Db
func (p *ThriftHiveMetastoreClient) AlterDatabase(ctx context.Context, dbname string, db *Database) (err error) {
  var _args45 ThriftHiveMetastoreAlterDatabaseArgs
  _args45.Dbname = dbname
  _args45.Db = db
  var _result46 ThriftHiveMetastoreAlterDatabaseResult
  if err = p.c.Call(ctx, "alter_database", &_args45, &_result46); err != nil {
    return
  }
  switch {
  case _result46.O1!= nil:
    return _result46.O1
  case _result46.O2!= nil:
    return _result46.O2
  }

  return nil
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetType(ctx context.Context, name string) (r *Type, err error) {
  var _args47 ThriftHiveMetastoreGetTypeArgs
  _args47.Name = name
  var _result48 ThriftHiveMetastoreGetTypeResult
  if err = p.c.Call(ctx, "get_type", &_args47, &_result48); err != nil {
    return
  }
  switch {
  case _result48.O1!= nil:
    return r, _result48.O1
  case _result48.O2!= nil:
    return r, _result48.O2
  }

  return _result48.GetSuccess(), nil
}

// Parameters:
//  - Type
func (p *ThriftHiveMetastoreClient) CreateType(ctx context.Context, type_a1 *Type) (r bool, err error) {
  var _args49 ThriftHiveMetastoreCreateTypeArgs
  _args49.Type = type_a1
  var _result50 ThriftHiveMetastoreCreateTypeResult
  if err = p.c.Call(ctx, "create_type", &_args49, &_result50); err != nil {
    return
  }
  switch {
  case _result50.O1!= nil:
    return r, _result50.O1
  case _result50.O2!= nil:
    return r, _result50.O2
  case _result50.O3!= nil:
    return r, _result50.O3
  }

  return _result50.GetSuccess(), nil
}

// Parameters:
//  - Type
func (p *ThriftHiveMetastoreClient) DropType(ctx context.Context, type_a1 string) (r bool, err error) {
  var _args51 ThriftHiveMetastoreDropTypeArgs
  _args51.Type = type_a1
  var _result52 ThriftHiveMetastoreDropTypeResult
  if err = p.c.Call(ctx, "drop_type", &_args51, &_result52); err != nil {
    return
  }
  switch {
  case _result52.O1!= nil:
    return r, _result52.O1
  case _result52.O2!= nil:
    return r, _result52.O2
  }

  return _result52.GetSuccess(), nil
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetTypeAll(ctx context.Context, name string) (r map[string]*Type, err error) {
  var _args53 ThriftHiveMetastoreGetTypeAllArgs
  _args53.Name = name
  var _result54 ThriftHiveMetastoreGetTypeAllResult
  if err = p.c.Call(ctx, "get_type_all", &_args53, &_result54); err != nil {
    return
  }
  switch {
  case _result54.O2!= nil:
    return r, _result54.O2
  }

  return _result54.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetFields(ctx context.Context, db_name string, table_name string) (r []*FieldSchema, err error) {
  var _args55 ThriftHiveMetastoreGetFieldsArgs
  _args55.DbName = db_name
  _args55.TableName = table_name
  var _result56 ThriftHiveMetastoreGetFieldsResult
  if err = p.c.Call(ctx, "get_fields", &_args55, &_result56); err != nil {
    return
  }
  switch {
  case _result56.O1!= nil:
    return r, _result56.O1
  case _result56.O2!= nil:
    return r, _result56.O2
  case _result56.O3!= nil:
    return r, _result56.O3
  }

  return _result56.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetSchema(ctx context.Context, db_name string, table_name string) (r []*FieldSchema, err error) {
  var _args57 ThriftHiveMetastoreGetSchemaArgs
  _args57.DbName = db_name
  _args57.TableName = table_name
  var _result58 ThriftHiveMetastoreGetSchemaResult
  if err = p.c.Call(ctx, "get_schema", &_args57, &_result58); err != nil {
    return
  }
  switch {
  case _result58.O1!= nil:
    return r, _result58.O1
  case _result58.O2!= nil:
    return r, _result58.O2
  case _result58.O3!= nil:
    return r, _result58.O3
  }

  return _result58.GetSuccess(), nil
}

// Parameters:
//  - Tbl
func (p *ThriftHiveMetastoreClient) CreateTable(ctx context.Context, tbl *Table) (err error) {
  var _args59 ThriftHiveMetastoreCreateTableArgs
  _args59.Tbl = tbl
  var _result60 ThriftHiveMetastoreCreateTableResult
  if err = p.c.Call(ctx, "create_table", &_args59, &_result60); err != nil {
    return
  }
  switch {
  case _result60.O1!= nil:
    return _result60.O1
  case _result60.O2!= nil:
    return _result60.O2
  case _result60.O3!= nil:
    return _result60.O3
  case _result60.O4!= nil:
    return _result60.O4
  }

  return nil
}

// Parameters:
//  - Tbl
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) CreateTableWithEnvironmentContext(ctx context.Context, tbl *Table, environment_context *EnvironmentContext) (err error) {
  var _args61 ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs
  _args61.Tbl = tbl
  _args61.EnvironmentContext = environment_context
  var _result62 ThriftHiveMetastoreCreateTableWithEnvironmentContextResult
  if err = p.c.Call(ctx, "create_table_with_environment_context", &_args61, &_result62); err != nil {
    return
  }
  switch {
  case _result62.O1!= nil:
    return _result62.O1
  case _result62.O2!= nil:
    return _result62.O2
  case _result62.O3!= nil:
    return _result62.O3
  case _result62.O4!= nil:
    return _result62.O4
  }

  return nil
}

// Parameters:
//  - Dbname
//  - Name
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropTable(ctx context.Context, dbname string, name string, deleteData bool) (err error) {
  var _args63 ThriftHiveMetastoreDropTableArgs
  _args63.Dbname = dbname
  _args63.Name = name
  _args63.DeleteData = deleteData
  var _result64 ThriftHiveMetastoreDropTableResult
  if err = p.c.Call(ctx, "drop_table", &_args63, &_result64); err != nil {
    return
  }
  switch {
  case _result64.O1!= nil:
    return _result64.O1
  case _result64.O3!= nil:
    return _result64.O3
  }

  return nil
}

// Parameters:
//  - DbName
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetTables(ctx context.Context, db_name string, pattern string) (r []string, err error) {
  var _args65 ThriftHiveMetastoreGetTablesArgs
  _args65.DbName = db_name
  _args65.Pattern = pattern
  var _result66 ThriftHiveMetastoreGetTablesResult
  if err = p.c.Call(ctx, "get_tables", &_args65, &_result66); err != nil {
    return
  }
  switch {
  case _result66.O1!= nil:
    return r, _result66.O1
  }

  return _result66.GetSuccess(), nil
}

// Parameters:
//  - DbName
func (p *ThriftHiveMetastoreClient) GetAllTables(ctx context.Context, db_name string) (r []string, err error) {
  var _args67 ThriftHiveMetastoreGetAllTablesArgs
  _args67.DbName = db_name
  var _result68 ThriftHiveMetastoreGetAllTablesResult
  if err = p.c.Call(ctx, "get_all_tables", &_args67, &_result68); err != nil {
    return
  }
  switch {
  case _result68.O1!= nil:
    return r, _result68.O1
  }

  return _result68.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - TblName
func (p *ThriftHiveMetastoreClient) GetTable(ctx context.Context, dbname string, tbl_name string) (r *Table, err error) {
  var _args69 ThriftHiveMetastoreGetTableArgs
  _args69.Dbname = dbname
  _args69.TblName = tbl_name
  var _result70 ThriftHiveMetastoreGetTableResult
  if err = p.c.Call(ctx, "get_table", &_args69, &_result70); err != nil {
    return
  }
  switch {
  case _result70.O1!= nil:
    return r, _result70.O1
  case _result70.O2!= nil:
    return r, _result70.O2
  }

  return _result70.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - TblNames
func (p *ThriftHiveMetastoreClient) GetTableObjectsByName(ctx context.Context, dbname string, tbl_names []string) (r []*Table, err error) {
  var _args71 ThriftHiveMetastoreGetTableObjectsByNameArgs
  _args71.Dbname = dbname
  _args71.TblNames = tbl_names
  var _result72 ThriftHiveMetastoreGetTableObjectsByNameResult
  if err = p.c.Call(ctx, "get_table_objects_by_name", &_args71, &_result72); err != nil {
    return
  }
  switch {
  case _result72.O1!= nil:
    return r, _result72.O1
  case _result72.O2!= nil:
    return r, _result72.O2
  case _result72.O3!= nil:
    return r, _result72.O3
  }

  return _result72.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - Filter
//  - MaxTables
func (p *ThriftHiveMetastoreClient) GetTableNamesByFilter(ctx context.Context, dbname string, filter string, max_tables int16) (r []string, err error) {
  var _args73 ThriftHiveMetastoreGetTableNamesByFilterArgs
  _args73.Dbname = dbname
  _args73.Filter = filter
  _args73.MaxTables = max_tables
  var _result74 ThriftHiveMetastoreGetTableNamesByFilterResult
  if err = p.c.Call(ctx, "get_table_names_by_filter", &_args73, &_result74); err != nil {
    return
  }
  switch {
  case _result74.O1!= nil:
    return r, _result74.O1
  case _result74.O2!= nil:
    return r, _result74.O2
  case _result74.O3!= nil:
    return r, _result74.O3
  }

  return _result74.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - TblName
//  - NewTbl_
func (p *ThriftHiveMetastoreClient) AlterTable(ctx context.Context, dbname string, tbl_name string, new_tbl *Table) (err error) {
  var _args75 ThriftHiveMetastoreAlterTableArgs
  _args75.Dbname = dbname
  _args75.TblName = tbl_name
  _args75.NewTbl_ = new_tbl
  var _result76 ThriftHiveMetastoreAlterTableResult
  if err = p.c.Call(ctx, "alter_table", &_args75, &_result76); err != nil {
    return
  }
  switch {
  case _result76.O1!= nil:
    return _result76.O1
  case _result76.O2!= nil:
    return _result76.O2
  }

  return nil
}

// Parameters:
//  - Dbname
//  - TblName
//  - NewTbl_
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AlterTableWithEnvironmentContext(ctx context.Context, dbname string, tbl_name string, new_tbl *Table, environment_context *EnvironmentContext) (err error) {
  var _args77 ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs
  _args77.Dbname = dbname
  _args77.TblName = tbl_name
  _args77.NewTbl_ = new_tbl
  _args77.EnvironmentContext = environment_context
  var _result78 ThriftHiveMetastoreAlterTableWithEnvironmentContextResult
  if err = p.c.Call(ctx, "alter_table_with_environment_context", &_args77, &_result78); err != nil {
    return
  }
  switch {
  case _result78.O1!= nil:
    return _result78.O1
  case _result78.O2!= nil:
    return _result78.O2
  }

  return nil
}

// Parameters:
//  - NewPart_
func (p *ThriftHiveMetastoreClient) AddPartition(ctx context.Context, new_part *Partition) (r *Partition, err error) {
  var _args79 ThriftHiveMetastoreAddPartitionArgs
  _args79.NewPart_ = new_part
  var _result80 ThriftHiveMetastoreAddPartitionResult
  if err = p.c.Call(ctx, "add_partition", &_args79, &_result80); err != nil {
    return
  }
  switch {
  case _result80.O1!= nil:
    return r, _result80.O1
  case _result80.O2!= nil:
    return r, _result80.O2
  case _result80.O3!= nil:
    return r, _result80.O3
  }

  return _result80.GetSuccess(), nil
}

// Parameters:
//  - NewPart_
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AddPartitionWithEnvironmentContext(ctx context.Context, new_part *Partition, environment_context *EnvironmentContext) (r *Partition, err error) {
  var _args81 ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs
  _args81.NewPart_ = new_part
  _args81.EnvironmentContext = environment_context
  var _result82 ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult
  if err = p.c.Call(ctx, "add_partition_with_environment_context", &_args81, &_result82); err != nil {
    return
  }
  switch {
  case _result82.O1!= nil:
    return r, _result82.O1
  case _result82.O2!= nil:
    return r, _result82.O2
  case _result82.O3!= nil:
    return r, _result82.O3
  }

  return _result82.GetSuccess(), nil
}

// Parameters:
//  - NewParts_
func (p *ThriftHiveMetastoreClient) AddPartitions(ctx context.Context, new_parts []*Partition) (r int32, err error) {
  var _args83 ThriftHiveMetastoreAddPartitionsArgs
  _args83.NewParts_ = new_parts
  var _result84 ThriftHiveMetastoreAddPartitionsResult
  if err = p.c.Call(ctx, "add_partitions", &_args83, &_result84); err != nil {
    return
  }
  switch {
  case _result84.O1!= nil:
    return r, _result84.O1
  case _result84.O2!= nil:
    return r, _result84.O2
  case _result84.O3!= nil:
    return r, _result84.O3
  }

  return _result84.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) AppendPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string) (r *Partition, err error) {
  var _args85 ThriftHiveMetastoreAppendPartitionArgs
  _args85.DbName = db_name
  _args85.TblName = tbl_name
  _args85.PartVals = part_vals
  var _result86 ThriftHiveMetastoreAppendPartitionResult
  if err = p.c.Call(ctx, "append_partition", &_args85, &_result86); err != nil {
    return
  }
  switch {
  case _result86.O1!= nil:
    return r, _result86.O1
  case _result86.O2!= nil:
    return r, _result86.O2
  case _result86.O3!= nil:
    return r, _result86.O3
  }

  return _result86.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) AppendPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string) (r *Partition, err error) {
  var _args87 ThriftHiveMetastoreAppendPartitionByNameArgs
  _args87.DbName = db_name
  _args87.TblName = tbl_name
  _args87.PartName = part_name
  var _result88 ThriftHiveMetastoreAppendPartitionByNameResult
  if err = p.c.Call(ctx, "append_partition_by_name", &_args87, &_result88); err != nil {
    return
  }
  switch {
  case _result88.O1!= nil:
    return r, _result88.O1
  case _result88.O2!= nil:
    return r, _result88.O2
  case _result88.O3!= nil:
    return r, _result88.O3
  }

  return _result88.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, err error) {
  var _args89 ThriftHiveMetastoreDropPartitionArgs
  _args89.DbName = db_name
  _args89.TblName = tbl_name
  _args89.PartVals = part_vals
  _args89.DeleteData = deleteData
  var _result90 ThriftHiveMetastoreDropPartitionResult
  if err = p.c.Call(ctx, "drop_partition", &_args89, &_result90); err != nil {
    return
  }
  switch {
  case _result90.O1!= nil:
    return r, _result90.O1
  case _result90.O2!= nil:
    return r, _result90.O2
  }

  return _result90.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string, deleteData bool) (r bool, err error) {
  var _args91 ThriftHiveMetastoreDropPartitionByNameArgs
  _args91.DbName = db_name
  _args91.TblName = tbl_name
  _args91.PartName = part_name
  _args91.DeleteData = deleteData
  var _result92 ThriftHiveMetastoreDropPartitionByNameResult
  if err = p.c.Call(ctx, "drop_partition_by_name", &_args91, &_result92); err != nil {
    return
  }
  switch {
  case _result92.O1!= nil:
    return r, _result92.O1
  case _result92.O2!= nil:
    return r, _result92.O2
  }

  return _result92.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) GetPartition(ctx context.Context, db_name string, tbl_name string, part_vals []string) (r *Partition, err error) {
  var _args93 ThriftHiveMetastoreGetPartitionArgs
  _args93.DbName = db_name
  _args93.TblName = tbl_name
  _args93.PartVals = part_vals
  var _result94 ThriftHiveMetastoreGetPartitionResult
  if err = p.c.Call(ctx, "get_partition", &_args93, &_result94); err != nil {
    return
  }
  switch {
  case _result94.O1!= nil:
    return r, _result94.O1
  case _result94.O2!= nil:
    return r, _result94.O2
  }

  return _result94.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionWithAuth(ctx context.Context, db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, err error) {
  var _args95 ThriftHiveMetastoreGetPartitionWithAuthArgs
  _args95.DbName = db_name
  _args95.TblName = tbl_name
  _args95.PartVals = part_vals
  _args95.UserName = user_name
  _args95.GroupNames = group_names
  var _result96 ThriftHiveMetastoreGetPartitionWithAuthResult
  if err = p.c.Call(ctx, "get_partition_with_auth", &_args95, &_result96); err != nil {
    return
  }
  switch {
  case _result96.O1!= nil:
    return r, _result96.O1
  case _result96.O2!= nil:
    return r, _result96.O2
  }

  return _result96.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) GetPartitionByName(ctx context.Context, db_name string, tbl_name string, part_name string) (r *Partition, err error) {
  var _args97 ThriftHiveMetastoreGetPartitionByNameArgs
  _args97.DbName = db_name
  _args97.TblName = tbl_name
  _args97.PartName = part_name
  var _result98 ThriftHiveMetastoreGetPartitionByNameResult
  if err = p.c.Call(ctx, "get_partition_by_name", &_args97, &_result98); err != nil {
    return
  }
  switch {
  case _result98.O1!= nil:
    return r, _result98.O1
  case _result98.O2!= nil:
    return r, _result98.O2
  }

  return _result98.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitions(ctx context.Context, db_name string, tbl_name string, max_parts int16) (r []*Partition, err error) {
  var _args99 ThriftHiveMetastoreGetPartitionsArgs
  _args99.DbName = db_name
  _args99.TblName = tbl_name
  _args99.MaxParts = max_parts
  var _result100 ThriftHiveMetastoreGetPartitionsResult
  if err = p.c.Call(ctx, "get_partitions", &_args99, &_result100); err != nil {
    return
  }
  switch {
  case _result100.O1!= nil:
    return r, _result100.O1
  case _result100.O2!= nil:
    return r, _result100.O2
  }

  return _result100.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsWithAuth(ctx context.Context, db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error) {
  var _args101 ThriftHiveMetastoreGetPartitionsWithAuthArgs
  _args101.DbName = db_name
  _args101.TblName = tbl_name
  _args101.MaxParts = max_parts
  _args101.UserName = user_name
  _args101.GroupNames = group_names
  var _result102 ThriftHiveMetastoreGetPartitionsWithAuthResult
  if err = p.c.Call(ctx, "get_partitions_with_auth", &_args101, &_result102); err != nil {
    return
  }
  switch {
  case _result102.O1!= nil:
    return r, _result102.O1
  case _result102.O2!= nil:
    return r, _result102.O2
  }

  return _result102.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNames(ctx context.Context, db_name string, tbl_name string, max_parts int16) (r []string, err error) {
  var _args103 ThriftHiveMetastoreGetPartitionNamesArgs
  _args103.DbName = db_name
  _args103.TblName = tbl_name
  _args103.MaxParts = max_parts
  var _result104 ThriftHiveMetastoreGetPartitionNamesResult
  if err = p.c.Call(ctx, "get_partition_names", &_args103, &_result104); err != nil {
    return
  }
  switch {
  case _result104.O2!= nil:
    return r, _result104.O2
  }

  return _result104.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsPs(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, err error) {
  var _args105 ThriftHiveMetastoreGetPartitionsPsArgs
  _args105.DbName = db_name
  _args105.TblName = tbl_name
  _args105.PartVals = part_vals
  _args105.MaxParts = max_parts
  var _result106 ThriftHiveMetastoreGetPartitionsPsResult
  if err = p.c.Call(ctx, "get_partitions_ps", &_args105, &_result106); err != nil {
    return
  }
  switch {
  case _result106.O1!= nil:
    return r, _result106.O1
  case _result106.O2!= nil:
    return r, _result106.O2
  }

  return _result106.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsPsWithAuth(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error) {
  var _args107 ThriftHiveMetastoreGetPartitionsPsWithAuthArgs
  _args107.DbName = db_name
  _args107.TblName = tbl_name
  _args107.PartVals = part_vals
  _args107.MaxParts = max_parts
  _args107.UserName = user_name
  _args107.GroupNames = group_names
  var _result108 ThriftHiveMetastoreGetPartitionsPsWithAuthResult
  if err = p.c.Call(ctx, "get_partitions_ps_with_auth", &_args107, &_result108); err != nil {
    return
  }
  switch {
  case _result108.O1!= nil:
    return r, _result108.O1
  case _result108.O2!= nil:
    return r, _result108.O2
  }

  return _result108.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNamesPs(ctx context.Context, db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, err error) {
  var _args109 ThriftHiveMetastoreGetPartitionNamesPsArgs
  _args109.DbName = db_name
  _args109.TblName = tbl_name
  _args109.PartVals = part_vals
  _args109.MaxParts = max_parts
  var _result110 ThriftHiveMetastoreGetPartitionNamesPsResult
  if err = p.c.Call(ctx, "get_partition_names_ps", &_args109, &_result110); err != nil {
    return
  }
  switch {
  case _result110.O1!= nil:
    return r, _result110.O1
  case _result110.O2!= nil:
    return r, _result110.O2
  }

  return _result110.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - Filter
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsByFilter(ctx context.Context, db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, err error) {
  var _args111 ThriftHiveMetastoreGetPartitionsByFilterArgs
  _args111.DbName = db_name
  _args111.TblName = tbl_name
  _args111.Filter = filter
  _args111.MaxParts = max_parts
  var _result112 ThriftHiveMetastoreGetPartitionsByFilterResult
  if err = p.c.Call(ctx, "get_partitions_by_filter", &_args111, &_result112); err != nil {
    return
  }
  switch {
  case _result112.O1!= nil:
    return r, _result112.O1
  case _result112.O2!= nil:
    return r, _result112.O2
  }

  return _result112.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - Names
func (p *ThriftHiveMetastoreClient) GetPartitionsByNames(ctx context.Context, db_name string, tbl_name string, names []string) (r []*Partition, err error) {
  var _args113 ThriftHiveMetastoreGetPartitionsByNamesArgs
  _args113.DbName = db_name
  _args113.TblName = tbl_name
  _args113.Names = names
  var _result114 ThriftHiveMetastoreGetPartitionsByNamesResult
  if err = p.c.Call(ctx, "get_partitions_by_names", &_args113, &_result114); err != nil {
    return
  }
  switch {
  case _result114.O1!= nil:
    return r, _result114.O1
  case _result114.O2!= nil:
    return r, _result114.O2
  }

  return _result114.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - NewPart_
func (p *ThriftHiveMetastoreClient) AlterPartition(ctx context.Context, db_name string, tbl_name string, new_part *Partition) (err error) {
  var _args115 ThriftHiveMetastoreAlterPartitionArgs
  _args115.DbName = db_name
  _args115.TblName = tbl_name
  _args115.NewPart_ = new_part
  var _result116 ThriftHiveMetastoreAlterPartitionResult
  if err = p.c.Call(ctx, "alter_partition", &_args115, &_result116); err != nil {
    return
  }
  switch {
  case _result116.O1!= nil:
    return _result116.O1
  case _result116.O2!= nil:
    return _result116.O2
  }

  return nil
}

// Parameters:
//  - DbName
//  - TblName
//  - NewParts_
func (p *ThriftHiveMetastoreClient) AlterPartitions(ctx context.Context, db_name string, tbl_name string, new_parts []*Partition) (err error) {
  var _args117 ThriftHiveMetastoreAlterPartitionsArgs
  _args117.DbName = db_name
  _args117.TblName = tbl_name
  _args117.NewParts_ = new_parts
  var _result118 ThriftHiveMetastoreAlterPartitionsResult
  if err = p.c.Call(ctx, "alter_partitions", &_args117, &_result118); err != nil {
    return
  }
  switch {
  case _result118.O1!= nil:
    return _result118.O1
  case _result118.O2!= nil:
    return _result118.O2
  }

  return nil
}

// Parameters:
//  - DbName
//  - TblName
//  - NewPart_
//  - EnvironmentContext
func (p *ThriftHiveMetastoreClient) AlterPartitionWithEnvironmentContext(ctx context.Context, db_name string, tbl_name string, new_part *Partition, environment_context *EnvironmentContext) (err error) {
  var _args119 ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs
  _args119.DbName = db_name
  _args119.TblName = tbl_name
  _args119.NewPart_ = new_part
  _args119.EnvironmentContext = environment_context
  var _result120 ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult
  if err = p.c.Call(ctx, "alter_partition_with_environment_context", &_args119, &_result120); err != nil {
    return
  }
  switch {
  case _result120.O1!= nil:
    return _result120.O1
  case _result120.O2!= nil:
    return _result120.O2
  }

  return nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - NewPart_
func (p *ThriftHiveMetastoreClient) RenamePartition(ctx context.Context, db_name string, tbl_name string, part_vals []string, new_part *Partition) (err error) {
  var _args121 ThriftHiveMetastoreRenamePartitionArgs
  _args121.DbName = db_name
  _args121.TblName = tbl_name
  _args121.PartVals = part_vals
  _args121.NewPart_ = new_part
  var _result122 ThriftHiveMetastoreRenamePartitionResult
  if err = p.c.Call(ctx, "rename_partition", &_args121, &_result122); err != nil {
    return
  }
  switch {
  case _result122.O1!= nil:
    return _result122.O1
  case _result122.O2!= nil:
    return _result122.O2
  }

  return nil
}

// Parameters:
//  - Name
//  - DefaultValue
func (p *ThriftHiveMetastoreClient) GetConfigValue(ctx context.Context, name string, defaultValue string) (r string, err error) {
  var _args123 ThriftHiveMetastoreGetConfigValueArgs
  _args123.Name = name
  _args123.DefaultValue = defaultValue
  var _result124 ThriftHiveMetastoreGetConfigValueResult
  if err = p.c.Call(ctx, "get_config_value", &_args123, &_result124); err != nil {
    return
  }
  switch {
  case _result124.O1!= nil:
    return r, _result124.O1
  }

  return _result124.GetSuccess(), nil
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToVals(ctx context.Context, part_name string) (r []string, err error) {
  var _args125 ThriftHiveMetastorePartitionNameToValsArgs
  _args125.PartName = part_name
  var _result126 ThriftHiveMetastorePartitionNameToValsResult
  if err = p.c.Call(ctx, "partition_name_to_vals", &_args125, &_result126); err != nil {
    return
  }
  switch {
  case _result126.O1!= nil:
    return r, _result126.O1
  }

  return _result126.GetSuccess(), nil
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToSpec(ctx context.Context, part_name string) (r map[string]string, err error) {
  var _args127 ThriftHiveMetastorePartitionNameToSpecArgs
  _args127.PartName = part_name
  var _result128 ThriftHiveMetastorePartitionNameToSpecResult
  if err = p.c.Call(ctx, "partition_name_to_spec", &_args127, &_result128); err != nil {
    return
  }
  switch {
  case _result128.O1!= nil:
    return r, _result128.O1
  }

  return _result128.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - EventType
func (p *ThriftHiveMetastoreClient) MarkPartitionForEvent(ctx context.Context, db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (err error) {
  var _args129 ThriftHiveMetastoreMarkPartitionForEventArgs
  _args129.DbName = db_name
  _args129.TblName = tbl_name
  _args129.PartVals = part_vals
  _args129.EventType = eventType
  var _result130 ThriftHiveMetastoreMarkPartitionForEventResult
  if err = p.c.Call(ctx, "markPartitionForEvent", &_args129, &_result130); err != nil {
    return
  }
  switch {
  case _result130.O1!= nil:
    return _result130.O1
  case _result130.O2!= nil:
    return _result130.O2
  case _result130.O3!= nil:
    return _result130.O3
  case _result130.O4!= nil:
    return _result130.O4
  case _result130.O5!= nil:
    return _result130.O5
  case _result130.O6!= nil:
    return _result130.O6
  }

  return nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - EventType
func (p *ThriftHiveMetastoreClient) IsPartitionMarkedForEvent(ctx context.Context, db_name string, tbl_name string, part_vals map[string]string, eventType PartitionEventType) (r bool, err error) {
  var _args131 ThriftHiveMetastoreIsPartitionMarkedForEventArgs
  _args131.DbName = db_name
  _args131.TblName = tbl_name
  _args131.PartVals = part_vals
  _args131.EventType = eventType
  var _result132 ThriftHiveMetastoreIsPartitionMarkedForEventResult
  if err = p.c.Call(ctx, "isPartitionMarkedForEvent", &_args131, &_result132); err != nil {
    return
  }
  switch {
  case _result132.O1!= nil:
    return r, _result132.O1
  case _result132.O2!= nil:
    return r, _result132.O2
  case _result132.O3!= nil:
    return r, _result132.O3
  case _result132.O4!= nil:
    return r, _result132.O4
  case _result132.O5!= nil:
    return r, _result132.O5
  case _result132.O6!= nil:
    return r, _result132.O6
  }

  return _result132.GetSuccess(), nil
}

// Parameters:
//  - NewIndex_
//  - IndexTable
func (p *ThriftHiveMetastoreClient) AddIndex(ctx context.Context, new_index *Index, index_table *Table) (r *Index, err error) {
  var _args133 ThriftHiveMetastoreAddIndexArgs
  _args133.NewIndex_ = new_index
  _args133.IndexTable = index_table
  var _result134 ThriftHiveMetastoreAddIndexResult
  if err = p.c.Call(ctx, "add_index", &_args133, &_result134); err != nil {
    return
  }
  switch {
  case _result134.O1!= nil:
    return r, _result134.O1
  case _result134.O2!= nil:
    return r, _result134.O2
  case _result134.O3!= nil:
    return r, _result134.O3
  }

  return _result134.GetSuccess(), nil
}

// Parameters:
//  - Dbname
//  - BaseTblName
//  - IdxName
//  - NewIdx_
func (p *ThriftHiveMetastoreClient) AlterIndex(ctx context.Context, dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error) {
  var _args135 ThriftHiveMetastoreAlterIndexArgs
  _args135.Dbname = dbname
  _args135.BaseTblName = base_tbl_name
  _args135.IdxName = idx_name
  _args135.NewIdx_ = new_idx
  var _result136 ThriftHiveMetastoreAlterIndexResult
  if err = p.c.Call(ctx, "alter_index", &_args135, &_result136); err != nil {
    return
  }
  switch {
  case _result136.O1!= nil:
    return _result136.O1
  case _result136.O2!= nil:
    return _result136.O2
  }

  return nil
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropIndexByName(ctx context.Context, db_name string, tbl_name string, index_name string, deleteData bool) (r bool, err error) {
  var _args137 ThriftHiveMetastoreDropIndexByNameArgs
  _args137.DbName = db_name
  _args137.TblName = tbl_name
  _args137.IndexName = index_name
  _args137.DeleteData = deleteData
  var _result138 ThriftHiveMetastoreDropIndexByNameResult
  if err = p.c.Call(ctx, "drop_index_by_name", &_args137, &_result138); err != nil {
    return
  }
  switch {
  case _result138.O1!= nil:
    return r, _result138.O1
  case _result138.O2!= nil:
    return r, _result138.O2
  }

  return _result138.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
func (p *ThriftHiveMetastoreClient) GetIndexByName(ctx context.Context, db_name string, tbl_name string, index_name string) (r *Index, err error) {
  var _args139 ThriftHiveMetastoreGetIndexByNameArgs
  _args139.DbName = db_name
  _args139.TblName = tbl_name
  _args139.IndexName = index_name
  var _result140 ThriftHiveMetastoreGetIndexByNameResult
  if err = p.c.Call(ctx, "get_index_by_name", &_args139, &_result140); err != nil {
    return
  }
  switch {
  case _result140.O1!= nil:
    return r, _result140.O1
  case _result140.O2!= nil:
    return r, _result140.O2
  }

  return _result140.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexes(ctx context.Context, db_name string, tbl_name string, max_indexes int16) (r []*Index, err error) {
  var _args141 ThriftHiveMetastoreGetIndexesArgs
  _args141.DbName = db_name
  _args141.TblName = tbl_name
  _args141.MaxIndexes = max_indexes
  var _result142 ThriftHiveMetastoreGetIndexesResult
  if err = p.c.Call(ctx, "get_indexes", &_args141, &_result142); err != nil {
    return
  }
  switch {
  case _result142.O1!= nil:
    return r, _result142.O1
  case _result142.O2!= nil:
    return r, _result142.O2
  }

  return _result142.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexNames(ctx context.Context, db_name string, tbl_name string, max_indexes int16) (r []string, err error) {
  var _args143 ThriftHiveMetastoreGetIndexNamesArgs
  _args143.DbName = db_name
  _args143.TblName = tbl_name
  _args143.MaxIndexes = max_indexes
  var _result144 ThriftHiveMetastoreGetIndexNamesResult
  if err = p.c.Call(ctx, "get_index_names", &_args143, &_result144); err != nil {
    return
  }
  switch {
  case _result144.O2!= nil:
    return r, _result144.O2
  }

  return _result144.GetSuccess(), nil
}

// Parameters:
//  - StatsObj
func (p *ThriftHiveMetastoreClient) UpdateTableColumnStatistics(ctx context.Context, stats_obj *ColumnStatistics) (r bool, err error) {
  var _args145 ThriftHiveMetastoreUpdateTableColumnStatisticsArgs
  _args145.StatsObj = stats_obj
  var _result146 ThriftHiveMetastoreUpdateTableColumnStatisticsResult
  if err = p.c.Call(ctx, "update_table_column_statistics", &_args145, &_result146); err != nil {
    return
  }
  switch {
  case _result146.O1!= nil:
    return r, _result146.O1
  case _result146.O2!= nil:
    return r, _result146.O2
  case _result146.O3!= nil:
    return r, _result146.O3
  case _result146.O4!= nil:
    return r, _result146.O4
  }

  return _result146.GetSuccess(), nil
}

// Parameters:
//  - StatsObj
func (p *ThriftHiveMetastoreClient) UpdatePartitionColumnStatistics(ctx context.Context, stats_obj *ColumnStatistics) (r bool, err error) {
  var _args147 ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs
  _args147.StatsObj = stats_obj
  var _result148 ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult
  if err = p.c.Call(ctx, "update_partition_column_statistics", &_args147, &_result148); err != nil {
    return
  }
  switch {
  case _result148.O1!= nil:
    return r, _result148.O1
  case _result148.O2!= nil:
    return r, _result148.O2
  case _result148.O3!= nil:
    return r, _result148.O3
  case _result148.O4!= nil:
    return r, _result148.O4
  }

  return _result148.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - ColName
func (p *ThriftHiveMetastoreClient) GetTableColumnStatistics(ctx context.Context, db_name string, tbl_name string, col_name string) (r *ColumnStatistics, err error) {
  var _args149 ThriftHiveMetastoreGetTableColumnStatisticsArgs
  _args149.DbName = db_name
  _args149.TblName = tbl_name
  _args149.ColName = col_name
  var _result150 ThriftHiveMetastoreGetTableColumnStatisticsResult
  if err = p.c.Call(ctx, "get_table_column_statistics", &_args149, &_result150); err != nil {
    return
  }
  switch {
  case _result150.O1!= nil:
    return r, _result150.O1
  case _result150.O2!= nil:
    return r, _result150.O2
  case _result150.O3!= nil:
    return r, _result150.O3
  case _result150.O4!= nil:
    return r, _result150.O4
  }

  return _result150.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - ColName
func (p *ThriftHiveMetastoreClient) GetPartitionColumnStatistics(ctx context.Context, db_name string, tbl_name string, part_name string, col_name string) (r *ColumnStatistics, err error) {
  var _args151 ThriftHiveMetastoreGetPartitionColumnStatisticsArgs
  _args151.DbName = db_name
  _args151.TblName = tbl_name
  _args151.PartName = part_name
  _args151.ColName = col_name
  var _result152 ThriftHiveMetastoreGetPartitionColumnStatisticsResult
  if err = p.c.Call(ctx, "get_partition_column_statistics", &_args151, &_result152); err != nil {
    return
  }
  switch {
  case _result152.O1!= nil:
    return r, _result152.O1
  case _result152.O2!= nil:
    return r, _result152.O2
  case _result152.O3!= nil:
    return r, _result152.O3
  case _result152.O4!= nil:
    return r, _result152.O4
  }

  return _result152.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - ColName
func (p *ThriftHiveMetastoreClient) DeletePartitionColumnStatistics(ctx context.Context, db_name string, tbl_name string, part_name string, col_name string) (r bool, err error) {
  var _args153 ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs
  _args153.DbName = db_name
  _args153.TblName = tbl_name
  _args153.PartName = part_name
  _args153.ColName = col_name
  var _result154 ThriftHiveMetastoreDeletePartitionColumnStatisticsResult
  if err = p.c.Call(ctx, "delete_partition_column_statistics", &_args153, &_result154); err != nil {
    return
  }
  switch {
  case _result154.O1!= nil:
    return r, _result154.O1
  case _result154.O2!= nil:
    return r, _result154.O2
  case _result154.O3!= nil:
    return r, _result154.O3
  case _result154.O4!= nil:
    return r, _result154.O4
  }

  return _result154.GetSuccess(), nil
}

// Parameters:
//  - DbName
//  - TblName
//  - ColName
func (p *ThriftHiveMetastoreClient) DeleteTableColumnStatistics(ctx context.Context, db_name string, tbl_name string, col_name string) (r bool, err error) {
  var _args155 ThriftHiveMetastoreDeleteTableColumnStatisticsArgs
  _args155.DbName = db_name
  _args155.TblName = tbl_name
  _args155.ColName = col_name
  var _result156 ThriftHiveMetastoreDeleteTableColumnStatisticsResult
  if err = p.c.Call(ctx, "delete_table_column_statistics", &_args155, &_result156); err != nil {
    return
  }
  switch {
  case _result156.O1!= nil:
    return r, _result156.O1
  case _result156.O2!= nil:
    return r, _result156.O2
  case _result156.O3!= nil:
    return r, _result156.O3
  case _result156.O4!= nil:
    return r, _result156.O4
  }

  return _result156.GetSuccess(), nil
}

// Parameters:
//  - Role
func (p *ThriftHiveMetastoreClient) CreateRole(ctx context.Context, role *Role) (r bool, err error) {
  var _args157 ThriftHiveMetastoreCreateRoleArgs
  _args157.Role = role
  var _result158 ThriftHiveMetastoreCreateRoleResult
  if err = p.c.Call(ctx, "create_role", &_args157, &_result158); err != nil {
    return
  }
  switch {
  case _result158.O1!= nil:
    return r, _result158.O1
  }

  return _result158.GetSuccess(), nil
}

// Parameters:
//  - RoleName
func (p *ThriftHiveMetastoreClient) DropRole(ctx context.Context, role_name string) (r bool, err error) {
  var _args159 ThriftHiveMetastoreDropRoleArgs
  _args159.RoleName = role_name
  var _result160 ThriftHiveMetastoreDropRoleResult
  if err = p.c.Call(ctx, "drop_role", &_args159, &_result160); err != nil {
    return
  }
  switch {
  case _result160.O1!= nil:
    return r, _result160.O1
  }

  return _result160.GetSuccess(), nil
}

func (p *ThriftHiveMetastoreClient) GetRoleNames(ctx context.Context) (r []string, err error) {
  var _args161 ThriftHiveMetastoreGetRoleNamesArgs
  var _result162 ThriftHiveMetastoreGetRoleNamesResult
  if err = p.c.Call(ctx, "get_role_names", &_args161, &_result162); err != nil {
    return
  }
  switch {
  case _result162.O1!= nil:
    return r, _result162.O1
  }

  return _result162.GetSuccess(), nil
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
//  - Grantor
//  - GrantorType
//  - GrantOption
func (p *ThriftHiveMetastoreClient) GrantRole(ctx context.Context, role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, err error) {
  var _args163 ThriftHiveMetastoreGrantRoleArgs
  _args163.RoleName = role_name
  _args163.PrincipalName = principal_name
  _args163.PrincipalType = principal_type
  _args163.Grantor = grantor
  _args163.GrantorType = grantorType
  _args163.GrantOption = grant_option
  var _result164 ThriftHiveMetastoreGrantRoleResult
  if err = p.c.Call(ctx, "grant_role", &_args163, &_result164); err != nil {
    return
  }
  switch {
  case _result164.O1!= nil:
    return r, _result164.O1
  }

  return _result164.GetSuccess(), nil
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) RevokeRole(ctx context.Context, role_name string, principal_name string, principal_type PrincipalType) (r bool, err error) {
  var _args165 ThriftHiveMetastoreRevokeRoleArgs
  _args165.RoleName = role_name
  _args165.PrincipalName = principal_name
  _args165.PrincipalType = principal_type
  var _result166 ThriftHiveMetastoreRevokeRoleResult
  if err = p.c.Call(ctx, "revoke_role", &_args165, &_result166); err != nil {
    return
  }
  switch {
  case _result166.O1!= nil:
    return r, _result166.O1
  }

  return _result166.GetSuccess(), nil
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) ListRoles(ctx context.Context, principal_name string, principal_type PrincipalType) (r []*Role, err error) {
  var _args167 ThriftHiveMetastoreListRolesArgs
  _args167.PrincipalName = principal_name
  _args167.PrincipalType = principal_type
  var _result168 ThriftHiveMetastoreListRolesResult
  if err = p.c.Call(ctx, "list_roles", &_args167, &_result168); err != nil {
    return
  }
  switch {
  case _result168.O1!= nil:
    return r, _result168.O1
  }

  return _result168.GetSuccess(), nil
}

// Parameters:
//  - HiveObject
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPrivilegeSet(ctx context.Context, hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, err error) {
  var _args169 ThriftHiveMetastoreGetPrivilegeSetArgs
  _args169.HiveObject = hiveObject
  _args169.UserName = user_name
  _args169.GroupNames = group_names
  var _result170 ThriftHiveMetastoreGetPrivilegeSetResult
  if err = p.c.Call(ctx, "get_privilege_set", &_args169, &_result170); err != nil {
    return
  }
  switch {
  case _result170.O1!= nil:
    return r, _result170.O1
  }

  return _result170.GetSuccess(), nil
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
//  - HiveObject
func (p *ThriftHiveMetastoreClient) ListPrivileges(ctx context.Context, principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, err error) {
  var _args171 ThriftHiveMetastoreListPrivilegesArgs
  _args171.PrincipalName = principal_name
  _args171.PrincipalType = principal_type
  _args171.HiveObject = hiveObject
  var _result172 ThriftHiveMetastoreListPrivilegesResult
  if err = p.c.Call(ctx, "list_privileges", &_args171, &_result172); err != nil {
    return
  }
  switch {
  case _result172.O1!= nil:
    return r, _result172.O1
  }

  return _result172.GetSuccess(), nil
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) GrantPrivileges(ctx context.Context, privileges *PrivilegeBag) (r bool, err error) {
  var _args173 ThriftHiveMetastoreGrantPrivilegesArgs
  _args173.Privileges = privileges
  var _result174 ThriftHiveMetastoreGrantPrivilegesResult
  if err = p.c.Call(ctx, "grant_privileges", &_args173, &_result174); err != nil {
    return
  }
  switch {
  case _result174.O1!= nil:
    return r, _result174.O1
  }

  return _result174.GetSuccess(), nil
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) RevokePrivileges(ctx context.Context, privileges *PrivilegeBag) (r bool, err error) {
  var _args175 ThriftHiveMetastoreRevokePrivilegesArgs
  _args175.Privileges = privileges
  var _result176 ThriftHiveMetastoreRevokePrivilegesResult
  if err = p.c.Call(ctx, "revoke_privileges", &_args175, &_result176); err != nil {
    return
  }
  switch {
  case _result176.O1!= nil:
    return r, _result176.O1
  }

  return _result176.GetSuccess(), nil
}

// Parameters:
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) SetUgi(ctx context.Context, user_name string, group_names []string) (r []string, err error) {
  var _args177 ThriftHiveMetastoreSetUgiArgs
  _args177.UserName = user_name
  _args177.GroupNames = group_names
  var _result178 ThriftHiveMetastoreSetUgiResult
  if err = p.c.Call(ctx, "set_ugi", &_args177, &_result178); err != nil {
    return
  }
  switch {
  case _result178.O1!= nil:
    return r, _result178.O1
  }

  return _result178.GetSuccess(), nil
}

// Parameters:
//  - TokenOwner
//  - RenewerKerberosPrincipalName
func (p *ThriftHiveMetastoreClient) GetDelegationToken(ctx context.Context, token_owner string, renewer_kerberos_principal_name string) (r string, err error) {
  var _args179 ThriftHiveMetastoreGetDelegationTokenArgs
  _args179.TokenOwner = token_owner
  _args179.RenewerKerberosPrincipalName = renewer_kerberos_principal_name
  var _result180 ThriftHiveMetastoreGetDelegationTokenResult
  if err = p.c.Call(ctx, "get_delegation_token", &_args179, &_result180); err != nil {
    return
  }
  switch {
  case _result180.O1!= nil:
    return r, _result180.O1
  }

  return _result180.GetSuccess(), nil
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) RenewDelegationToken(ctx context.Context, token_str_form string) (r int64, err error) {
  var _args181 ThriftHiveMetastoreRenewDelegationTokenArgs
  _args181.TokenStrForm = token_str_form
  var _result182 ThriftHiveMetastoreRenewDelegationTokenResult
  if err = p.c.Call(ctx, "renew_delegation_token", &_args181, &_result182); err != nil {
    return
  }
  switch {
  case _result182.O1!= nil:
    return r, _result182.O1
  }

  return _result182.GetSuccess(), nil
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) CancelDelegationToken(ctx context.Context, token_str_form string) (err error) {
  var _args183 ThriftHiveMetastoreCancelDelegationTokenArgs
  _args183.TokenStrForm = token_str_form
  var _result184 ThriftHiveMetastoreCancelDelegationTokenResult
  if err = p.c.Call(ctx, "cancel_delegation_token", &_args183, &_result184); err != nil {
    return
  }
  switch {
  case _result184.O1!= nil:
    return _result184.O1
  }

  return nil
}

type ThriftHiveMetastoreProcessor struct {
  *fb303.FacebookServiceProcessor
}

func NewThriftHiveMetastoreProcessor(handler ThriftHiveMetastore) *ThriftHiveMetastoreProcessor {
  self185 := &ThriftHiveMetastoreProcessor{fb303.NewFacebookServiceProcessor(handler)}
  self185.AddToProcessorMap("create_database", &thriftHiveMetastoreProcessorCreateDatabase{handler:handler})
  self185.AddToProcessorMap("get_database", &thriftHiveMetastoreProcessorGetDatabase{handler:handler})
  self185.AddToProcessorMap("drop_database", &thriftHiveMetastoreProcessorDropDatabase{handler:handler})
  self185.AddToProcessorMap("get_databases", &thriftHiveMetastoreProcessorGetDatabases{handler:handler})
  self185.AddToProcessorMap("get_all_databases", &thriftHiveMetastoreProcessorGetAllDatabases{handler:handler})
  self185.AddToProcessorMap("alter_database", &thriftHiveMetastoreProcessorAlterDatabase{handler:handler})
  self185.AddToProcessorMap("get_type", &thriftHiveMetastoreProcessorGetType{handler:handler})
  self185.AddToProcessorMap("create_type", &thriftHiveMetastoreProcessorCreateType{handler:handler})
  self185.AddToProcessorMap("drop_type", &thriftHiveMetastoreProcessorDropType{handler:handler})
  self185.AddToProcessorMap("get_type_all", &thriftHiveMetastoreProcessorGetTypeAll{handler:handler})
  self185.AddToProcessorMap("get_fields", &thriftHiveMetastoreProcessorGetFields{handler:handler})
  self185.AddToProcessorMap("get_schema", &thriftHiveMetastoreProcessorGetSchema{handler:handler})
  self185.AddToProcessorMap("create_table", &thriftHiveMetastoreProcessorCreateTable{handler:handler})
  self185.AddToProcessorMap("create_table_with_environment_context", &thriftHiveMetastoreProcessorCreateTableWithEnvironmentContext{handler:handler})
  self185.AddToProcessorMap("drop_table", &thriftHiveMetastoreProcessorDropTable{handler:handler})
  self185.AddToProcessorMap("get_tables", &thriftHiveMetastoreProcessorGetTables{handler:handler})
  self185.AddToProcessorMap("get_all_tables", &thriftHiveMetastoreProcessorGetAllTables{handler:handler})
  self185.AddToProcessorMap("get_table", &thriftHiveMetastoreProcessorGetTable{handler:handler})
  self185.AddToProcessorMap("get_table_objects_by_name", &thriftHiveMetastoreProcessorGetTableObjectsByName{handler:handler})
  self185.AddToProcessorMap("get_table_names_by_filter", &thriftHiveMetastoreProcessorGetTableNamesByFilter{handler:handler})
  self185.AddToProcessorMap("alter_table", &thriftHiveMetastoreProcessorAlterTable{handler:handler})
  self185.AddToProcessorMap("alter_table_with_environment_context", &thriftHiveMetastoreProcessorAlterTableWithEnvironmentContext{handler:handler})
  self185.AddToProcessorMap("add_partition", &thriftHiveMetastoreProcessorAddPartition{handler:handler})
  self185.AddToProcessorMap("add_partition_with_environment_context", &thriftHiveMetastoreProcessorAddPartitionWithEnvironmentContext{handler:handler})
  self185.AddToProcessorMap("add_partitions", &thriftHiveMetastoreProcessorAddPartitions{handler:handler})
  self185.AddToProcessorMap("append_partition", &thriftHiveMetastoreProcessorAppendPartition{handler:handler})
  self185.AddToProcessorMap("append_partition_by_name", &thriftHiveMetastoreProcessorAppendPartitionByName{handler:handler})
  self185.AddToProcessorMap("drop_partition", &thriftHiveMetastoreProcessorDropPartition{handler:handler})
  self185.AddToProcessorMap("drop_partition_by_name", &thriftHiveMetastoreProcessorDropPartitionByName{handler:handler})
  self185.AddToProcessorMap("get_partition", &thriftHiveMetastoreProcessorGetPartition{handler:handler})
  self185.AddToProcessorMap("get_partition_with_auth", &thriftHiveMetastoreProcessorGetPartitionWithAuth{handler:handler})
  self185.AddToProcessorMap("get_partition_by_name", &thriftHiveMetastoreProcessorGetPartitionByName{handler:handler})
  self185.AddToProcessorMap("get_partitions", &thriftHiveMetastoreProcessorGetPartitions{handler:handler})
  self185.AddToProcessorMap("get_partitions_with_auth", &thriftHiveMetastoreProcessorGetPartitionsWithAuth{handler:handler})
  self185.AddToProcessorMap("get_partition_names", &thriftHiveMetastoreProcessorGetPartitionNames{handler:handler})
  self185.AddToProcessorMap("get_partitions_ps", &thriftHiveMetastoreProcessorGetPartitionsPs{handler:handler})
  self185.AddToProcessorMap("get_partitions_ps_with_auth", &thriftHiveMetastoreProcessorGetPartitionsPsWithAuth{handler:handler})
  self185.AddToProcessorMap("get_partition_names_ps", &thriftHiveMetastoreProcessorGetPartitionNamesPs{handler:handler})
  self185.AddToProcessorMap("get_partitions_by_filter", &thriftHiveMetastoreProcessorGetPartitionsByFilter{handler:handler})
  self185.AddToProcessorMap("get_partitions_by_names", &thriftHiveMetastoreProcessorGetPartitionsByNames{handler:handler})
  self185.AddToProcessorMap("alter_partition", &thriftHiveMetastoreProcessorAlterPartition{handler:handler})
  self185.AddToProcessorMap("alter_partitions", &thriftHiveMetastoreProcessorAlterPartitions{handler:handler})
  self185.AddToProcessorMap("alter_partition_with_environment_context", &thriftHiveMetastoreProcessorAlterPartitionWithEnvironmentContext{handler:handler})
  self185.AddToProcessorMap("rename_partition", &thriftHiveMetastoreProcessorRenamePartition{handler:handler})
  self185.AddToProcessorMap("get_config_value", &thriftHiveMetastoreProcessorGetConfigValue{handler:handler})
  self185.AddToProcessorMap("partition_name_to_vals", &thriftHiveMetastoreProcessorPartitionNameToVals{handler:handler})
  self185.AddToProcessorMap("partition_name_to_spec", &thriftHiveMetastoreProcessorPartitionNameToSpec{handler:handler})
  self185.AddToProcessorMap("markPartitionForEvent", &thriftHiveMetastoreProcessorMarkPartitionForEvent{handler:handler})
  self185.AddToProcessorMap("isPartitionMarkedForEvent", &thriftHiveMetastoreProcessorIsPartitionMarkedForEvent{handler:handler})
  self185.AddToProcessorMap("add_index", &thriftHiveMetastoreProcessorAddIndex{handler:handler})
  self185.AddToProcessorMap("alter_index", &thriftHiveMetastoreProcessorAlterIndex{handler:handler})
  self185.AddToProcessorMap("drop_index_by_name", &thriftHiveMetastoreProcessorDropIndexByName{handler:handler})
  self185.AddToProcessorMap("get_index_by_name", &thriftHiveMetastoreProcessorGetIndexByName{handler:handler})
  self185.AddToProcessorMap("get_indexes", &thriftHiveMetastoreProcessorGetIndexes{handler:handler})
  self185.AddToProcessorMap("get_index_names", &thriftHiveMetastoreProcessorGetIndexNames{handler:handler})
  self185.AddToProcessorMap("update_table_column_statistics", &thriftHiveMetastoreProcessorUpdateTableColumnStatistics{handler:handler})
  self185.AddToProcessorMap("update_partition_column_statistics", &thriftHiveMetastoreProcessorUpdatePartitionColumnStatistics{handler:handler})
  self185.AddToProcessorMap("get_table_column_statistics", &thriftHiveMetastoreProcessorGetTableColumnStatistics{handler:handler})
  self185.AddToProcessorMap("get_partition_column_statistics", &thriftHiveMetastoreProcessorGetPartitionColumnStatistics{handler:handler})
  self185.AddToProcessorMap("delete_partition_column_statistics", &thriftHiveMetastoreProcessorDeletePartitionColumnStatistics{handler:handler})
  self185.AddToProcessorMap("delete_table_column_statistics", &thriftHiveMetastoreProcessorDeleteTableColumnStatistics{handler:handler})
  self185.AddToProcessorMap("create_role", &thriftHiveMetastoreProcessorCreateRole{handler:handler})
  self185.AddToProcessorMap("drop_role", &thriftHiveMetastoreProcessorDropRole{handler:handler})
  self185.AddToProcessorMap("get_role_names", &thriftHiveMetastoreProcessorGetRoleNames{handler:handler})
  self185.AddToProcessorMap("grant_role", &thriftHiveMetastoreProcessorGrantRole{handler:handler})
  self185.AddToProcessorMap("revoke_role", &thriftHiveMetastoreProcessorRevokeRole{handler:handler})
  self185.AddToProcessorMap("list_roles", &thriftHiveMetastoreProcessorListRoles{handler:handler})
  self185.AddToProcessorMap("get_privilege_set", &thriftHiveMetastoreProcessorGetPrivilegeSet{handler:handler})
  self185.AddToProcessorMap("list_privileges", &thriftHiveMetastoreProcessorListPrivileges{handler:handler})
  self185.AddToProcessorMap("grant_privileges", &thriftHiveMetastoreProcessorGrantPrivileges{handler:handler})
  self185.AddToProcessorMap("revoke_privileges", &thriftHiveMetastoreProcessorRevokePrivileges{handler:handler})
  self185.AddToProcessorMap("set_ugi", &thriftHiveMetastoreProcessorSetUgi{handler:handler})
  self185.AddToProcessorMap("get_delegation_token", &thriftHiveMetastoreProcessorGetDelegationToken{handler:handler})
  self185.AddToProcessorMap("renew_delegation_token", &thriftHiveMetastoreProcessorRenewDelegationToken{handler:handler})
  self185.AddToProcessorMap("cancel_delegation_token", &thriftHiveMetastoreProcessorCancelDelegationToken{handler:handler})
  return self185
}

type thriftHiveMetastoreProcessorCreateDatabase struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateDatabase) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateDatabaseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreCreateDatabaseResult{}
  var err2 error
  if err2 = p.handler.CreateDatabase(ctx, args.Database); err2 != nil {
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_database: " + err2.Error())
    oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("create_database", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetDatabase struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabase) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetDatabaseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetDatabaseResult{}
var retval *Database
  var err2 error
  if retval, err2 = p.handler.GetDatabase(ctx, args.Name); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_database: " + err2.Error())
    oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_database", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropDatabase struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropDatabase) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropDatabaseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreDropDatabaseResult{}
  var err2 error
  if err2 = p.handler.DropDatabase(ctx, args.Name, args.DeleteData, args.Cascade); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *InvalidOperationException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_database: " + err2.Error())
    oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("drop_database", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetDatabases struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabases) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetDatabasesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetDatabasesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetDatabases(ctx, args.Pattern); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_databases: " + err2.Error())
    oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_databases", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetAllDatabases struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllDatabases) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetAllDatabasesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetAllDatabasesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllDatabases(ctx); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_databases: " + err2.Error())
    oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_all_databases", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterDatabase struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterDatabase) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterDatabaseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAlterDatabaseResult{}
  var err2 error
  if err2 = p.handler.AlterDatabase(ctx, args.Dbname, args.Db); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_database: " + err2.Error())
    oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("alter_database", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetType struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTypeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetTypeResult{}
var retval *Type
  var err2 error
  if retval, err2 = p.handler.GetType(ctx, args.Name); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type: " + err2.Error())
    oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_type", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateType struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateTypeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreCreateTypeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CreateType(ctx, args.Type); err2 != nil {
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_type: " + err2.Error())
    oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("create_type", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropType struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropTypeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreDropTypeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DropType(ctx, args.Type); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_type: " + err2.Error())
    oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("drop_type", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTypeAll struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTypeAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTypeAllArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetTypeAllResult{}
var retval map[string]*Type
  var err2 error
  if retval, err2 = p.handler.GetTypeAll(ctx, args.Name); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type_all: " + err2.Error())
    oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_type_all", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetFields struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFields) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetFieldsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetFieldsResult{}
var retval []*FieldSchema
  var err2 error
  if retval, err2 = p.handler.GetFields(ctx, args.DbName, args.TableName); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *UnknownTableException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_fields: " + err2.Error())
    oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_fields", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetSchema struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetSchema) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetSchemaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetSchemaResult{}
var retval []*FieldSchema
  var err2 error
  if retval, err2 = p.handler.GetSchema(ctx, args.DbName, args.TableName); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *UnknownTableException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_schema: " + err2.Error())
    oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_schema", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateTable struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreCreateTableResult{}
  var err2 error
  if err2 = p.handler.CreateTable(ctx, args.Tbl); err2 != nil {
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    case *NoSuchObjectException:
  result.O4 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table: " + err2.Error())
    oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("create_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateTableWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateTableWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_table_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreCreateTableWithEnvironmentContextResult{}
  var err2 error
  if err2 = p.handler.CreateTableWithEnvironmentContext(ctx, args.Tbl, args.EnvironmentContext); err2 != nil {
  switch v := err2.(type) {
    case *AlreadyExistsException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    case *NoSuchObjectException:
  result.O4 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin("create_table_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("create_table_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropTable struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreDropTableResult{}
  var err2 error
  if err2 = p.handler.DropTable(ctx, args.Dbname, args.Name, args.DeleteData); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_table: " + err2.Error())
    oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("drop_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTables struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTables) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTablesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetTablesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetTables(ctx, args.DbName, args.Pattern); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables: " + err2.Error())
    oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_tables", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetAllTables struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllTables) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetAllTablesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetAllTablesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllTables(ctx, args.DbName); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_tables: " + err2.Error())
    oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_all_tables", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTable struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetTableResult{}
var retval *Table
  var err2 error
  if retval, err2 = p.handler.GetTable(ctx, args.Dbname, args.TblName); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table: " + err2.Error())
    oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTableObjectsByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableObjectsByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableObjectsByNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_table_objects_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetTableObjectsByNameResult{}
var retval []*Table
  var err2 error
  if retval, err2 = p.handler.GetTableObjectsByName(ctx, args.Dbname, args.TblNames); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *InvalidOperationException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_objects_by_name: " + err2.Error())
    oprot.WriteMessageBegin("get_table_objects_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_table_objects_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTableNamesByFilter struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableNamesByFilter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableNamesByFilterArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_table_names_by_filter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetTableNamesByFilterResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetTableNamesByFilter(ctx, args.Dbname, args.Filter, args.MaxTables); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *InvalidOperationException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_names_by_filter: " + err2.Error())
    oprot.WriteMessageBegin("get_table_names_by_filter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_table_names_by_filter", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterTable struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterTableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAlterTableResult{}
  var err2 error
  if err2 = p.handler.AlterTable(ctx, args.Dbname, args.TblName, args.NewTbl_); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_table: " + err2.Error())
    oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("alter_table", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterTableWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterTableWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_table_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAlterTableWithEnvironmentContextResult{}
  var err2 error
  if err2 = p.handler.AlterTableWithEnvironmentContext(ctx, args.Dbname, args.TblName, args.NewTbl_, args.EnvironmentContext); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_table_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin("alter_table_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("alter_table_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddPartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddPartitionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAddPartitionResult{}
var retval *Partition
  var err2 error
  if retval, err2 = p.handler.AddPartition(ctx, args.NewPart_); err2 != nil {
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partition: " + err2.Error())
    oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("add_partition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddPartitionWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartitionWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult{}
var retval *Partition
  var err2 error
  if retval, err2 = p.handler.AddPartitionWithEnvironmentContext(ctx, args.NewPart_, args.EnvironmentContext); err2 != nil {
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partition_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin("add_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("add_partition_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddPartitions struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartitions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddPartitionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_partitions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAddPartitionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.AddPartitions(ctx, args.NewParts_); err2 != nil {
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partitions: " + err2.Error())
    oprot.WriteMessageBegin("add_partitions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("add_partitions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAppendPartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAppendPartitionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAppendPartitionResult{}
var retval *Partition
  var err2 error
  if retval, err2 = p.handler.AppendPartition(ctx, args.DbName, args.TblName, args.PartVals); err2 != nil {
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition: " + err2.Error())
    oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("append_partition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAppendPartitionByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartitionByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAppendPartitionByNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAppendPartitionByNameResult{}
var retval *Partition
  var err2 error
  if retval, err2 = p.handler.AppendPartitionByName(ctx, args.DbName, args.TblName, args.PartName); err2 != nil {
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition_by_name: " + err2.Error())
    oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("append_partition_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropPartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropPartitionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreDropPartitionResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DropPartition(ctx, args.DbName, args.TblName, args.PartVals, args.DeleteData); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition: " + err2.Error())
    oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("drop_partition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropPartitionByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropPartitionByNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreDropPartitionByNameResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DropPartitionByName(ctx, args.DbName, args.TblName, args.PartName, args.DeleteData); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition_by_name: " + err2.Error())
    oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("drop_partition_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionResult{}
var retval *Partition
  var err2 error
  if retval, err2 = p.handler.GetPartition(ctx, args.DbName, args.TblName, args.PartVals); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition: " + err2.Error())
    oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionWithAuth struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionWithAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionWithAuthArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionWithAuthResult{}
var retval *Partition
  var err2 error
  if retval, err2 = p.handler.GetPartitionWithAuth(ctx, args.DbName, args.TblName, args.PartVals, args.UserName, args.GroupNames); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_with_auth: " + err2.Error())
    oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partition_with_auth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionByNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionByNameResult{}
var retval *Partition
  var err2 error
  if retval, err2 = p.handler.GetPartitionByName(ctx, args.DbName, args.TblName, args.PartName); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_by_name: " + err2.Error())
    oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partition_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitions struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionsResult{}
var retval []*Partition
  var err2 error
  if retval, err2 = p.handler.GetPartitions(ctx, args.DbName, args.TblName, args.MaxParts); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions: " + err2.Error())
    oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partitions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsWithAuth struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsWithAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsWithAuthArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionsWithAuthResult{}
var retval []*Partition
  var err2 error
  if retval, err2 = p.handler.GetPartitionsWithAuth(ctx, args.DbName, args.TblName, args.MaxParts, args.UserName, args.GroupNames); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_with_auth: " + err2.Error())
    oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partitions_with_auth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNames struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionNamesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetPartitionNames(ctx, args.DbName, args.TblName, args.MaxParts); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names: " + err2.Error())
    oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partition_names", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPs struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsPsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionsPsResult{}
var retval []*Partition
  var err2 error
  if retval, err2 = p.handler.GetPartitionsPs(ctx, args.DbName, args.TblName, args.PartVals, args.MaxParts); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps: " + err2.Error())
    oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partitions_ps", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPsWithAuth struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPsWithAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsPsWithAuthArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionsPsWithAuthResult{}
var retval []*Partition
  var err2 error
  if retval, err2 = p.handler.GetPartitionsPsWithAuth(ctx, args.DbName, args.TblName, args.PartVals, args.MaxParts, args.UserName, args.GroupNames); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps_with_auth: " + err2.Error())
    oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNamesPs struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNamesPs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionNamesPsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionNamesPsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetPartitionNamesPs(ctx, args.DbName, args.TblName, args.PartVals, args.MaxParts); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names_ps: " + err2.Error())
    oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partition_names_ps", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByFilter struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByFilter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsByFilterArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionsByFilterResult{}
var retval []*Partition
  var err2 error
  if retval, err2 = p.handler.GetPartitionsByFilter(ctx, args.DbName, args.TblName, args.Filter, args.MaxParts); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_filter: " + err2.Error())
    oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partitions_by_filter", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByNames struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionsByNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partitions_by_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionsByNamesResult{}
var retval []*Partition
  var err2 error
  if retval, err2 = p.handler.GetPartitionsByNames(ctx, args.DbName, args.TblName, args.Names); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_names: " + err2.Error())
    oprot.WriteMessageBegin("get_partitions_by_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partitions_by_names", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterPartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterPartitionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAlterPartitionResult{}
  var err2 error
  if err2 = p.handler.AlterPartition(ctx, args.DbName, args.TblName, args.NewPart_); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partition: " + err2.Error())
    oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("alter_partition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterPartitions struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartitions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterPartitionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_partitions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAlterPartitionsResult{}
  var err2 error
  if err2 = p.handler.AlterPartitions(ctx, args.DbName, args.TblName, args.NewParts_); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partitions: " + err2.Error())
    oprot.WriteMessageBegin("alter_partitions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("alter_partitions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterPartitionWithEnvironmentContext struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartitionWithEnvironmentContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult{}
  var err2 error
  if err2 = p.handler.AlterPartitionWithEnvironmentContext(ctx, args.DbName, args.TblName, args.NewPart_, args.EnvironmentContext); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partition_with_environment_context: " + err2.Error())
    oprot.WriteMessageBegin("alter_partition_with_environment_context", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("alter_partition_with_environment_context", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRenamePartition struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRenamePartition) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreRenamePartitionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("rename_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreRenamePartitionResult{}
  var err2 error
  if err2 = p.handler.RenamePartition(ctx, args.DbName, args.TblName, args.PartVals, args.NewPart_); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rename_partition: " + err2.Error())
    oprot.WriteMessageBegin("rename_partition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("rename_partition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetConfigValue struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetConfigValue) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetConfigValueArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetConfigValueResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetConfigValue(ctx, args.Name, args.DefaultValue); err2 != nil {
  switch v := err2.(type) {
    case *ConfigValSecurityException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_config_value: " + err2.Error())
    oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get_config_value", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToVals struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToVals) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastorePartitionNameToValsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastorePartitionNameToValsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.PartitionNameToVals(ctx, args.PartName); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_vals: " + err2.Error())
    oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("partition_name_to_vals", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToSpec struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToSpec) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastorePartitionNameToSpecArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastorePartitionNameToSpecResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.PartitionNameToSpec(ctx, args.PartName); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_spec: " + err2.Error())
    oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("partition_name_to_spec", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorMarkPartitionForEvent struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorMarkPartitionForEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreMarkPartitionForEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("markPartitionForEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreMarkPartitionForEventResult{}
  var err2 error
  if err2 = p.handler.MarkPartitionForEvent(ctx, args.DbName, args.TblName, args.PartVals, args.EventType); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    case *UnknownTableException:
  result.O4 = v
    case *UnknownPartitionException:
  result.O5 = v
    case *InvalidPartitionException:
  result.O6 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing markPartitionForEvent: " + err2.Error())
    oprot.WriteMessageBegin("markPartitionForEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("markPartitionForEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorIsPartitionMarkedForEvent struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorIsPartitionMarkedForEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreIsPartitionMarkedForEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("isPartitionMarkedForEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreIsPartitionMarkedForEventResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.IsPartitionMarkedForEvent(ctx, args.DbName, args.TblName, args.PartVals, args.EventType); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    case *UnknownDBException:
  result.O3 = v
    case *UnknownTableException:
  result.O4 = v
    case *UnknownPartitionException:
  result.O5 = v
    case *InvalidPartitionException:
  result.O6 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isPartitionMarkedForEvent: " + err2.Error())
    oprot.WriteMessageBegin("isPartitionMarkedForEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("isPartitionMarkedForEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAddIndex struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAddIndexArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAddIndexResult{}
var retval *Index
  var err2 error
  if retval, err2 = p.handler.AddIndex(ctx, args.NewIndex_, args.IndexTable); err2 != nil {
  switch v := err2.(type) {
    case *InvalidObjectException:
  result.O1 = v
    case *AlreadyExistsException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_index: " + err2.Error())
    oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("add_index", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorAlterIndex struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreAlterIndexArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreAlterIndexResult{}
  var err2 error
  if err2 = p.handler.AlterIndex(ctx, args.Dbname, args.BaseTblName, args.IdxName, args.NewIdx_); err2 != nil {
  switch v := err2.(type) {
    case *InvalidOperationException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_index: " + err2.Error())
    oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("alter_index", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropIndexByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropIndexByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropIndexByNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreDropIndexByNameResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DropIndexByName(ctx, args.DbName, args.TblName, args.IndexName, args.DeleteData); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_index_by_name: " + err2.Error())
    oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("drop_index_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetIndexByName struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetIndexByNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetIndexByNameResult{}
var retval *Index
  var err2 error
  if retval, err2 = p.handler.GetIndexByName(ctx, args.DbName, args.TblName, args.IndexName); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    case *NoSuchObjectException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_by_name: " + err2.Error())
    oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_index_by_name", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetIndexes struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetIndexesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetIndexesResult{}
var retval []*Index
  var err2 error
  if retval, err2 = p.handler.GetIndexes(ctx, args.DbName, args.TblName, args.MaxIndexes); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_indexes: " + err2.Error())
    oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_indexes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetIndexNames struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetIndexNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetIndexNamesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetIndexNames(ctx, args.DbName, args.TblName, args.MaxIndexes); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O2 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_names: " + err2.Error())
    oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_index_names", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorUpdateTableColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorUpdateTableColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreUpdateTableColumnStatisticsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("update_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreUpdateTableColumnStatisticsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateTableColumnStatistics(ctx, args.StatsObj); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    case *InvalidInputException:
  result.O4 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_table_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin("update_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("update_table_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorUpdatePartitionColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorUpdatePartitionColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("update_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdatePartitionColumnStatistics(ctx, args.StatsObj); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *InvalidObjectException:
  result.O2 = v
    case *MetaException:
  result.O3 = v
    case *InvalidInputException:
  result.O4 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing update_partition_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin("update_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("update_partition_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetTableColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTableColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetTableColumnStatisticsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetTableColumnStatisticsResult{}
var retval *ColumnStatistics
  var err2 error
  if retval, err2 = p.handler.GetTableColumnStatistics(ctx, args.DbName, args.TblName, args.ColName); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    case *InvalidInputException:
  result.O3 = v
    case *InvalidObjectException:
  result.O4 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin("get_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_table_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPartitionColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPartitionColumnStatisticsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPartitionColumnStatisticsResult{}
var retval *ColumnStatistics
  var err2 error
  if retval, err2 = p.handler.GetPartitionColumnStatistics(ctx, args.DbName, args.TblName, args.PartName, args.ColName); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    case *InvalidInputException:
  result.O3 = v
    case *InvalidObjectException:
  result.O4 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin("get_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_partition_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDeletePartitionColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDeletePartitionColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("delete_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreDeletePartitionColumnStatisticsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeletePartitionColumnStatistics(ctx, args.DbName, args.TblName, args.PartName, args.ColName); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    case *InvalidObjectException:
  result.O3 = v
    case *InvalidInputException:
  result.O4 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_partition_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin("delete_partition_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("delete_partition_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDeleteTableColumnStatistics struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDeleteTableColumnStatistics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDeleteTableColumnStatisticsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("delete_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreDeleteTableColumnStatisticsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DeleteTableColumnStatistics(ctx, args.DbName, args.TblName, args.ColName); err2 != nil {
  switch v := err2.(type) {
    case *NoSuchObjectException:
  result.O1 = v
    case *MetaException:
  result.O2 = v
    case *InvalidObjectException:
  result.O3 = v
    case *InvalidInputException:
  result.O4 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_table_column_statistics: " + err2.Error())
    oprot.WriteMessageBegin("delete_table_column_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("delete_table_column_statistics", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCreateRole struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCreateRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreCreateRoleResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CreateRole(ctx, args.Role); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_role: " + err2.Error())
    oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("create_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorDropRole struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreDropRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreDropRoleResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DropRole(ctx, args.RoleName); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_role: " + err2.Error())
    oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("drop_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetRoleNames struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetRoleNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetRoleNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetRoleNamesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetRoleNames(ctx); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_role_names: " + err2.Error())
    oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_role_names", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGrantRole struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGrantRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGrantRoleResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.GrantRole(ctx, args.RoleName, args.PrincipalName, args.PrincipalType, args.Grantor, args.GrantorType, args.GrantOption); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_role: " + err2.Error())
    oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("grant_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRevokeRole struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokeRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreRevokeRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreRevokeRoleResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.RevokeRole(ctx, args.RoleName, args.PrincipalName, args.PrincipalType); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_role: " + err2.Error())
    oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("revoke_role", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorListRoles struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListRoles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreListRolesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreListRolesResult{}
var retval []*Role
  var err2 error
  if retval, err2 = p.handler.ListRoles(ctx, args.PrincipalName, args.PrincipalType); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_roles: " + err2.Error())
    oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_roles", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetPrivilegeSet struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPrivilegeSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetPrivilegeSetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetPrivilegeSetResult{}
var retval *PrincipalPrivilegeSet
  var err2 error
  if retval, err2 = p.handler.GetPrivilegeSet(ctx, args.HiveObject, args.UserName, args.GroupNames); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_privilege_set: " + err2.Error())
    oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_privilege_set", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorListPrivileges struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListPrivileges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreListPrivilegesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreListPrivilegesResult{}
var retval []*HiveObjectPrivilege
  var err2 error
  if retval, err2 = p.handler.ListPrivileges(ctx, args.PrincipalName, args.PrincipalType, args.HiveObject); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_privileges: " + err2.Error())
    oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("list_privileges", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGrantPrivileges struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantPrivileges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGrantPrivilegesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGrantPrivilegesResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.GrantPrivileges(ctx, args.Privileges); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_privileges: " + err2.Error())
    oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("grant_privileges", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRevokePrivileges struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokePrivileges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreRevokePrivilegesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreRevokePrivilegesResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.RevokePrivileges(ctx, args.Privileges); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_privileges: " + err2.Error())
    oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("revoke_privileges", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorSetUgi struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorSetUgi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreSetUgiArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("set_ugi", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreSetUgiResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.SetUgi(ctx, args.UserName, args.GroupNames); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing set_ugi: " + err2.Error())
    oprot.WriteMessageBegin("set_ugi", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("set_ugi", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorGetDelegationToken struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDelegationToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreGetDelegationTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreGetDelegationTokenResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetDelegationToken(ctx, args.TokenOwner, args.RenewerKerberosPrincipalName); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_delegation_token: " + err2.Error())
    oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get_delegation_token", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorRenewDelegationToken struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRenewDelegationToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreRenewDelegationTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreRenewDelegationTokenResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.RenewDelegationToken(ctx, args.TokenStrForm); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renew_delegation_token: " + err2.Error())
    oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("renew_delegation_token", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveMetastoreProcessorCancelDelegationToken struct {
  handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCancelDelegationToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveMetastoreCancelDelegationTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveMetastoreCancelDelegationTokenResult{}
  var err2 error
  if err2 = p.handler.CancelDelegationToken(ctx, args.TokenStrForm); err2 != nil {
  switch v := err2.(type) {
    case *MetaException:
  result.O1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancel_delegation_token: " + err2.Error())
    oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("cancel_delegation_token", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Database
type ThriftHiveMetastoreCreateDatabaseArgs struct {
  Database *Database `thrift:"database,1" db:"database" json:"database"`
}

func NewThriftHiveMetastoreCreateDatabaseArgs() *ThriftHiveMetastoreCreateDatabaseArgs {
  return &ThriftHiveMetastoreCreateDatabaseArgs{}
}

var ThriftHiveMetastoreCreateDatabaseArgs_Database_DEFAULT *Database
func (p *ThriftHiveMetastoreCreateDatabaseArgs) GetDatabase() *Database {
  if !p.IsSetDatabase() {
    return ThriftHiveMetastoreCreateDatabaseArgs_Database_DEFAULT
  }
return p.Database
}
func (p *ThriftHiveMetastoreCreateDatabaseArgs) IsSetDatabase() bool {
  return p.Database != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Database = &Database{}
  if err := p.Database.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Database), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_database_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("database", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:database: ", p), err) }
  if err := p.Database.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Database), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:database: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreCreateDatabaseResult struct {
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreCreateDatabaseResult() *ThriftHiveMetastoreCreateDatabaseResult {
  return &ThriftHiveMetastoreCreateDatabaseResult{}
}

var ThriftHiveMetastoreCreateDatabaseResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateDatabaseResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateDatabaseResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateDatabaseResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateDatabaseResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateDatabaseResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateDatabaseResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateDatabaseResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateDatabaseResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreCreateDatabaseResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_database_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Name
type ThriftHiveMetastoreGetDatabaseArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewThriftHiveMetastoreGetDatabaseArgs() *ThriftHiveMetastoreGetDatabaseArgs {
  return &ThriftHiveMetastoreGetDatabaseArgs{}
}


func (p *ThriftHiveMetastoreGetDatabaseArgs) GetName() string {
  return p.Name
}
func (p *ThriftHiveMetastoreGetDatabaseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_database_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetDatabaseResult struct {
  Success *Database `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetDatabaseResult() *ThriftHiveMetastoreGetDatabaseResult {
  return &ThriftHiveMetastoreGetDatabaseResult{}
}

var ThriftHiveMetastoreGetDatabaseResult_Success_DEFAULT *Database
func (p *ThriftHiveMetastoreGetDatabaseResult) GetSuccess() *Database {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetDatabaseResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetDatabaseResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetDatabaseResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetDatabaseResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetDatabaseResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetDatabaseResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetDatabaseResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetDatabaseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Database{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_database_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabaseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - DeleteData
//  - Cascade
type ThriftHiveMetastoreDropDatabaseArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  DeleteData bool `thrift:"deleteData,2" db:"deleteData" json:"deleteData"`
  Cascade bool `thrift:"cascade,3" db:"cascade" json:"cascade"`
}

func NewThriftHiveMetastoreDropDatabaseArgs() *ThriftHiveMetastoreDropDatabaseArgs {
  return &ThriftHiveMetastoreDropDatabaseArgs{}
}


func (p *ThriftHiveMetastoreDropDatabaseArgs) GetName() string {
  return p.Name
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) GetDeleteData() bool {
  return p.DeleteData
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) GetCascade() bool {
  return p.Cascade
}
func (p *ThriftHiveMetastoreDropDatabaseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Cascade = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_database_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deleteData: ", p), err) }
  if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cascade", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cascade: ", p), err) }
  if err := oprot.WriteBool(bool(p.Cascade)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cascade (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cascade: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreDropDatabaseResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidOperationException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreDropDatabaseResult() *ThriftHiveMetastoreDropDatabaseResult {
  return &ThriftHiveMetastoreDropDatabaseResult{}
}

var ThriftHiveMetastoreDropDatabaseResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropDatabaseResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropDatabaseResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropDatabaseResult_O2_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreDropDatabaseResult) GetO2() *InvalidOperationException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropDatabaseResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreDropDatabaseResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropDatabaseResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDropDatabaseResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreDropDatabaseResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &InvalidOperationException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_database_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Pattern
type ThriftHiveMetastoreGetDatabasesArgs struct {
  Pattern string `thrift:"pattern,1" db:"pattern" json:"pattern"`
}

func NewThriftHiveMetastoreGetDatabasesArgs() *ThriftHiveMetastoreGetDatabasesArgs {
  return &ThriftHiveMetastoreGetDatabasesArgs{}
}


func (p *ThriftHiveMetastoreGetDatabasesArgs) GetPattern() string {
  return p.Pattern
}
func (p *ThriftHiveMetastoreGetDatabasesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Pattern = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_databases_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pattern: ", p), err) }
  if err := oprot.WriteString(string(p.Pattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pattern (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pattern: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetDatabasesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDatabasesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetDatabasesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetDatabasesResult() *ThriftHiveMetastoreGetDatabasesResult {
  return &ThriftHiveMetastoreGetDatabasesResult{}
}

var ThriftHiveMetastoreGetDatabasesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetDatabasesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetDatabasesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetDatabasesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetDatabasesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetDatabasesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem186 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem186 = v
}
    p.Success = append(p.Success, _elem186)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_databases_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDatabasesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDatabasesResult(%+v)", *p)
}

type ThriftHiveMetastoreGetAllDatabasesArgs struct {
}

func NewThriftHiveMetastoreGetAllDatabasesArgs() *ThriftHiveMetastoreGetAllDatabasesArgs {
  return &ThriftHiveMetastoreGetAllDatabasesArgs{}
}

func (p *ThriftHiveMetastoreGetAllDatabasesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_all_databases_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllDatabasesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetAllDatabasesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetAllDatabasesResult() *ThriftHiveMetastoreGetAllDatabasesResult {
  return &ThriftHiveMetastoreGetAllDatabasesResult{}
}

var ThriftHiveMetastoreGetAllDatabasesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetAllDatabasesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetAllDatabasesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetAllDatabasesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetAllDatabasesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetAllDatabasesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem187 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem187 = v
}
    p.Success = append(p.Success, _elem187)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_all_databases_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllDatabasesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllDatabasesResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Db
type ThriftHiveMetastoreAlterDatabaseArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  Db *Database `thrift:"db,2" db:"db" json:"db"`
}

func NewThriftHiveMetastoreAlterDatabaseArgs() *ThriftHiveMetastoreAlterDatabaseArgs {
  return &ThriftHiveMetastoreAlterDatabaseArgs{}
}


func (p *ThriftHiveMetastoreAlterDatabaseArgs) GetDbname() string {
  return p.Dbname
}
var ThriftHiveMetastoreAlterDatabaseArgs_Db_DEFAULT *Database
func (p *ThriftHiveMetastoreAlterDatabaseArgs) GetDb() *Database {
  if !p.IsSetDb() {
    return ThriftHiveMetastoreAlterDatabaseArgs_Db_DEFAULT
  }
return p.Db
}
func (p *ThriftHiveMetastoreAlterDatabaseArgs) IsSetDb() bool {
  return p.Db != nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Db = &Database{}
  if err := p.Db.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Db), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_database_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:db: ", p), err) }
  if err := p.Db.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Db), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:db: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterDatabaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterDatabaseArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterDatabaseResult struct {
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterDatabaseResult() *ThriftHiveMetastoreAlterDatabaseResult {
  return &ThriftHiveMetastoreAlterDatabaseResult{}
}

var ThriftHiveMetastoreAlterDatabaseResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterDatabaseResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterDatabaseResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterDatabaseResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreAlterDatabaseResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterDatabaseResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterDatabaseResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_database_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterDatabaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterDatabaseResult(%+v)", *p)
}

// Attributes:
//  - Name
type ThriftHiveMetastoreGetTypeArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewThriftHiveMetastoreGetTypeArgs() *ThriftHiveMetastoreGetTypeArgs {
  return &ThriftHiveMetastoreGetTypeArgs{}
}


func (p *ThriftHiveMetastoreGetTypeArgs) GetName() string {
  return p.Name
}
func (p *ThriftHiveMetastoreGetTypeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTypeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_type_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetTypeResult struct {
  Success *Type `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTypeResult() *ThriftHiveMetastoreGetTypeResult {
  return &ThriftHiveMetastoreGetTypeResult{}
}

var ThriftHiveMetastoreGetTypeResult_Success_DEFAULT *Type
func (p *ThriftHiveMetastoreGetTypeResult) GetSuccess() *Type {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetTypeResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetTypeResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTypeResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTypeResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTypeResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetTypeResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTypeResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTypeResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTypeResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTypeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Type{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_type_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTypeResult(%+v)", *p)
}

// Attributes:
//  - Type
type ThriftHiveMetastoreCreateTypeArgs struct {
  Type *Type `thrift:"type,1" db:"type" json:"type"`
}

func NewThriftHiveMetastoreCreateTypeArgs() *ThriftHiveMetastoreCreateTypeArgs {
  return &ThriftHiveMetastoreCreateTypeArgs{}
}

var ThriftHiveMetastoreCreateTypeArgs_Type_DEFAULT *Type
func (p *ThriftHiveMetastoreCreateTypeArgs) GetType() *Type {
  if !p.IsSetType() {
    return ThriftHiveMetastoreCreateTypeArgs_Type_DEFAULT
  }
return p.Type
}
func (p *ThriftHiveMetastoreCreateTypeArgs) IsSetType() bool {
  return p.Type != nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Type = &Type{}
  if err := p.Type.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Type), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_type_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := p.Type.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Type), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreCreateTypeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreCreateTypeResult() *ThriftHiveMetastoreCreateTypeResult {
  return &ThriftHiveMetastoreCreateTypeResult{}
}

var ThriftHiveMetastoreCreateTypeResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreCreateTypeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreCreateTypeResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreCreateTypeResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateTypeResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateTypeResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateTypeResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateTypeResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateTypeResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateTypeResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateTypeResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateTypeResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreCreateTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_type_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTypeResult(%+v)", *p)
}

// Attributes:
//  - Type
type ThriftHiveMetastoreDropTypeArgs struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
}

func NewThriftHiveMetastoreDropTypeArgs() *ThriftHiveMetastoreDropTypeArgs {
  return &ThriftHiveMetastoreDropTypeArgs{}
}


func (p *ThriftHiveMetastoreDropTypeArgs) GetType() string {
  return p.Type
}
func (p *ThriftHiveMetastoreDropTypeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTypeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_type_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropTypeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropTypeResult() *ThriftHiveMetastoreDropTypeResult {
  return &ThriftHiveMetastoreDropTypeResult{}
}

var ThriftHiveMetastoreDropTypeResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropTypeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropTypeResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropTypeResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropTypeResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropTypeResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropTypeResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropTypeResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropTypeResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreDropTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropTypeResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropTypeResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropTypeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTypeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_type_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropTypeResult(%+v)", *p)
}

// Attributes:
//  - Name
type ThriftHiveMetastoreGetTypeAllArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewThriftHiveMetastoreGetTypeAllArgs() *ThriftHiveMetastoreGetTypeAllArgs {
  return &ThriftHiveMetastoreGetTypeAllArgs{}
}


func (p *ThriftHiveMetastoreGetTypeAllArgs) GetName() string {
  return p.Name
}
func (p *ThriftHiveMetastoreGetTypeAllArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_type_all_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTypeAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTypeAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O2
type ThriftHiveMetastoreGetTypeAllResult struct {
  Success map[string]*Type `thrift:"success,0" db:"success" json:"success,omitempty"`
  O2 *MetaException `thrift:"o2,1" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTypeAllResult() *ThriftHiveMetastoreGetTypeAllResult {
  return &ThriftHiveMetastoreGetTypeAllResult{}
}

var ThriftHiveMetastoreGetTypeAllResult_Success_DEFAULT map[string]*Type

func (p *ThriftHiveMetastoreGetTypeAllResult) GetSuccess() map[string]*Type {
  return p.Success
}
var ThriftHiveMetastoreGetTypeAllResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTypeAllResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTypeAllResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetTypeAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Type, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key188 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key188 = v
}
    _val189 := &Type{}
    if err := _val189.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val189), err)
    }
    p.Success[_key188] = _val189
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_type_all_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTypeAllResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTypeAllResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTypeAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTypeAllResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
type ThriftHiveMetastoreGetFieldsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
}

func NewThriftHiveMetastoreGetFieldsArgs() *ThriftHiveMetastoreGetFieldsArgs {
  return &ThriftHiveMetastoreGetFieldsArgs{}
}


func (p *ThriftHiveMetastoreGetFieldsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetFieldsArgs) GetTableName() string {
  return p.TableName
}
func (p *ThriftHiveMetastoreGetFieldsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_fields_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFieldsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetFieldsResult struct {
  Success []*FieldSchema `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *UnknownTableException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetFieldsResult() *ThriftHiveMetastoreGetFieldsResult {
  return &ThriftHiveMetastoreGetFieldsResult{}
}

var ThriftHiveMetastoreGetFieldsResult_Success_DEFAULT []*FieldSchema

func (p *ThriftHiveMetastoreGetFieldsResult) GetSuccess() []*FieldSchema {
  return p.Success
}
var ThriftHiveMetastoreGetFieldsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetFieldsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetFieldsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetFieldsResult_O2_DEFAULT *UnknownTableException
func (p *ThriftHiveMetastoreGetFieldsResult) GetO2() *UnknownTableException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetFieldsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetFieldsResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreGetFieldsResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetFieldsResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreGetFieldsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem190 := &FieldSchema{}
    if err := _elem190.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem190), err)
    }
    p.Success = append(p.Success, _elem190)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &UnknownTableException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_fields_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetFieldsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetFieldsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TableName
type ThriftHiveMetastoreGetSchemaArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TableName string `thrift:"table_name,2" db:"table_name" json:"table_name"`
}

func NewThriftHiveMetastoreGetSchemaArgs() *ThriftHiveMetastoreGetSchemaArgs {
  return &ThriftHiveMetastoreGetSchemaArgs{}
}


func (p *ThriftHiveMetastoreGetSchemaArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetSchemaArgs) GetTableName() string {
  return p.TableName
}
func (p *ThriftHiveMetastoreGetSchemaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_schema_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_name: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetSchemaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetSchemaResult struct {
  Success []*FieldSchema `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *UnknownTableException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetSchemaResult() *ThriftHiveMetastoreGetSchemaResult {
  return &ThriftHiveMetastoreGetSchemaResult{}
}

var ThriftHiveMetastoreGetSchemaResult_Success_DEFAULT []*FieldSchema

func (p *ThriftHiveMetastoreGetSchemaResult) GetSuccess() []*FieldSchema {
  return p.Success
}
var ThriftHiveMetastoreGetSchemaResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetSchemaResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetSchemaResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetSchemaResult_O2_DEFAULT *UnknownTableException
func (p *ThriftHiveMetastoreGetSchemaResult) GetO2() *UnknownTableException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetSchemaResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetSchemaResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreGetSchemaResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetSchemaResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreGetSchemaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FieldSchema, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem191 := &FieldSchema{}
    if err := _elem191.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem191), err)
    }
    p.Success = append(p.Success, _elem191)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &UnknownTableException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_schema_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetSchemaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetSchemaResult(%+v)", *p)
}

// Attributes:
//  - Tbl
type ThriftHiveMetastoreCreateTableArgs struct {
  Tbl *Table `thrift:"tbl,1" db:"tbl" json:"tbl"`
}

func NewThriftHiveMetastoreCreateTableArgs() *ThriftHiveMetastoreCreateTableArgs {
  return &ThriftHiveMetastoreCreateTableArgs{}
}

var ThriftHiveMetastoreCreateTableArgs_Tbl_DEFAULT *Table
func (p *ThriftHiveMetastoreCreateTableArgs) GetTbl() *Table {
  if !p.IsSetTbl() {
    return ThriftHiveMetastoreCreateTableArgs_Tbl_DEFAULT
  }
return p.Tbl
}
func (p *ThriftHiveMetastoreCreateTableArgs) IsSetTbl() bool {
  return p.Tbl != nil
}

func (p *ThriftHiveMetastoreCreateTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Tbl = &Table{}
  if err := p.Tbl.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tbl), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tbl: ", p), err) }
  if err := p.Tbl.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tbl), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tbl: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTableArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreCreateTableResult struct {
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *NoSuchObjectException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreCreateTableResult() *ThriftHiveMetastoreCreateTableResult {
  return &ThriftHiveMetastoreCreateTableResult{}
}

var ThriftHiveMetastoreCreateTableResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateTableResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateTableResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateTableResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateTableResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateTableResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateTableResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateTableResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateTableResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreCreateTableResult_O4_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreCreateTableResult) GetO4() *NoSuchObjectException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreCreateTableResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreCreateTableResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreCreateTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult)  ReadField4(iprot thrift.TProtocol) error {
  p.O4 = &NoSuchObjectException{}
  if err := p.O4.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTableResult(%+v)", *p)
}

// Attributes:
//  - Tbl
//  - EnvironmentContext
type ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs struct {
  Tbl *Table `thrift:"tbl,1" db:"tbl" json:"tbl"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,2" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreCreateTableWithEnvironmentContextArgs() *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs{}
}

var ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs_Tbl_DEFAULT *Table
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) GetTbl() *Table {
  if !p.IsSetTbl() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs_Tbl_DEFAULT
  }
return p.Tbl
}
var ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) IsSetTbl() bool {
  return p.Tbl != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Tbl = &Table{}
  if err := p.Tbl.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tbl), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_table_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tbl: ", p), err) }
  if err := p.Tbl.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tbl), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tbl: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTableWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreCreateTableWithEnvironmentContextResult struct {
  O1 *AlreadyExistsException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *NoSuchObjectException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreCreateTableWithEnvironmentContextResult() *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult {
  return &ThriftHiveMetastoreCreateTableWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O1_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) GetO1() *AlreadyExistsException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O4_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) GetO4() *NoSuchObjectException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreCreateTableWithEnvironmentContextResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &AlreadyExistsException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult)  ReadField4(iprot thrift.TProtocol) error {
  p.O4 = &NoSuchObjectException{}
  if err := p.O4.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_table_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateTableWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateTableWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Name
//  - DeleteData
type ThriftHiveMetastoreDropTableArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  DeleteData bool `thrift:"deleteData,3" db:"deleteData" json:"deleteData"`
}

func NewThriftHiveMetastoreDropTableArgs() *ThriftHiveMetastoreDropTableArgs {
  return &ThriftHiveMetastoreDropTableArgs{}
}


func (p *ThriftHiveMetastoreDropTableArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreDropTableArgs) GetName() string {
  return p.Name
}

func (p *ThriftHiveMetastoreDropTableArgs) GetDeleteData() bool {
  return p.DeleteData
}
func (p *ThriftHiveMetastoreDropTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTableArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deleteData: ", p), err) }
  if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropTableArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O3
type ThriftHiveMetastoreDropTableResult struct {
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O3 *MetaException `thrift:"o3,2" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreDropTableResult() *ThriftHiveMetastoreDropTableResult {
  return &ThriftHiveMetastoreDropTableResult{}
}

var ThriftHiveMetastoreDropTableResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropTableResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropTableResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropTableResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropTableResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDropTableResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreDropTableResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropTableResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDropTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTableResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropTableResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - Pattern
type ThriftHiveMetastoreGetTablesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  Pattern string `thrift:"pattern,2" db:"pattern" json:"pattern"`
}

func NewThriftHiveMetastoreGetTablesArgs() *ThriftHiveMetastoreGetTablesArgs {
  return &ThriftHiveMetastoreGetTablesArgs{}
}


func (p *ThriftHiveMetastoreGetTablesArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetTablesArgs) GetPattern() string {
  return p.Pattern
}
func (p *ThriftHiveMetastoreGetTablesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pattern = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_tables_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTablesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pattern: ", p), err) }
  if err := oprot.WriteString(string(p.Pattern)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pattern (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pattern: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTablesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetTablesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetTablesResult() *ThriftHiveMetastoreGetTablesResult {
  return &ThriftHiveMetastoreGetTablesResult{}
}

var ThriftHiveMetastoreGetTablesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetTablesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetTablesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTablesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTablesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetTablesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTablesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTablesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem192 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem192 = v
}
    p.Success = append(p.Success, _elem192)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_tables_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTablesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTablesResult(%+v)", *p)
}

// Attributes:
//  - DbName
type ThriftHiveMetastoreGetAllTablesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
}

func NewThriftHiveMetastoreGetAllTablesArgs() *ThriftHiveMetastoreGetAllTablesArgs {
  return &ThriftHiveMetastoreGetAllTablesArgs{}
}


func (p *ThriftHiveMetastoreGetAllTablesArgs) GetDbName() string {
  return p.DbName
}
func (p *ThriftHiveMetastoreGetAllTablesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_all_tables_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetAllTablesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetAllTablesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetAllTablesResult() *ThriftHiveMetastoreGetAllTablesResult {
  return &ThriftHiveMetastoreGetAllTablesResult{}
}

var ThriftHiveMetastoreGetAllTablesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetAllTablesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetAllTablesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetAllTablesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetAllTablesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetAllTablesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem193 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem193 = v
}
    p.Success = append(p.Success, _elem193)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_all_tables_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetAllTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetAllTablesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetAllTablesResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - TblName
type ThriftHiveMetastoreGetTableArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
}

func NewThriftHiveMetastoreGetTableArgs() *ThriftHiveMetastoreGetTableArgs {
  return &ThriftHiveMetastoreGetTableArgs{}
}


func (p *ThriftHiveMetastoreGetTableArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreGetTableArgs) GetTblName() string {
  return p.TblName
}
func (p *ThriftHiveMetastoreGetTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetTableResult struct {
  Success *Table `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetTableResult() *ThriftHiveMetastoreGetTableResult {
  return &ThriftHiveMetastoreGetTableResult{}
}

var ThriftHiveMetastoreGetTableResult_Success_DEFAULT *Table
func (p *ThriftHiveMetastoreGetTableResult) GetSuccess() *Table {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetTableResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetTableResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTableResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTableResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTableResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetTableResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTableResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetTableResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Table{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - TblNames
type ThriftHiveMetastoreGetTableObjectsByNameArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  TblNames []string `thrift:"tbl_names,2" db:"tbl_names" json:"tbl_names"`
}

func NewThriftHiveMetastoreGetTableObjectsByNameArgs() *ThriftHiveMetastoreGetTableObjectsByNameArgs {
  return &ThriftHiveMetastoreGetTableObjectsByNameArgs{}
}


func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) GetTblNames() []string {
  return p.TblNames
}
func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TblNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem194 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem194 = v
}
    p.TblNames = append(p.TblNames, _elem194)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_objects_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_names", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.TblNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TblNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableObjectsByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetTableObjectsByNameResult struct {
  Success []*Table `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidOperationException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetTableObjectsByNameResult() *ThriftHiveMetastoreGetTableObjectsByNameResult {
  return &ThriftHiveMetastoreGetTableObjectsByNameResult{}
}

var ThriftHiveMetastoreGetTableObjectsByNameResult_Success_DEFAULT []*Table

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) GetSuccess() []*Table {
  return p.Success
}
var ThriftHiveMetastoreGetTableObjectsByNameResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTableObjectsByNameResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTableObjectsByNameResult_O2_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) GetO2() *InvalidOperationException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTableObjectsByNameResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetTableObjectsByNameResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetTableObjectsByNameResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Table, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem195 := &Table{}
    if err := _elem195.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem195), err)
    }
    p.Success = append(p.Success, _elem195)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &InvalidOperationException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_objects_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableObjectsByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableObjectsByNameResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - Filter
//  - MaxTables
type ThriftHiveMetastoreGetTableNamesByFilterArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  Filter string `thrift:"filter,2" db:"filter" json:"filter"`
  MaxTables int16 `thrift:"max_tables,3" db:"max_tables" json:"max_tables"`
}

func NewThriftHiveMetastoreGetTableNamesByFilterArgs() *ThriftHiveMetastoreGetTableNamesByFilterArgs {
  return &ThriftHiveMetastoreGetTableNamesByFilterArgs{
MaxTables: -1,
}
}


func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) GetFilter() string {
  return p.Filter
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) GetMaxTables() int16 {
  return p.MaxTables
}
func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxTables = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_names_by_filter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("filter", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:filter: ", p), err) }
  if err := oprot.WriteString(string(p.Filter)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:filter: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_tables", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_tables: ", p), err) }
  if err := oprot.WriteI16(int16(p.MaxTables)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_tables (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_tables: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableNamesByFilterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreGetTableNamesByFilterResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidOperationException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreGetTableNamesByFilterResult() *ThriftHiveMetastoreGetTableNamesByFilterResult {
  return &ThriftHiveMetastoreGetTableNamesByFilterResult{}
}

var ThriftHiveMetastoreGetTableNamesByFilterResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetTableNamesByFilterResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTableNamesByFilterResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTableNamesByFilterResult_O2_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) GetO2() *InvalidOperationException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTableNamesByFilterResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetTableNamesByFilterResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetTableNamesByFilterResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem196 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem196 = v
}
    p.Success = append(p.Success, _elem196)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &InvalidOperationException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_names_by_filter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableNamesByFilterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableNamesByFilterResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - TblName
//  - NewTbl_
type ThriftHiveMetastoreAlterTableArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewTbl_ *Table `thrift:"new_tbl,3" db:"new_tbl" json:"new_tbl"`
}

func NewThriftHiveMetastoreAlterTableArgs() *ThriftHiveMetastoreAlterTableArgs {
  return &ThriftHiveMetastoreAlterTableArgs{}
}


func (p *ThriftHiveMetastoreAlterTableArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreAlterTableArgs) GetTblName() string {
  return p.TblName
}
var ThriftHiveMetastoreAlterTableArgs_NewTbl__DEFAULT *Table
func (p *ThriftHiveMetastoreAlterTableArgs) GetNewTbl_() *Table {
  if !p.IsSetNewTbl_() {
    return ThriftHiveMetastoreAlterTableArgs_NewTbl__DEFAULT
  }
return p.NewTbl_
}
func (p *ThriftHiveMetastoreAlterTableArgs) IsSetNewTbl_() bool {
  return p.NewTbl_ != nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.NewTbl_ = &Table{}
  if err := p.NewTbl_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewTbl_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_table_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_tbl", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_tbl: ", p), err) }
  if err := p.NewTbl_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewTbl_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_tbl: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterTableArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterTableResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterTableResult() *ThriftHiveMetastoreAlterTableResult {
  return &ThriftHiveMetastoreAlterTableResult{}
}

var ThriftHiveMetastoreAlterTableResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterTableResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterTableResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterTableResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterTableResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterTableResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterTableResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterTableResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterTableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_table_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterTableResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterTableResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - TblName
//  - NewTbl_
//  - EnvironmentContext
type ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewTbl_ *Table `thrift:"new_tbl,3" db:"new_tbl" json:"new_tbl"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreAlterTableWithEnvironmentContextArgs() *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) GetTblName() string {
  return p.TblName
}
var ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs_NewTbl__DEFAULT *Table
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) GetNewTbl_() *Table {
  if !p.IsSetNewTbl_() {
    return ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs_NewTbl__DEFAULT
  }
return p.NewTbl_
}
var ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) IsSetNewTbl_() bool {
  return p.NewTbl_ != nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.NewTbl_ = &Table{}
  if err := p.NewTbl_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewTbl_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_table_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_tbl", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_tbl: ", p), err) }
  if err := p.NewTbl_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewTbl_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_tbl: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterTableWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterTableWithEnvironmentContextResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterTableWithEnvironmentContextResult() *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult {
  return &ThriftHiveMetastoreAlterTableWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreAlterTableWithEnvironmentContextResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterTableWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterTableWithEnvironmentContextResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterTableWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_table_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterTableWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterTableWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - NewPart_
type ThriftHiveMetastoreAddPartitionArgs struct {
  NewPart_ *Partition `thrift:"new_part,1" db:"new_part" json:"new_part"`
}

func NewThriftHiveMetastoreAddPartitionArgs() *ThriftHiveMetastoreAddPartitionArgs {
  return &ThriftHiveMetastoreAddPartitionArgs{}
}

var ThriftHiveMetastoreAddPartitionArgs_NewPart__DEFAULT *Partition
func (p *ThriftHiveMetastoreAddPartitionArgs) GetNewPart_() *Partition {
  if !p.IsSetNewPart_() {
    return ThriftHiveMetastoreAddPartitionArgs_NewPart__DEFAULT
  }
return p.NewPart_
}
func (p *ThriftHiveMetastoreAddPartitionArgs) IsSetNewPart_() bool {
  return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.NewPart_ = &Partition{}
  if err := p.NewPart_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:new_part: ", p), err) }
  if err := p.NewPart_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:new_part: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddPartitionResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddPartitionResult() *ThriftHiveMetastoreAddPartitionResult {
  return &ThriftHiveMetastoreAddPartitionResult{}
}

var ThriftHiveMetastoreAddPartitionResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreAddPartitionResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddPartitionResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAddPartitionResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAddPartitionResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddPartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddPartitionResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAddPartitionResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddPartitionResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAddPartitionResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddPartitionResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAddPartitionResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAddPartitionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionResult(%+v)", *p)
}

// Attributes:
//  - NewPart_
//  - EnvironmentContext
type ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs struct {
  NewPart_ *Partition `thrift:"new_part,1" db:"new_part" json:"new_part"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,2" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs() *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs{}
}

var ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs_NewPart__DEFAULT *Partition
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) GetNewPart_() *Partition {
  if !p.IsSetNewPart_() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs_NewPart__DEFAULT
  }
return p.NewPart_
}
var ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) IsSetNewPart_() bool {
  return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.NewPart_ = &Partition{}
  if err := p.NewPart_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_partition_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:new_part: ", p), err) }
  if err := p.NewPart_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:new_part: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddPartitionWithEnvironmentContextResult() *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult {
  return &ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_partition_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - NewParts_
type ThriftHiveMetastoreAddPartitionsArgs struct {
  NewParts_ []*Partition `thrift:"new_parts,1" db:"new_parts" json:"new_parts"`
}

func NewThriftHiveMetastoreAddPartitionsArgs() *ThriftHiveMetastoreAddPartitionsArgs {
  return &ThriftHiveMetastoreAddPartitionsArgs{}
}


func (p *ThriftHiveMetastoreAddPartitionsArgs) GetNewParts_() []*Partition {
  return p.NewParts_
}
func (p *ThriftHiveMetastoreAddPartitionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.NewParts_ =  tSlice
  for i := 0; i < size; i ++ {
    _elem197 := &Partition{}
    if err := _elem197.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem197), err)
    }
    p.NewParts_ = append(p.NewParts_, _elem197)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_partitions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_parts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:new_parts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NewParts_)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NewParts_ {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:new_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddPartitionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddPartitionsResult() *ThriftHiveMetastoreAddPartitionsResult {
  return &ThriftHiveMetastoreAddPartitionsResult{}
}

var ThriftHiveMetastoreAddPartitionsResult_Success_DEFAULT int32
func (p *ThriftHiveMetastoreAddPartitionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddPartitionsResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreAddPartitionsResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAddPartitionsResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddPartitionsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddPartitionsResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAddPartitionsResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddPartitionsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAddPartitionsResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddPartitionsResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAddPartitionsResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAddPartitionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_partitions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddPartitionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddPartitionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddPartitionsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
type ThriftHiveMetastoreAppendPartitionArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
}

func NewThriftHiveMetastoreAppendPartitionArgs() *ThriftHiveMetastoreAppendPartitionArgs {
  return &ThriftHiveMetastoreAppendPartitionArgs{}
}


func (p *ThriftHiveMetastoreAppendPartitionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) GetPartVals() []string {
  return p.PartVals
}
func (p *ThriftHiveMetastoreAppendPartitionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem198 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem198 = v
}
    p.PartVals = append(p.PartVals, _elem198)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("append_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAppendPartitionResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAppendPartitionResult() *ThriftHiveMetastoreAppendPartitionResult {
  return &ThriftHiveMetastoreAppendPartitionResult{}
}

var ThriftHiveMetastoreAppendPartitionResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreAppendPartitionResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAppendPartitionResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAppendPartitionResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAppendPartitionResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAppendPartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAppendPartitionResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAppendPartitionResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAppendPartitionResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAppendPartitionResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAppendPartitionResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAppendPartitionResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("append_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
type ThriftHiveMetastoreAppendPartitionByNameArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
}

func NewThriftHiveMetastoreAppendPartitionByNameArgs() *ThriftHiveMetastoreAppendPartitionByNameArgs {
  return &ThriftHiveMetastoreAppendPartitionByNameArgs{}
}


func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) GetPartName() string {
  return p.PartName
}
func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("append_partition_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAppendPartitionByNameResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAppendPartitionByNameResult() *ThriftHiveMetastoreAppendPartitionByNameResult {
  return &ThriftHiveMetastoreAppendPartitionByNameResult{}
}

var ThriftHiveMetastoreAppendPartitionByNameResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAppendPartitionByNameResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAppendPartitionByNameResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAppendPartitionByNameResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAppendPartitionByNameResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAppendPartitionByNameResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAppendPartitionByNameResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAppendPartitionByNameResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAppendPartitionByNameResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("append_partition_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAppendPartitionByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAppendPartitionByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
type ThriftHiveMetastoreDropPartitionArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  DeleteData bool `thrift:"deleteData,4" db:"deleteData" json:"deleteData"`
}

func NewThriftHiveMetastoreDropPartitionArgs() *ThriftHiveMetastoreDropPartitionArgs {
  return &ThriftHiveMetastoreDropPartitionArgs{}
}


func (p *ThriftHiveMetastoreDropPartitionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDropPartitionArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDropPartitionArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreDropPartitionArgs) GetDeleteData() bool {
  return p.DeleteData
}
func (p *ThriftHiveMetastoreDropPartitionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem199 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem199 = v
}
    p.PartVals = append(p.PartVals, _elem199)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err) }
  if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropPartitionResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropPartitionResult() *ThriftHiveMetastoreDropPartitionResult {
  return &ThriftHiveMetastoreDropPartitionResult{}
}

var ThriftHiveMetastoreDropPartitionResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropPartitionResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropPartitionResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropPartitionResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropPartitionResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropPartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropPartitionResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropPartitionResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropPartitionResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreDropPartitionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
type ThriftHiveMetastoreDropPartitionByNameArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
  DeleteData bool `thrift:"deleteData,4" db:"deleteData" json:"deleteData"`
}

func NewThriftHiveMetastoreDropPartitionByNameArgs() *ThriftHiveMetastoreDropPartitionByNameArgs {
  return &ThriftHiveMetastoreDropPartitionByNameArgs{}
}


func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetPartName() string {
  return p.PartName
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) GetDeleteData() bool {
  return p.DeleteData
}
func (p *ThriftHiveMetastoreDropPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_partition_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err) }
  if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropPartitionByNameResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropPartitionByNameResult() *ThriftHiveMetastoreDropPartitionByNameResult {
  return &ThriftHiveMetastoreDropPartitionByNameResult{}
}

var ThriftHiveMetastoreDropPartitionByNameResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropPartitionByNameResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropPartitionByNameResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropPartitionByNameResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropPartitionByNameResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropPartitionByNameResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropPartitionByNameResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropPartitionByNameResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropPartitionByNameResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreDropPartitionByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_partition_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropPartitionByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropPartitionByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
type ThriftHiveMetastoreGetPartitionArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
}

func NewThriftHiveMetastoreGetPartitionArgs() *ThriftHiveMetastoreGetPartitionArgs {
  return &ThriftHiveMetastoreGetPartitionArgs{}
}


func (p *ThriftHiveMetastoreGetPartitionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionArgs) GetPartVals() []string {
  return p.PartVals
}
func (p *ThriftHiveMetastoreGetPartitionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem200 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem200 = v
}
    p.PartVals = append(p.PartVals, _elem200)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionResult() *ThriftHiveMetastoreGetPartitionResult {
  return &ThriftHiveMetastoreGetPartitionResult{}
}

var ThriftHiveMetastoreGetPartitionResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreGetPartitionResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPartitionResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPartitionResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPartitionWithAuthArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  UserName string `thrift:"user_name,4" db:"user_name" json:"user_name"`
  GroupNames []string `thrift:"group_names,5" db:"group_names" json:"group_names"`
}

func NewThriftHiveMetastoreGetPartitionWithAuthArgs() *ThriftHiveMetastoreGetPartitionWithAuthArgs {
  return &ThriftHiveMetastoreGetPartitionWithAuthArgs{}
}


func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetUserName() string {
  return p.UserName
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) GetGroupNames() []string {
  return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem201 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem201 = v
}
    p.PartVals = append(p.PartVals, _elem201)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem202 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem202 = v
}
    p.GroupNames = append(p.GroupNames, _elem202)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_with_auth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_name: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:group_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:group_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionWithAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionWithAuthResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionWithAuthResult() *ThriftHiveMetastoreGetPartitionWithAuthResult {
  return &ThriftHiveMetastoreGetPartitionWithAuthResult{}
}

var ThriftHiveMetastoreGetPartitionWithAuthResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPartitionWithAuthResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPartitionWithAuthResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionWithAuthResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionWithAuthResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionWithAuthResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_with_auth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionWithAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionWithAuthResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
type ThriftHiveMetastoreGetPartitionByNameArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
}

func NewThriftHiveMetastoreGetPartitionByNameArgs() *ThriftHiveMetastoreGetPartitionByNameArgs {
  return &ThriftHiveMetastoreGetPartitionByNameArgs{}
}


func (p *ThriftHiveMetastoreGetPartitionByNameArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) GetPartName() string {
  return p.PartName
}
func (p *ThriftHiveMetastoreGetPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionByNameResult struct {
  Success *Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionByNameResult() *ThriftHiveMetastoreGetPartitionByNameResult {
  return &ThriftHiveMetastoreGetPartitionByNameResult{}
}

var ThriftHiveMetastoreGetPartitionByNameResult_Success_DEFAULT *Partition
func (p *ThriftHiveMetastoreGetPartitionByNameResult) GetSuccess() *Partition {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPartitionByNameResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPartitionByNameResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionByNameResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionByNameResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionByNameResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionByNameResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionByNameResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Partition{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxParts
type ThriftHiveMetastoreGetPartitionsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  MaxParts int16 `thrift:"max_parts,3" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionsArgs() *ThriftHiveMetastoreGetPartitionsArgs {
  return &ThriftHiveMetastoreGetPartitionsArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) GetMaxParts() int16 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_parts: ", p), err) }
  if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsResult() *ThriftHiveMetastoreGetPartitionsResult {
  return &ThriftHiveMetastoreGetPartitionsResult{}
}

var ThriftHiveMetastoreGetPartitionsResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem203 := &Partition{}
    if err := _elem203.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem203), err)
    }
    p.Success = append(p.Success, _elem203)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxParts
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPartitionsWithAuthArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  MaxParts int16 `thrift:"max_parts,3" db:"max_parts" json:"max_parts"`
  UserName string `thrift:"user_name,4" db:"user_name" json:"user_name"`
  GroupNames []string `thrift:"group_names,5" db:"group_names" json:"group_names"`
}

func NewThriftHiveMetastoreGetPartitionsWithAuthArgs() *ThriftHiveMetastoreGetPartitionsWithAuthArgs {
  return &ThriftHiveMetastoreGetPartitionsWithAuthArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetMaxParts() int16 {
  return p.MaxParts
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetUserName() string {
  return p.UserName
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) GetGroupNames() []string {
  return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem204 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem204 = v
}
    p.GroupNames = append(p.GroupNames, _elem204)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_with_auth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_parts: ", p), err) }
  if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_name: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:group_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:group_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsWithAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsWithAuthResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsWithAuthResult() *ThriftHiveMetastoreGetPartitionsWithAuthResult {
  return &ThriftHiveMetastoreGetPartitionsWithAuthResult{}
}

var ThriftHiveMetastoreGetPartitionsWithAuthResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsWithAuthResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsWithAuthResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsWithAuthResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsWithAuthResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem205 := &Partition{}
    if err := _elem205.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem205), err)
    }
    p.Success = append(p.Success, _elem205)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_with_auth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsWithAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsWithAuthResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxParts
type ThriftHiveMetastoreGetPartitionNamesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  MaxParts int16 `thrift:"max_parts,3" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionNamesArgs() *ThriftHiveMetastoreGetPartitionNamesArgs {
  return &ThriftHiveMetastoreGetPartitionNamesArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionNamesArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) GetMaxParts() int16 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_names_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_parts: ", p), err) }
  if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O2
type ThriftHiveMetastoreGetPartitionNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O2 *MetaException `thrift:"o2,1" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionNamesResult() *ThriftHiveMetastoreGetPartitionNamesResult {
  return &ThriftHiveMetastoreGetPartitionNamesResult{}
}

var ThriftHiveMetastoreGetPartitionNamesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetPartitionNamesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionNamesResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionNamesResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionNamesResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem206 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem206 = v
}
    p.Success = append(p.Success, _elem206)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_names_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
type ThriftHiveMetastoreGetPartitionsPsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  MaxParts int16 `thrift:"max_parts,4" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionsPsArgs() *ThriftHiveMetastoreGetPartitionsPsArgs {
  return &ThriftHiveMetastoreGetPartitionsPsArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) GetMaxParts() int16 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionsPsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem207 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem207 = v
}
    p.PartVals = append(p.PartVals, _elem207)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_ps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err) }
  if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsPsResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsPsResult() *ThriftHiveMetastoreGetPartitionsPsResult {
  return &ThriftHiveMetastoreGetPartitionsPsResult{}
}

var ThriftHiveMetastoreGetPartitionsPsResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsPsResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsPsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsPsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsPsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsPsResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsPsResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsPsResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsPsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem208 := &Partition{}
    if err := _elem208.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem208), err)
    }
    p.Success = append(p.Success, _elem208)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_ps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPartitionsPsWithAuthArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  MaxParts int16 `thrift:"max_parts,4" db:"max_parts" json:"max_parts"`
  UserName string `thrift:"user_name,5" db:"user_name" json:"user_name"`
  GroupNames []string `thrift:"group_names,6" db:"group_names" json:"group_names"`
}

func NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs() *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs {
  return &ThriftHiveMetastoreGetPartitionsPsWithAuthArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetMaxParts() int16 {
  return p.MaxParts
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetUserName() string {
  return p.UserName
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) GetGroupNames() []string {
  return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem209 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem209 = v
}
    p.PartVals = append(p.PartVals, _elem209)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem210 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem210 = v
}
    p.GroupNames = append(p.GroupNames, _elem210)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_ps_with_auth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err) }
  if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:user_name: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:user_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:group_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:group_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsWithAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsPsWithAuthResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsPsWithAuthResult() *ThriftHiveMetastoreGetPartitionsPsWithAuthResult {
  return &ThriftHiveMetastoreGetPartitionsPsWithAuthResult{}
}

var ThriftHiveMetastoreGetPartitionsPsWithAuthResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsPsWithAuthResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem211 := &Partition{}
    if err := _elem211.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem211), err)
    }
    p.Success = append(p.Success, _elem211)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_ps_with_auth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsPsWithAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsPsWithAuthResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
type ThriftHiveMetastoreGetPartitionNamesPsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  MaxParts int16 `thrift:"max_parts,4" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionNamesPsArgs() *ThriftHiveMetastoreGetPartitionNamesPsArgs {
  return &ThriftHiveMetastoreGetPartitionNamesPsArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetPartVals() []string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) GetMaxParts() int16 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem212 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem212 = v
}
    p.PartVals = append(p.PartVals, _elem212)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_names_ps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err) }
  if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesPsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionNamesPsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionNamesPsResult() *ThriftHiveMetastoreGetPartitionNamesPsResult {
  return &ThriftHiveMetastoreGetPartitionNamesPsResult{}
}

var ThriftHiveMetastoreGetPartitionNamesPsResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionNamesPsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionNamesPsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionNamesPsResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionNamesPsResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem213 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem213 = v
}
    p.Success = append(p.Success, _elem213)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_names_ps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionNamesPsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionNamesPsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - Filter
//  - MaxParts
type ThriftHiveMetastoreGetPartitionsByFilterArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  Filter string `thrift:"filter,3" db:"filter" json:"filter"`
  MaxParts int16 `thrift:"max_parts,4" db:"max_parts" json:"max_parts"`
}

func NewThriftHiveMetastoreGetPartitionsByFilterArgs() *ThriftHiveMetastoreGetPartitionsByFilterArgs {
  return &ThriftHiveMetastoreGetPartitionsByFilterArgs{
MaxParts: -1,
}
}


func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetFilter() string {
  return p.Filter
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) GetMaxParts() int16 {
  return p.MaxParts
}
func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxParts = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_by_filter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("filter", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:filter: ", p), err) }
  if err := oprot.WriteString(string(p.Filter)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:filter: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_parts: ", p), err) }
  if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_parts (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByFilterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsByFilterResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsByFilterResult() *ThriftHiveMetastoreGetPartitionsByFilterResult {
  return &ThriftHiveMetastoreGetPartitionsByFilterResult{}
}

var ThriftHiveMetastoreGetPartitionsByFilterResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsByFilterResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsByFilterResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsByFilterResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsByFilterResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem214 := &Partition{}
    if err := _elem214.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem214), err)
    }
    p.Success = append(p.Success, _elem214)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_by_filter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByFilterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByFilterResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - Names
type ThriftHiveMetastoreGetPartitionsByNamesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  Names []string `thrift:"names,3" db:"names" json:"names"`
}

func NewThriftHiveMetastoreGetPartitionsByNamesArgs() *ThriftHiveMetastoreGetPartitionsByNamesArgs {
  return &ThriftHiveMetastoreGetPartitionsByNamesArgs{}
}


func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) GetNames() []string {
  return p.Names
}
func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Names =  tSlice
  for i := 0; i < size; i ++ {
var _elem215 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem215 = v
}
    p.Names = append(p.Names, _elem215)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_by_names_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("names", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Names)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Names {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetPartitionsByNamesResult struct {
  Success []*Partition `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionsByNamesResult() *ThriftHiveMetastoreGetPartitionsByNamesResult {
  return &ThriftHiveMetastoreGetPartitionsByNamesResult{}
}

var ThriftHiveMetastoreGetPartitionsByNamesResult_Success_DEFAULT []*Partition

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) GetSuccess() []*Partition {
  return p.Success
}
var ThriftHiveMetastoreGetPartitionsByNamesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionsByNamesResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionsByNamesResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionsByNamesResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem216 := &Partition{}
    if err := _elem216.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem216), err)
    }
    p.Success = append(p.Success, _elem216)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partitions_by_names_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionsByNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionsByNamesResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - NewPart_
type ThriftHiveMetastoreAlterPartitionArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewPart_ *Partition `thrift:"new_part,3" db:"new_part" json:"new_part"`
}

func NewThriftHiveMetastoreAlterPartitionArgs() *ThriftHiveMetastoreAlterPartitionArgs {
  return &ThriftHiveMetastoreAlterPartitionArgs{}
}


func (p *ThriftHiveMetastoreAlterPartitionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) GetTblName() string {
  return p.TblName
}
var ThriftHiveMetastoreAlterPartitionArgs_NewPart__DEFAULT *Partition
func (p *ThriftHiveMetastoreAlterPartitionArgs) GetNewPart_() *Partition {
  if !p.IsSetNewPart_() {
    return ThriftHiveMetastoreAlterPartitionArgs_NewPart__DEFAULT
  }
return p.NewPart_
}
func (p *ThriftHiveMetastoreAlterPartitionArgs) IsSetNewPart_() bool {
  return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.NewPart_ = &Partition{}
  if err := p.NewPart_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_part: ", p), err) }
  if err := p.NewPart_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_part: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterPartitionResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterPartitionResult() *ThriftHiveMetastoreAlterPartitionResult {
  return &ThriftHiveMetastoreAlterPartitionResult{}
}

var ThriftHiveMetastoreAlterPartitionResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterPartitionResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterPartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterPartitionResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterPartitionResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterPartitionResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterPartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - NewParts_
type ThriftHiveMetastoreAlterPartitionsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewParts_ []*Partition `thrift:"new_parts,3" db:"new_parts" json:"new_parts"`
}

func NewThriftHiveMetastoreAlterPartitionsArgs() *ThriftHiveMetastoreAlterPartitionsArgs {
  return &ThriftHiveMetastoreAlterPartitionsArgs{}
}


func (p *ThriftHiveMetastoreAlterPartitionsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) GetNewParts_() []*Partition {
  return p.NewParts_
}
func (p *ThriftHiveMetastoreAlterPartitionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Partition, 0, size)
  p.NewParts_ =  tSlice
  for i := 0; i < size; i ++ {
    _elem217 := &Partition{}
    if err := _elem217.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem217), err)
    }
    p.NewParts_ = append(p.NewParts_, _elem217)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_partitions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_parts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_parts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NewParts_)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.NewParts_ {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_parts: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionsArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterPartitionsResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterPartitionsResult() *ThriftHiveMetastoreAlterPartitionsResult {
  return &ThriftHiveMetastoreAlterPartitionsResult{}
}

var ThriftHiveMetastoreAlterPartitionsResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterPartitionsResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterPartitionsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterPartitionsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterPartitionsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterPartitionsResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterPartitionsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_partitions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - NewPart_
//  - EnvironmentContext
type ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  NewPart_ *Partition `thrift:"new_part,3" db:"new_part" json:"new_part"`
  EnvironmentContext *EnvironmentContext `thrift:"environment_context,4" db:"environment_context" json:"environment_context"`
}

func NewThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs() *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs {
  return &ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs{}
}


func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) GetTblName() string {
  return p.TblName
}
var ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs_NewPart__DEFAULT *Partition
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) GetNewPart_() *Partition {
  if !p.IsSetNewPart_() {
    return ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs_NewPart__DEFAULT
  }
return p.NewPart_
}
var ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT *EnvironmentContext
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) GetEnvironmentContext() *EnvironmentContext {
  if !p.IsSetEnvironmentContext() {
    return ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs_EnvironmentContext_DEFAULT
  }
return p.EnvironmentContext
}
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) IsSetNewPart_() bool {
  return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) IsSetEnvironmentContext() bool {
  return p.EnvironmentContext != nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.NewPart_ = &Partition{}
  if err := p.NewPart_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.EnvironmentContext = &EnvironmentContext{}
  if err := p.EnvironmentContext.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EnvironmentContext), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_partition_with_environment_context_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_part: ", p), err) }
  if err := p.NewPart_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_part: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("environment_context", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:environment_context: ", p), err) }
  if err := p.EnvironmentContext.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EnvironmentContext), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:environment_context: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionWithEnvironmentContextArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult() *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult {
  return &ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult{}
}

var ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_partition_with_environment_context_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterPartitionWithEnvironmentContextResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - NewPart_
type ThriftHiveMetastoreRenamePartitionArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals []string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  NewPart_ *Partition `thrift:"new_part,4" db:"new_part" json:"new_part"`
}

func NewThriftHiveMetastoreRenamePartitionArgs() *ThriftHiveMetastoreRenamePartitionArgs {
  return &ThriftHiveMetastoreRenamePartitionArgs{}
}


func (p *ThriftHiveMetastoreRenamePartitionArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) GetPartVals() []string {
  return p.PartVals
}
var ThriftHiveMetastoreRenamePartitionArgs_NewPart__DEFAULT *Partition
func (p *ThriftHiveMetastoreRenamePartitionArgs) GetNewPart_() *Partition {
  if !p.IsSetNewPart_() {
    return ThriftHiveMetastoreRenamePartitionArgs_NewPart__DEFAULT
  }
return p.NewPart_
}
func (p *ThriftHiveMetastoreRenamePartitionArgs) IsSetNewPart_() bool {
  return p.NewPart_ != nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PartVals =  tSlice
  for i := 0; i < size; i ++ {
var _elem218 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem218 = v
}
    p.PartVals = append(p.PartVals, _elem218)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.NewPart_ = &Partition{}
  if err := p.NewPart_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewPart_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rename_partition_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartVals {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:new_part: ", p), err) }
  if err := p.NewPart_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewPart_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:new_part: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRenamePartitionArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreRenamePartitionResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreRenamePartitionResult() *ThriftHiveMetastoreRenamePartitionResult {
  return &ThriftHiveMetastoreRenamePartitionResult{}
}

var ThriftHiveMetastoreRenamePartitionResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreRenamePartitionResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreRenamePartitionResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreRenamePartitionResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreRenamePartitionResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreRenamePartitionResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreRenamePartitionResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rename_partition_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRenamePartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRenamePartitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRenamePartitionResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - DefaultValue
type ThriftHiveMetastoreGetConfigValueArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  DefaultValue string `thrift:"defaultValue,2" db:"defaultValue" json:"defaultValue"`
}

func NewThriftHiveMetastoreGetConfigValueArgs() *ThriftHiveMetastoreGetConfigValueArgs {
  return &ThriftHiveMetastoreGetConfigValueArgs{}
}


func (p *ThriftHiveMetastoreGetConfigValueArgs) GetName() string {
  return p.Name
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) GetDefaultValue() string {
  return p.DefaultValue
}
func (p *ThriftHiveMetastoreGetConfigValueArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DefaultValue = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_config_value_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("defaultValue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:defaultValue: ", p), err) }
  if err := oprot.WriteString(string(p.DefaultValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.defaultValue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:defaultValue: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetConfigValueArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetConfigValueArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetConfigValueResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *ConfigValSecurityException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetConfigValueResult() *ThriftHiveMetastoreGetConfigValueResult {
  return &ThriftHiveMetastoreGetConfigValueResult{}
}

var ThriftHiveMetastoreGetConfigValueResult_Success_DEFAULT string
func (p *ThriftHiveMetastoreGetConfigValueResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetConfigValueResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreGetConfigValueResult_O1_DEFAULT *ConfigValSecurityException
func (p *ThriftHiveMetastoreGetConfigValueResult) GetO1() *ConfigValSecurityException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetConfigValueResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetConfigValueResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &ConfigValSecurityException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_config_value_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetConfigValueResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetConfigValueResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetConfigValueResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetConfigValueResult(%+v)", *p)
}

// Attributes:
//  - PartName
type ThriftHiveMetastorePartitionNameToValsArgs struct {
  PartName string `thrift:"part_name,1" db:"part_name" json:"part_name"`
}

func NewThriftHiveMetastorePartitionNameToValsArgs() *ThriftHiveMetastorePartitionNameToValsArgs {
  return &ThriftHiveMetastorePartitionNameToValsArgs{}
}


func (p *ThriftHiveMetastorePartitionNameToValsArgs) GetPartName() string {
  return p.PartName
}
func (p *ThriftHiveMetastorePartitionNameToValsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("partition_name_to_vals_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_name: ", p), err) }
  if err := oprot.WriteString(string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToValsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePartitionNameToValsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastorePartitionNameToValsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastorePartitionNameToValsResult() *ThriftHiveMetastorePartitionNameToValsResult {
  return &ThriftHiveMetastorePartitionNameToValsResult{}
}

var ThriftHiveMetastorePartitionNameToValsResult_Success_DEFAULT []string

func (p *ThriftHiveMetastorePartitionNameToValsResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastorePartitionNameToValsResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastorePartitionNameToValsResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastorePartitionNameToValsResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastorePartitionNameToValsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem219 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem219 = v
}
    p.Success = append(p.Success, _elem219)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("partition_name_to_vals_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToValsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePartitionNameToValsResult(%+v)", *p)
}

// Attributes:
//  - PartName
type ThriftHiveMetastorePartitionNameToSpecArgs struct {
  PartName string `thrift:"part_name,1" db:"part_name" json:"part_name"`
}

func NewThriftHiveMetastorePartitionNameToSpecArgs() *ThriftHiveMetastorePartitionNameToSpecArgs {
  return &ThriftHiveMetastorePartitionNameToSpecArgs{}
}


func (p *ThriftHiveMetastorePartitionNameToSpecArgs) GetPartName() string {
  return p.PartName
}
func (p *ThriftHiveMetastorePartitionNameToSpecArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("partition_name_to_spec_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_name: ", p), err) }
  if err := oprot.WriteString(string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToSpecArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePartitionNameToSpecArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastorePartitionNameToSpecResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastorePartitionNameToSpecResult() *ThriftHiveMetastorePartitionNameToSpecResult {
  return &ThriftHiveMetastorePartitionNameToSpecResult{}
}

var ThriftHiveMetastorePartitionNameToSpecResult_Success_DEFAULT map[string]string

func (p *ThriftHiveMetastorePartitionNameToSpecResult) GetSuccess() map[string]string {
  return p.Success
}
var ThriftHiveMetastorePartitionNameToSpecResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastorePartitionNameToSpecResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastorePartitionNameToSpecResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastorePartitionNameToSpecResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key220 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key220 = v
}
var _val221 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val221 = v
}
    p.Success[_key220] = _val221
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("partition_name_to_spec_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastorePartitionNameToSpecResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastorePartitionNameToSpecResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - EventType
type ThriftHiveMetastoreMarkPartitionForEventArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals map[string]string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  EventType PartitionEventType `thrift:"eventType,4" db:"eventType" json:"eventType"`
}

func NewThriftHiveMetastoreMarkPartitionForEventArgs() *ThriftHiveMetastoreMarkPartitionForEventArgs {
  return &ThriftHiveMetastoreMarkPartitionForEventArgs{}
}


func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) GetPartVals() map[string]string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) GetEventType() PartitionEventType {
  return p.EventType
}
func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.PartVals =  tMap
  for i := 0; i < size; i ++ {
var _key222 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key222 = v
}
var _val223 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val223 = v
}
    p.PartVals[_key222] = _val223
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := PartitionEventType(v)
  p.EventType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("markPartitionForEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_vals", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PartVals {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eventType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:eventType: ", p), err) }
  if err := oprot.WriteI32(int32(p.EventType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:eventType: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreMarkPartitionForEventArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
//  - O3
//  - O4
//  - O5
//  - O6
type ThriftHiveMetastoreMarkPartitionForEventResult struct {
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *UnknownTableException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
  O5 *UnknownPartitionException `thrift:"o5,5" db:"o5" json:"o5,omitempty"`
  O6 *InvalidPartitionException `thrift:"o6,6" db:"o6" json:"o6,omitempty"`
}

func NewThriftHiveMetastoreMarkPartitionForEventResult() *ThriftHiveMetastoreMarkPartitionForEventResult {
  return &ThriftHiveMetastoreMarkPartitionForEventResult{}
}

var ThriftHiveMetastoreMarkPartitionForEventResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreMarkPartitionForEventResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreMarkPartitionForEventResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreMarkPartitionForEventResult_O4_DEFAULT *UnknownTableException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO4() *UnknownTableException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O4_DEFAULT
  }
return p.O4
}
var ThriftHiveMetastoreMarkPartitionForEventResult_O5_DEFAULT *UnknownPartitionException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO5() *UnknownPartitionException {
  if !p.IsSetO5() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O5_DEFAULT
  }
return p.O5
}
var ThriftHiveMetastoreMarkPartitionForEventResult_O6_DEFAULT *InvalidPartitionException
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) GetO6() *InvalidPartitionException {
  if !p.IsSetO6() {
    return ThriftHiveMetastoreMarkPartitionForEventResult_O6_DEFAULT
  }
return p.O6
}
func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO5() bool {
  return p.O5 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) IsSetO6() bool {
  return p.O6 != nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField4(iprot thrift.TProtocol) error {
  p.O4 = &UnknownTableException{}
  if err := p.O4.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField5(iprot thrift.TProtocol) error {
  p.O5 = &UnknownPartitionException{}
  if err := p.O5.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O5), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult)  ReadField6(iprot thrift.TProtocol) error {
  p.O6 = &InvalidPartitionException{}
  if err := p.O6.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O6), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("markPartitionForEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetO5() {
    if err := oprot.WriteFieldBegin("o5", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:o5: ", p), err) }
    if err := p.O5.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O5), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:o5: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetO6() {
    if err := oprot.WriteFieldBegin("o6", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:o6: ", p), err) }
    if err := p.O6.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O6), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:o6: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreMarkPartitionForEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreMarkPartitionForEventResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartVals
//  - EventType
type ThriftHiveMetastoreIsPartitionMarkedForEventArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartVals map[string]string `thrift:"part_vals,3" db:"part_vals" json:"part_vals"`
  EventType PartitionEventType `thrift:"eventType,4" db:"eventType" json:"eventType"`
}

func NewThriftHiveMetastoreIsPartitionMarkedForEventArgs() *ThriftHiveMetastoreIsPartitionMarkedForEventArgs {
  return &ThriftHiveMetastoreIsPartitionMarkedForEventArgs{}
}


func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) GetPartVals() map[string]string {
  return p.PartVals
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) GetEventType() PartitionEventType {
  return p.EventType
}
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.PartVals =  tMap
  for i := 0; i < size; i ++ {
var _key224 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key224 = v
}
var _val225 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val225 = v
}
    p.PartVals[_key224] = _val225
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := PartitionEventType(v)
  p.EventType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isPartitionMarkedForEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_vals", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_vals: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.PartVals)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PartVals {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_vals: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eventType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:eventType: ", p), err) }
  if err := oprot.WriteI32(int32(p.EventType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:eventType: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreIsPartitionMarkedForEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
//  - O5
//  - O6
type ThriftHiveMetastoreIsPartitionMarkedForEventResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *UnknownDBException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *UnknownTableException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
  O5 *UnknownPartitionException `thrift:"o5,5" db:"o5" json:"o5,omitempty"`
  O6 *InvalidPartitionException `thrift:"o6,6" db:"o6" json:"o6,omitempty"`
}

func NewThriftHiveMetastoreIsPartitionMarkedForEventResult() *ThriftHiveMetastoreIsPartitionMarkedForEventResult {
  return &ThriftHiveMetastoreIsPartitionMarkedForEventResult{}
}

var ThriftHiveMetastoreIsPartitionMarkedForEventResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O3_DEFAULT *UnknownDBException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO3() *UnknownDBException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O4_DEFAULT *UnknownTableException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO4() *UnknownTableException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O4_DEFAULT
  }
return p.O4
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O5_DEFAULT *UnknownPartitionException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO5() *UnknownPartitionException {
  if !p.IsSetO5() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O5_DEFAULT
  }
return p.O5
}
var ThriftHiveMetastoreIsPartitionMarkedForEventResult_O6_DEFAULT *InvalidPartitionException
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) GetO6() *InvalidPartitionException {
  if !p.IsSetO6() {
    return ThriftHiveMetastoreIsPartitionMarkedForEventResult_O6_DEFAULT
  }
return p.O6
}
func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO5() bool {
  return p.O5 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) IsSetO6() bool {
  return p.O6 != nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &UnknownDBException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField4(iprot thrift.TProtocol) error {
  p.O4 = &UnknownTableException{}
  if err := p.O4.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField5(iprot thrift.TProtocol) error {
  p.O5 = &UnknownPartitionException{}
  if err := p.O5.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O5), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult)  ReadField6(iprot thrift.TProtocol) error {
  p.O6 = &InvalidPartitionException{}
  if err := p.O6.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O6), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isPartitionMarkedForEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetO5() {
    if err := oprot.WriteFieldBegin("o5", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:o5: ", p), err) }
    if err := p.O5.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O5), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:o5: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetO6() {
    if err := oprot.WriteFieldBegin("o6", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:o6: ", p), err) }
    if err := p.O6.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O6), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:o6: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreIsPartitionMarkedForEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreIsPartitionMarkedForEventResult(%+v)", *p)
}

// Attributes:
//  - NewIndex_
//  - IndexTable
type ThriftHiveMetastoreAddIndexArgs struct {
  NewIndex_ *Index `thrift:"new_index,1" db:"new_index" json:"new_index"`
  IndexTable *Table `thrift:"index_table,2" db:"index_table" json:"index_table"`
}

func NewThriftHiveMetastoreAddIndexArgs() *ThriftHiveMetastoreAddIndexArgs {
  return &ThriftHiveMetastoreAddIndexArgs{}
}

var ThriftHiveMetastoreAddIndexArgs_NewIndex__DEFAULT *Index
func (p *ThriftHiveMetastoreAddIndexArgs) GetNewIndex_() *Index {
  if !p.IsSetNewIndex_() {
    return ThriftHiveMetastoreAddIndexArgs_NewIndex__DEFAULT
  }
return p.NewIndex_
}
var ThriftHiveMetastoreAddIndexArgs_IndexTable_DEFAULT *Table
func (p *ThriftHiveMetastoreAddIndexArgs) GetIndexTable() *Table {
  if !p.IsSetIndexTable() {
    return ThriftHiveMetastoreAddIndexArgs_IndexTable_DEFAULT
  }
return p.IndexTable
}
func (p *ThriftHiveMetastoreAddIndexArgs) IsSetNewIndex_() bool {
  return p.NewIndex_ != nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) IsSetIndexTable() bool {
  return p.IndexTable != nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.NewIndex_ = &Index{}
  if err := p.NewIndex_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewIndex_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.IndexTable = &Table{}
  if err := p.IndexTable.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexTable), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_index_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_index", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:new_index: ", p), err) }
  if err := p.NewIndex_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewIndex_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:new_index: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("index_table", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_table: ", p), err) }
  if err := p.IndexTable.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexTable), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_table: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAddIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
type ThriftHiveMetastoreAddIndexResult struct {
  Success *Index `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *InvalidObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *AlreadyExistsException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
}

func NewThriftHiveMetastoreAddIndexResult() *ThriftHiveMetastoreAddIndexResult {
  return &ThriftHiveMetastoreAddIndexResult{}
}

var ThriftHiveMetastoreAddIndexResult_Success_DEFAULT *Index
func (p *ThriftHiveMetastoreAddIndexResult) GetSuccess() *Index {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreAddIndexResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreAddIndexResult_O1_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreAddIndexResult) GetO1() *InvalidObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAddIndexResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAddIndexResult_O2_DEFAULT *AlreadyExistsException
func (p *ThriftHiveMetastoreAddIndexResult) GetO2() *AlreadyExistsException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAddIndexResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreAddIndexResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAddIndexResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreAddIndexResult_O3_DEFAULT
  }
return p.O3
}
func (p *ThriftHiveMetastoreAddIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreAddIndexResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Index{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &AlreadyExistsException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_index_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddIndexResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAddIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAddIndexResult(%+v)", *p)
}

// Attributes:
//  - Dbname
//  - BaseTblName
//  - IdxName
//  - NewIdx_
type ThriftHiveMetastoreAlterIndexArgs struct {
  Dbname string `thrift:"dbname,1" db:"dbname" json:"dbname"`
  BaseTblName string `thrift:"base_tbl_name,2" db:"base_tbl_name" json:"base_tbl_name"`
  IdxName string `thrift:"idx_name,3" db:"idx_name" json:"idx_name"`
  NewIdx_ *Index `thrift:"new_idx,4" db:"new_idx" json:"new_idx"`
}

func NewThriftHiveMetastoreAlterIndexArgs() *ThriftHiveMetastoreAlterIndexArgs {
  return &ThriftHiveMetastoreAlterIndexArgs{}
}


func (p *ThriftHiveMetastoreAlterIndexArgs) GetDbname() string {
  return p.Dbname
}

func (p *ThriftHiveMetastoreAlterIndexArgs) GetBaseTblName() string {
  return p.BaseTblName
}

func (p *ThriftHiveMetastoreAlterIndexArgs) GetIdxName() string {
  return p.IdxName
}
var ThriftHiveMetastoreAlterIndexArgs_NewIdx__DEFAULT *Index
func (p *ThriftHiveMetastoreAlterIndexArgs) GetNewIdx_() *Index {
  if !p.IsSetNewIdx_() {
    return ThriftHiveMetastoreAlterIndexArgs_NewIdx__DEFAULT
  }
return p.NewIdx_
}
func (p *ThriftHiveMetastoreAlterIndexArgs) IsSetNewIdx_() bool {
  return p.NewIdx_ != nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbname = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BaseTblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IdxName = v
}
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.NewIdx_ = &Index{}
  if err := p.NewIdx_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewIdx_), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_index_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbname: ", p), err) }
  if err := oprot.WriteString(string(p.Dbname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbname: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base_tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:base_tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.BaseTblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.base_tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:base_tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idx_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:idx_name: ", p), err) }
  if err := oprot.WriteString(string(p.IdxName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idx_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:idx_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("new_idx", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:new_idx: ", p), err) }
  if err := p.NewIdx_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewIdx_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:new_idx: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterIndexArgs(%+v)", *p)
}

// Attributes:
//  - O1
//  - O2
type ThriftHiveMetastoreAlterIndexResult struct {
  O1 *InvalidOperationException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreAlterIndexResult() *ThriftHiveMetastoreAlterIndexResult {
  return &ThriftHiveMetastoreAlterIndexResult{}
}

var ThriftHiveMetastoreAlterIndexResult_O1_DEFAULT *InvalidOperationException
func (p *ThriftHiveMetastoreAlterIndexResult) GetO1() *InvalidOperationException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreAlterIndexResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreAlterIndexResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreAlterIndexResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreAlterIndexResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreAlterIndexResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &InvalidOperationException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("alter_index_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreAlterIndexResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreAlterIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreAlterIndexResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - IndexName
//  - DeleteData
type ThriftHiveMetastoreDropIndexByNameArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  IndexName string `thrift:"index_name,3" db:"index_name" json:"index_name"`
  DeleteData bool `thrift:"deleteData,4" db:"deleteData" json:"deleteData"`
}

func NewThriftHiveMetastoreDropIndexByNameArgs() *ThriftHiveMetastoreDropIndexByNameArgs {
  return &ThriftHiveMetastoreDropIndexByNameArgs{}
}


func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetIndexName() string {
  return p.IndexName
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) GetDeleteData() bool {
  return p.DeleteData
}
func (p *ThriftHiveMetastoreDropIndexByNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DeleteData = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_index_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index_name: ", p), err) }
  if err := oprot.WriteString(string(p.IndexName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteData: ", p), err) }
  if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deleteData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteData: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropIndexByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreDropIndexByNameResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreDropIndexByNameResult() *ThriftHiveMetastoreDropIndexByNameResult {
  return &ThriftHiveMetastoreDropIndexByNameResult{}
}

var ThriftHiveMetastoreDropIndexByNameResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropIndexByNameResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropIndexByNameResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropIndexByNameResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDropIndexByNameResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropIndexByNameResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDropIndexByNameResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropIndexByNameResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDropIndexByNameResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreDropIndexByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_index_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropIndexByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropIndexByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - IndexName
type ThriftHiveMetastoreGetIndexByNameArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  IndexName string `thrift:"index_name,3" db:"index_name" json:"index_name"`
}

func NewThriftHiveMetastoreGetIndexByNameArgs() *ThriftHiveMetastoreGetIndexByNameArgs {
  return &ThriftHiveMetastoreGetIndexByNameArgs{}
}


func (p *ThriftHiveMetastoreGetIndexByNameArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) GetIndexName() string {
  return p.IndexName
}
func (p *ThriftHiveMetastoreGetIndexByNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_index_by_name_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index_name: ", p), err) }
  if err := oprot.WriteString(string(p.IndexName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetIndexByNameResult struct {
  Success *Index `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *NoSuchObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetIndexByNameResult() *ThriftHiveMetastoreGetIndexByNameResult {
  return &ThriftHiveMetastoreGetIndexByNameResult{}
}

var ThriftHiveMetastoreGetIndexByNameResult_Success_DEFAULT *Index
func (p *ThriftHiveMetastoreGetIndexByNameResult) GetSuccess() *Index {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetIndexByNameResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetIndexByNameResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetIndexByNameResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetIndexByNameResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetIndexByNameResult_O2_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetIndexByNameResult) GetO2() *NoSuchObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetIndexByNameResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetIndexByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Index{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &NoSuchObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_index_by_name_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexByNameResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxIndexes
type ThriftHiveMetastoreGetIndexesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  MaxIndexes int16 `thrift:"max_indexes,3" db:"max_indexes" json:"max_indexes"`
}

func NewThriftHiveMetastoreGetIndexesArgs() *ThriftHiveMetastoreGetIndexesArgs {
  return &ThriftHiveMetastoreGetIndexesArgs{
MaxIndexes: -1,
}
}


func (p *ThriftHiveMetastoreGetIndexesArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetIndexesArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetIndexesArgs) GetMaxIndexes() int16 {
  return p.MaxIndexes
}
func (p *ThriftHiveMetastoreGetIndexesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxIndexes = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_indexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_indexes", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_indexes: ", p), err) }
  if err := oprot.WriteI16(int16(p.MaxIndexes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_indexes (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_indexes: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
type ThriftHiveMetastoreGetIndexesResult struct {
  Success []*Index `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetIndexesResult() *ThriftHiveMetastoreGetIndexesResult {
  return &ThriftHiveMetastoreGetIndexesResult{}
}

var ThriftHiveMetastoreGetIndexesResult_Success_DEFAULT []*Index

func (p *ThriftHiveMetastoreGetIndexesResult) GetSuccess() []*Index {
  return p.Success
}
var ThriftHiveMetastoreGetIndexesResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetIndexesResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetIndexesResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetIndexesResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetIndexesResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetIndexesResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetIndexesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Index, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem226 := &Index{}
    if err := _elem226.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem226), err)
    }
    p.Success = append(p.Success, _elem226)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_indexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexesResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - MaxIndexes
type ThriftHiveMetastoreGetIndexNamesArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  MaxIndexes int16 `thrift:"max_indexes,3" db:"max_indexes" json:"max_indexes"`
}

func NewThriftHiveMetastoreGetIndexNamesArgs() *ThriftHiveMetastoreGetIndexNamesArgs {
  return &ThriftHiveMetastoreGetIndexNamesArgs{
MaxIndexes: -1,
}
}


func (p *ThriftHiveMetastoreGetIndexNamesArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) GetMaxIndexes() int16 {
  return p.MaxIndexes
}
func (p *ThriftHiveMetastoreGetIndexNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxIndexes = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_index_names_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max_indexes", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_indexes: ", p), err) }
  if err := oprot.WriteI16(int16(p.MaxIndexes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_indexes (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_indexes: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetIndexNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O2
type ThriftHiveMetastoreGetIndexNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O2 *MetaException `thrift:"o2,1" db:"o2" json:"o2,omitempty"`
}

func NewThriftHiveMetastoreGetIndexNamesResult() *ThriftHiveMetastoreGetIndexNamesResult {
  return &ThriftHiveMetastoreGetIndexNamesResult{}
}

var ThriftHiveMetastoreGetIndexNamesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetIndexNamesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetIndexNamesResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetIndexNamesResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetIndexNamesResult_O2_DEFAULT
  }
return p.O2
}
func (p *ThriftHiveMetastoreGetIndexNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem227 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem227 = v
}
    p.Success = append(p.Success, _elem227)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_index_names_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetIndexNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetIndexNamesResult(%+v)", *p)
}

// Attributes:
//  - StatsObj
type ThriftHiveMetastoreUpdateTableColumnStatisticsArgs struct {
  StatsObj *ColumnStatistics `thrift:"stats_obj,1" db:"stats_obj" json:"stats_obj"`
}

func NewThriftHiveMetastoreUpdateTableColumnStatisticsArgs() *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs {
  return &ThriftHiveMetastoreUpdateTableColumnStatisticsArgs{}
}

var ThriftHiveMetastoreUpdateTableColumnStatisticsArgs_StatsObj_DEFAULT *ColumnStatistics
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) GetStatsObj() *ColumnStatistics {
  if !p.IsSetStatsObj() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsArgs_StatsObj_DEFAULT
  }
return p.StatsObj
}
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) IsSetStatsObj() bool {
  return p.StatsObj != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.StatsObj = &ColumnStatistics{}
  if err := p.StatsObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StatsObj), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_table_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stats_obj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stats_obj: ", p), err) }
  if err := p.StatsObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StatsObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stats_obj: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUpdateTableColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreUpdateTableColumnStatisticsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidInputException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreUpdateTableColumnStatisticsResult() *ThriftHiveMetastoreUpdateTableColumnStatisticsResult {
  return &ThriftHiveMetastoreUpdateTableColumnStatisticsResult{}
}

var ThriftHiveMetastoreUpdateTableColumnStatisticsResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O4_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) GetO4() *InvalidInputException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreUpdateTableColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.O4 = &InvalidInputException{}
  if err := p.O4.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_table_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdateTableColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUpdateTableColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - StatsObj
type ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs struct {
  StatsObj *ColumnStatistics `thrift:"stats_obj,1" db:"stats_obj" json:"stats_obj"`
}

func NewThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs() *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs {
  return &ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs{}
}

var ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs_StatsObj_DEFAULT *ColumnStatistics
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) GetStatsObj() *ColumnStatistics {
  if !p.IsSetStatsObj() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs_StatsObj_DEFAULT
  }
return p.StatsObj
}
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) IsSetStatsObj() bool {
  return p.StatsObj != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.StatsObj = &ColumnStatistics{}
  if err := p.StatsObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StatsObj), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_partition_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stats_obj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stats_obj: ", p), err) }
  if err := p.StatsObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StatsObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stats_obj: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUpdatePartitionColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *InvalidObjectException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *MetaException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidInputException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreUpdatePartitionColumnStatisticsResult() *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult {
  return &ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult{}
}

var ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O2_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) GetO2() *InvalidObjectException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O3_DEFAULT *MetaException
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) GetO3() *MetaException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O4_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) GetO4() *InvalidInputException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &InvalidObjectException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &MetaException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.O4 = &InvalidInputException{}
  if err := p.O4.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("update_partition_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreUpdatePartitionColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - ColName
type ThriftHiveMetastoreGetTableColumnStatisticsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  ColName string `thrift:"col_name,3" db:"col_name" json:"col_name"`
}

func NewThriftHiveMetastoreGetTableColumnStatisticsArgs() *ThriftHiveMetastoreGetTableColumnStatisticsArgs {
  return &ThriftHiveMetastoreGetTableColumnStatisticsArgs{}
}


func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) GetColName() string {
  return p.ColName
}
func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:col_name: ", p), err) }
  if err := oprot.WriteString(string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:col_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreGetTableColumnStatisticsResult struct {
  Success *ColumnStatistics `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *InvalidInputException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidObjectException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreGetTableColumnStatisticsResult() *ThriftHiveMetastoreGetTableColumnStatisticsResult {
  return &ThriftHiveMetastoreGetTableColumnStatisticsResult{}
}

var ThriftHiveMetastoreGetTableColumnStatisticsResult_Success_DEFAULT *ColumnStatistics
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) GetSuccess() *ColumnStatistics {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetTableColumnStatisticsResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetTableColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetTableColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetTableColumnStatisticsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetTableColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetTableColumnStatisticsResult_O3_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) GetO3() *InvalidInputException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetTableColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreGetTableColumnStatisticsResult_O4_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) GetO4() *InvalidObjectException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreGetTableColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ColumnStatistics{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &InvalidInputException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.O4 = &InvalidObjectException{}
  if err := p.O4.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_table_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetTableColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetTableColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
//  - ColName
type ThriftHiveMetastoreGetPartitionColumnStatisticsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
  ColName string `thrift:"col_name,4" db:"col_name" json:"col_name"`
}

func NewThriftHiveMetastoreGetPartitionColumnStatisticsArgs() *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs {
  return &ThriftHiveMetastoreGetPartitionColumnStatisticsArgs{}
}


func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) GetPartName() string {
  return p.PartName
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) GetColName() string {
  return p.ColName
}
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:col_name: ", p), err) }
  if err := oprot.WriteString(string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:col_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreGetPartitionColumnStatisticsResult struct {
  Success *ColumnStatistics `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *InvalidInputException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidObjectException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreGetPartitionColumnStatisticsResult() *ThriftHiveMetastoreGetPartitionColumnStatisticsResult {
  return &ThriftHiveMetastoreGetPartitionColumnStatisticsResult{}
}

var ThriftHiveMetastoreGetPartitionColumnStatisticsResult_Success_DEFAULT *ColumnStatistics
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) GetSuccess() *ColumnStatistics {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPartitionColumnStatisticsResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O3_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) GetO3() *InvalidInputException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O4_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) GetO4() *InvalidObjectException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreGetPartitionColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ColumnStatistics{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &InvalidInputException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.O4 = &InvalidObjectException{}
  if err := p.O4.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_partition_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPartitionColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPartitionColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - PartName
//  - ColName
type ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  PartName string `thrift:"part_name,3" db:"part_name" json:"part_name"`
  ColName string `thrift:"col_name,4" db:"col_name" json:"col_name"`
}

func NewThriftHiveMetastoreDeletePartitionColumnStatisticsArgs() *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs {
  return &ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs{}
}


func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) GetPartName() string {
  return p.PartName
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) GetColName() string {
  return p.ColName
}
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_partition_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_name: ", p), err) }
  if err := oprot.WriteString(string(p.PartName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:col_name: ", p), err) }
  if err := oprot.WriteString(string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:col_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDeletePartitionColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreDeletePartitionColumnStatisticsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *InvalidObjectException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidInputException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreDeletePartitionColumnStatisticsResult() *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult {
  return &ThriftHiveMetastoreDeletePartitionColumnStatisticsResult{}
}

var ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O3_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) GetO3() *InvalidObjectException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O4_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) GetO4() *InvalidInputException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreDeletePartitionColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &InvalidObjectException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.O4 = &InvalidInputException{}
  if err := p.O4.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_partition_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeletePartitionColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDeletePartitionColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - DbName
//  - TblName
//  - ColName
type ThriftHiveMetastoreDeleteTableColumnStatisticsArgs struct {
  DbName string `thrift:"db_name,1" db:"db_name" json:"db_name"`
  TblName string `thrift:"tbl_name,2" db:"tbl_name" json:"tbl_name"`
  ColName string `thrift:"col_name,3" db:"col_name" json:"col_name"`
}

func NewThriftHiveMetastoreDeleteTableColumnStatisticsArgs() *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs {
  return &ThriftHiveMetastoreDeleteTableColumnStatisticsArgs{}
}


func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) GetDbName() string {
  return p.DbName
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) GetTblName() string {
  return p.TblName
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) GetColName() string {
  return p.ColName
}
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TblName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ColName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_table_column_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:db_name: ", p), err) }
  if err := oprot.WriteString(string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:db_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tbl_name: ", p), err) }
  if err := oprot.WriteString(string(p.TblName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tbl_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tbl_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("col_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:col_name: ", p), err) }
  if err := oprot.WriteString(string(p.ColName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.col_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:col_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDeleteTableColumnStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
//  - O2
//  - O3
//  - O4
type ThriftHiveMetastoreDeleteTableColumnStatisticsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *NoSuchObjectException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
  O2 *MetaException `thrift:"o2,2" db:"o2" json:"o2,omitempty"`
  O3 *InvalidObjectException `thrift:"o3,3" db:"o3" json:"o3,omitempty"`
  O4 *InvalidInputException `thrift:"o4,4" db:"o4" json:"o4,omitempty"`
}

func NewThriftHiveMetastoreDeleteTableColumnStatisticsResult() *ThriftHiveMetastoreDeleteTableColumnStatisticsResult {
  return &ThriftHiveMetastoreDeleteTableColumnStatisticsResult{}
}

var ThriftHiveMetastoreDeleteTableColumnStatisticsResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDeleteTableColumnStatisticsResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O1_DEFAULT *NoSuchObjectException
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) GetO1() *NoSuchObjectException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O1_DEFAULT
  }
return p.O1
}
var ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O2_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) GetO2() *MetaException {
  if !p.IsSetO2() {
    return ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O2_DEFAULT
  }
return p.O2
}
var ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O3_DEFAULT *InvalidObjectException
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) GetO3() *InvalidObjectException {
  if !p.IsSetO3() {
    return ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O3_DEFAULT
  }
return p.O3
}
var ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O4_DEFAULT *InvalidInputException
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) GetO4() *InvalidInputException {
  if !p.IsSetO4() {
    return ThriftHiveMetastoreDeleteTableColumnStatisticsResult_O4_DEFAULT
  }
return p.O4
}
func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) IsSetO2() bool {
  return p.O2 != nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) IsSetO3() bool {
  return p.O3 != nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) IsSetO4() bool {
  return p.O4 != nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &NoSuchObjectException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.O2 = &MetaException{}
  if err := p.O2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O2), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.O3 = &InvalidObjectException{}
  if err := p.O3.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O3), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.O4 = &InvalidInputException{}
  if err := p.O4.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O4), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_table_column_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetO2() {
    if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:o2: ", p), err) }
    if err := p.O2.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O2), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:o2: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetO3() {
    if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:o3: ", p), err) }
    if err := p.O3.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O3), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:o3: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetO4() {
    if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:o4: ", p), err) }
    if err := p.O4.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O4), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:o4: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDeleteTableColumnStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDeleteTableColumnStatisticsResult(%+v)", *p)
}

// Attributes:
//  - Role
type ThriftHiveMetastoreCreateRoleArgs struct {
  Role *Role `thrift:"role,1" db:"role" json:"role"`
}

func NewThriftHiveMetastoreCreateRoleArgs() *ThriftHiveMetastoreCreateRoleArgs {
  return &ThriftHiveMetastoreCreateRoleArgs{}
}

var ThriftHiveMetastoreCreateRoleArgs_Role_DEFAULT *Role
func (p *ThriftHiveMetastoreCreateRoleArgs) GetRole() *Role {
  if !p.IsSetRole() {
    return ThriftHiveMetastoreCreateRoleArgs_Role_DEFAULT
  }
return p.Role
}
func (p *ThriftHiveMetastoreCreateRoleArgs) IsSetRole() bool {
  return p.Role != nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Role = &Role{}
  if err := p.Role.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Role), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("role", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role: ", p), err) }
  if err := p.Role.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Role), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCreateRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreCreateRoleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreCreateRoleResult() *ThriftHiveMetastoreCreateRoleResult {
  return &ThriftHiveMetastoreCreateRoleResult{}
}

var ThriftHiveMetastoreCreateRoleResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreCreateRoleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreCreateRoleResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreCreateRoleResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCreateRoleResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCreateRoleResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreCreateRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCreateRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCreateRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCreateRoleResult(%+v)", *p)
}

// Attributes:
//  - RoleName
type ThriftHiveMetastoreDropRoleArgs struct {
  RoleName string `thrift:"role_name,1" db:"role_name" json:"role_name"`
}

func NewThriftHiveMetastoreDropRoleArgs() *ThriftHiveMetastoreDropRoleArgs {
  return &ThriftHiveMetastoreDropRoleArgs{}
}


func (p *ThriftHiveMetastoreDropRoleArgs) GetRoleName() string {
  return p.RoleName
}
func (p *ThriftHiveMetastoreDropRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *ThriftHiveMetastoreDropRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_name: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreDropRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreDropRoleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreDropRoleResult() *ThriftHiveMetastoreDropRoleResult {
  return &ThriftHiveMetastoreDropRoleResult{}
}

var ThriftHiveMetastoreDropRoleResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreDropRoleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreDropRoleResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreDropRoleResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreDropRoleResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreDropRoleResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreDropRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreDropRoleResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreDropRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreDropRoleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreDropRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreDropRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreDropRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreDropRoleResult(%+v)", *p)
}

type ThriftHiveMetastoreGetRoleNamesArgs struct {
}

func NewThriftHiveMetastoreGetRoleNamesArgs() *ThriftHiveMetastoreGetRoleNamesArgs {
  return &ThriftHiveMetastoreGetRoleNamesArgs{}
}

func (p *ThriftHiveMetastoreGetRoleNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_role_names_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetRoleNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetRoleNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetRoleNamesResult() *ThriftHiveMetastoreGetRoleNamesResult {
  return &ThriftHiveMetastoreGetRoleNamesResult{}
}

var ThriftHiveMetastoreGetRoleNamesResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreGetRoleNamesResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreGetRoleNamesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetRoleNamesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetRoleNamesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetRoleNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem228 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem228 = v
}
    p.Success = append(p.Success, _elem228)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_role_names_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetRoleNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetRoleNamesResult(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
//  - Grantor
//  - GrantorType
//  - GrantOption
type ThriftHiveMetastoreGrantRoleArgs struct {
  RoleName string `thrift:"role_name,1" db:"role_name" json:"role_name"`
  PrincipalName string `thrift:"principal_name,2" db:"principal_name" json:"principal_name"`
  PrincipalType PrincipalType `thrift:"principal_type,3" db:"principal_type" json:"principal_type"`
  Grantor string `thrift:"grantor,4" db:"grantor" json:"grantor"`
  GrantorType PrincipalType `thrift:"grantorType,5" db:"grantorType" json:"grantorType"`
  GrantOption bool `thrift:"grant_option,6" db:"grant_option" json:"grant_option"`
}

func NewThriftHiveMetastoreGrantRoleArgs() *ThriftHiveMetastoreGrantRoleArgs {
  return &ThriftHiveMetastoreGrantRoleArgs{}
}


func (p *ThriftHiveMetastoreGrantRoleArgs) GetRoleName() string {
  return p.RoleName
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetGrantor() string {
  return p.Grantor
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetGrantorType() PrincipalType {
  return p.GrantorType
}

func (p *ThriftHiveMetastoreGrantRoleArgs) GetGrantOption() bool {
  return p.GrantOption
}
func (p *ThriftHiveMetastoreGrantRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Grantor = v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := PrincipalType(v)
  p.GrantorType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.GrantOption = v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grant_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_name: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_name: ", p), err) }
  if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:principal_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:principal_type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("grantor", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:grantor: ", p), err) }
  if err := oprot.WriteString(string(p.Grantor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantor (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:grantor: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("grantorType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:grantorType: ", p), err) }
  if err := oprot.WriteI32(int32(p.GrantorType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantorType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:grantorType: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("grant_option", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:grant_option: ", p), err) }
  if err := oprot.WriteBool(bool(p.GrantOption)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grant_option (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:grant_option: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGrantRoleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGrantRoleResult() *ThriftHiveMetastoreGrantRoleResult {
  return &ThriftHiveMetastoreGrantRoleResult{}
}

var ThriftHiveMetastoreGrantRoleResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreGrantRoleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGrantRoleResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreGrantRoleResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGrantRoleResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGrantRoleResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGrantRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grant_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantRoleResult(%+v)", *p)
}

// Attributes:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
type ThriftHiveMetastoreRevokeRoleArgs struct {
  RoleName string `thrift:"role_name,1" db:"role_name" json:"role_name"`
  PrincipalName string `thrift:"principal_name,2" db:"principal_name" json:"principal_name"`
  PrincipalType PrincipalType `thrift:"principal_type,3" db:"principal_type" json:"principal_type"`
}

func NewThriftHiveMetastoreRevokeRoleArgs() *ThriftHiveMetastoreRevokeRoleArgs {
  return &ThriftHiveMetastoreRevokeRoleArgs{}
}


func (p *ThriftHiveMetastoreRevokeRoleArgs) GetRoleName() string {
  return p.RoleName
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}
func (p *ThriftHiveMetastoreRevokeRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("revoke_role_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_name: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_name: ", p), err) }
  if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:principal_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:principal_type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRevokeRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRevokeRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreRevokeRoleResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreRevokeRoleResult() *ThriftHiveMetastoreRevokeRoleResult {
  return &ThriftHiveMetastoreRevokeRoleResult{}
}

var ThriftHiveMetastoreRevokeRoleResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreRevokeRoleResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreRevokeRoleResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreRevokeRoleResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreRevokeRoleResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreRevokeRoleResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreRevokeRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("revoke_role_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRevokeRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRevokeRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRevokeRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRevokeRoleResult(%+v)", *p)
}

// Attributes:
//  - PrincipalName
//  - PrincipalType
type ThriftHiveMetastoreListRolesArgs struct {
  PrincipalName string `thrift:"principal_name,1" db:"principal_name" json:"principal_name"`
  PrincipalType PrincipalType `thrift:"principal_type,2" db:"principal_type" json:"principal_type"`
}

func NewThriftHiveMetastoreListRolesArgs() *ThriftHiveMetastoreListRolesArgs {
  return &ThriftHiveMetastoreListRolesArgs{}
}


func (p *ThriftHiveMetastoreListRolesArgs) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *ThriftHiveMetastoreListRolesArgs) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}
func (p *ThriftHiveMetastoreListRolesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListRolesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *ThriftHiveMetastoreListRolesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreListRolesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_roles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreListRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:principal_name: ", p), err) }
  if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:principal_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreListRolesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreListRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreListRolesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreListRolesResult struct {
  Success []*Role `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreListRolesResult() *ThriftHiveMetastoreListRolesResult {
  return &ThriftHiveMetastoreListRolesResult{}
}

var ThriftHiveMetastoreListRolesResult_Success_DEFAULT []*Role

func (p *ThriftHiveMetastoreListRolesResult) GetSuccess() []*Role {
  return p.Success
}
var ThriftHiveMetastoreListRolesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreListRolesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreListRolesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreListRolesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreListRolesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreListRolesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListRolesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Role, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem229 := &Role{}
    if err := _elem229.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem229), err)
    }
    p.Success = append(p.Success, _elem229)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListRolesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListRolesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_roles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreListRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreListRolesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreListRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreListRolesResult(%+v)", *p)
}

// Attributes:
//  - HiveObject
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreGetPrivilegeSetArgs struct {
  HiveObject *HiveObjectRef `thrift:"hiveObject,1" db:"hiveObject" json:"hiveObject"`
  UserName string `thrift:"user_name,2" db:"user_name" json:"user_name"`
  GroupNames []string `thrift:"group_names,3" db:"group_names" json:"group_names"`
}

func NewThriftHiveMetastoreGetPrivilegeSetArgs() *ThriftHiveMetastoreGetPrivilegeSetArgs {
  return &ThriftHiveMetastoreGetPrivilegeSetArgs{}
}

var ThriftHiveMetastoreGetPrivilegeSetArgs_HiveObject_DEFAULT *HiveObjectRef
func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) GetHiveObject() *HiveObjectRef {
  if !p.IsSetHiveObject() {
    return ThriftHiveMetastoreGetPrivilegeSetArgs_HiveObject_DEFAULT
  }
return p.HiveObject
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) GetUserName() string {
  return p.UserName
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) GetGroupNames() []string {
  return p.GroupNames
}
func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) IsSetHiveObject() bool {
  return p.HiveObject != nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.HiveObject = &HiveObjectRef{}
  if err := p.HiveObject.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HiveObject), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem230 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem230 = v
}
    p.GroupNames = append(p.GroupNames, _elem230)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_privilege_set_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hiveObject: ", p), err) }
  if err := p.HiveObject.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HiveObject), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hiveObject: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_name: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:group_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:group_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPrivilegeSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetPrivilegeSetResult struct {
  Success *PrincipalPrivilegeSet `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetPrivilegeSetResult() *ThriftHiveMetastoreGetPrivilegeSetResult {
  return &ThriftHiveMetastoreGetPrivilegeSetResult{}
}

var ThriftHiveMetastoreGetPrivilegeSetResult_Success_DEFAULT *PrincipalPrivilegeSet
func (p *ThriftHiveMetastoreGetPrivilegeSetResult) GetSuccess() *PrincipalPrivilegeSet {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetPrivilegeSetResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveMetastoreGetPrivilegeSetResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetPrivilegeSetResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetPrivilegeSetResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetPrivilegeSetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PrincipalPrivilegeSet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_privilege_set_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetPrivilegeSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetPrivilegeSetResult(%+v)", *p)
}

// Attributes:
//  - PrincipalName
//  - PrincipalType
//  - HiveObject
type ThriftHiveMetastoreListPrivilegesArgs struct {
  PrincipalName string `thrift:"principal_name,1" db:"principal_name" json:"principal_name"`
  PrincipalType PrincipalType `thrift:"principal_type,2" db:"principal_type" json:"principal_type"`
  HiveObject *HiveObjectRef `thrift:"hiveObject,3" db:"hiveObject" json:"hiveObject"`
}

func NewThriftHiveMetastoreListPrivilegesArgs() *ThriftHiveMetastoreListPrivilegesArgs {
  return &ThriftHiveMetastoreListPrivilegesArgs{}
}


func (p *ThriftHiveMetastoreListPrivilegesArgs) GetPrincipalName() string {
  return p.PrincipalName
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) GetPrincipalType() PrincipalType {
  return p.PrincipalType
}
var ThriftHiveMetastoreListPrivilegesArgs_HiveObject_DEFAULT *HiveObjectRef
func (p *ThriftHiveMetastoreListPrivilegesArgs) GetHiveObject() *HiveObjectRef {
  if !p.IsSetHiveObject() {
    return ThriftHiveMetastoreListPrivilegesArgs_HiveObject_DEFAULT
  }
return p.HiveObject
}
func (p *ThriftHiveMetastoreListPrivilegesArgs) IsSetHiveObject() bool {
  return p.HiveObject != nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PrincipalName = v
}
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PrincipalType(v)
  p.PrincipalType = temp
}
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.HiveObject = &HiveObjectRef{}
  if err := p.HiveObject.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HiveObject), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_privileges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:principal_name: ", p), err) }
  if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:principal_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:principal_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.principal_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:principal_type: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hiveObject: ", p), err) }
  if err := p.HiveObject.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HiveObject), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hiveObject: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreListPrivilegesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreListPrivilegesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreListPrivilegesResult struct {
  Success []*HiveObjectPrivilege `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreListPrivilegesResult() *ThriftHiveMetastoreListPrivilegesResult {
  return &ThriftHiveMetastoreListPrivilegesResult{}
}

var ThriftHiveMetastoreListPrivilegesResult_Success_DEFAULT []*HiveObjectPrivilege

func (p *ThriftHiveMetastoreListPrivilegesResult) GetSuccess() []*HiveObjectPrivilege {
  return p.Success
}
var ThriftHiveMetastoreListPrivilegesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreListPrivilegesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreListPrivilegesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreListPrivilegesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HiveObjectPrivilege, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem231 := &HiveObjectPrivilege{}
    if err := _elem231.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem231), err)
    }
    p.Success = append(p.Success, _elem231)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("list_privileges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreListPrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreListPrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreListPrivilegesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreListPrivilegesResult(%+v)", *p)
}

// Attributes:
//  - Privileges
type ThriftHiveMetastoreGrantPrivilegesArgs struct {
  Privileges *PrivilegeBag `thrift:"privileges,1" db:"privileges" json:"privileges"`
}

func NewThriftHiveMetastoreGrantPrivilegesArgs() *ThriftHiveMetastoreGrantPrivilegesArgs {
  return &ThriftHiveMetastoreGrantPrivilegesArgs{}
}

var ThriftHiveMetastoreGrantPrivilegesArgs_Privileges_DEFAULT *PrivilegeBag
func (p *ThriftHiveMetastoreGrantPrivilegesArgs) GetPrivileges() *PrivilegeBag {
  if !p.IsSetPrivileges() {
    return ThriftHiveMetastoreGrantPrivilegesArgs_Privileges_DEFAULT
  }
return p.Privileges
}
func (p *ThriftHiveMetastoreGrantPrivilegesArgs) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Privileges = &PrivilegeBag{}
  if err := p.Privileges.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grant_privileges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privileges: ", p), err) }
  if err := p.Privileges.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privileges: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGrantPrivilegesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantPrivilegesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGrantPrivilegesResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGrantPrivilegesResult() *ThriftHiveMetastoreGrantPrivilegesResult {
  return &ThriftHiveMetastoreGrantPrivilegesResult{}
}

var ThriftHiveMetastoreGrantPrivilegesResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreGrantPrivilegesResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGrantPrivilegesResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreGrantPrivilegesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGrantPrivilegesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGrantPrivilegesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGrantPrivilegesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("grant_privileges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGrantPrivilegesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGrantPrivilegesResult(%+v)", *p)
}

// Attributes:
//  - Privileges
type ThriftHiveMetastoreRevokePrivilegesArgs struct {
  Privileges *PrivilegeBag `thrift:"privileges,1" db:"privileges" json:"privileges"`
}

func NewThriftHiveMetastoreRevokePrivilegesArgs() *ThriftHiveMetastoreRevokePrivilegesArgs {
  return &ThriftHiveMetastoreRevokePrivilegesArgs{}
}

var ThriftHiveMetastoreRevokePrivilegesArgs_Privileges_DEFAULT *PrivilegeBag
func (p *ThriftHiveMetastoreRevokePrivilegesArgs) GetPrivileges() *PrivilegeBag {
  if !p.IsSetPrivileges() {
    return ThriftHiveMetastoreRevokePrivilegesArgs_Privileges_DEFAULT
  }
return p.Privileges
}
func (p *ThriftHiveMetastoreRevokePrivilegesArgs) IsSetPrivileges() bool {
  return p.Privileges != nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Privileges = &PrivilegeBag{}
  if err := p.Privileges.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Privileges), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("revoke_privileges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:privileges: ", p), err) }
  if err := p.Privileges.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Privileges), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:privileges: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRevokePrivilegesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRevokePrivilegesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreRevokePrivilegesResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreRevokePrivilegesResult() *ThriftHiveMetastoreRevokePrivilegesResult {
  return &ThriftHiveMetastoreRevokePrivilegesResult{}
}

var ThriftHiveMetastoreRevokePrivilegesResult_Success_DEFAULT bool
func (p *ThriftHiveMetastoreRevokePrivilegesResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreRevokePrivilegesResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreRevokePrivilegesResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreRevokePrivilegesResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreRevokePrivilegesResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreRevokePrivilegesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("revoke_privileges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRevokePrivilegesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRevokePrivilegesResult(%+v)", *p)
}

// Attributes:
//  - UserName
//  - GroupNames
type ThriftHiveMetastoreSetUgiArgs struct {
  UserName string `thrift:"user_name,1" db:"user_name" json:"user_name"`
  GroupNames []string `thrift:"group_names,2" db:"group_names" json:"group_names"`
}

func NewThriftHiveMetastoreSetUgiArgs() *ThriftHiveMetastoreSetUgiArgs {
  return &ThriftHiveMetastoreSetUgiArgs{}
}


func (p *ThriftHiveMetastoreSetUgiArgs) GetUserName() string {
  return p.UserName
}

func (p *ThriftHiveMetastoreSetUgiArgs) GetGroupNames() []string {
  return p.GroupNames
}
func (p *ThriftHiveMetastoreSetUgiArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *ThriftHiveMetastoreSetUgiArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.GroupNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem232 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem232 = v
}
    p.GroupNames = append(p.GroupNames, _elem232)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_ugi_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_name: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreSetUgiArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.GroupNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group_names: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreSetUgiArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreSetUgiArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreSetUgiResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreSetUgiResult() *ThriftHiveMetastoreSetUgiResult {
  return &ThriftHiveMetastoreSetUgiResult{}
}

var ThriftHiveMetastoreSetUgiResult_Success_DEFAULT []string

func (p *ThriftHiveMetastoreSetUgiResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveMetastoreSetUgiResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreSetUgiResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreSetUgiResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreSetUgiResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreSetUgiResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreSetUgiResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem233 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem233 = v
}
    p.Success = append(p.Success, _elem233)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("set_ugi_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreSetUgiResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreSetUgiResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreSetUgiResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreSetUgiResult(%+v)", *p)
}

// Attributes:
//  - TokenOwner
//  - RenewerKerberosPrincipalName
type ThriftHiveMetastoreGetDelegationTokenArgs struct {
  TokenOwner string `thrift:"token_owner,1" db:"token_owner" json:"token_owner"`
  RenewerKerberosPrincipalName string `thrift:"renewer_kerberos_principal_name,2" db:"renewer_kerberos_principal_name" json:"renewer_kerberos_principal_name"`
}

func NewThriftHiveMetastoreGetDelegationTokenArgs() *ThriftHiveMetastoreGetDelegationTokenArgs {
  return &ThriftHiveMetastoreGetDelegationTokenArgs{}
}


func (p *ThriftHiveMetastoreGetDelegationTokenArgs) GetTokenOwner() string {
  return p.TokenOwner
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) GetRenewerKerberosPrincipalName() string {
  return p.RenewerKerberosPrincipalName
}
func (p *ThriftHiveMetastoreGetDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TokenOwner = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RenewerKerberosPrincipalName = v
}
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_delegation_token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token_owner", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token_owner: ", p), err) }
  if err := oprot.WriteString(string(p.TokenOwner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token_owner (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token_owner: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("renewer_kerberos_principal_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:renewer_kerberos_principal_name: ", p), err) }
  if err := oprot.WriteString(string(p.RenewerKerberosPrincipalName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.renewer_kerberos_principal_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:renewer_kerberos_principal_name: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreGetDelegationTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreGetDelegationTokenResult() *ThriftHiveMetastoreGetDelegationTokenResult {
  return &ThriftHiveMetastoreGetDelegationTokenResult{}
}

var ThriftHiveMetastoreGetDelegationTokenResult_Success_DEFAULT string
func (p *ThriftHiveMetastoreGetDelegationTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreGetDelegationTokenResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreGetDelegationTokenResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreGetDelegationTokenResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreGetDelegationTokenResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreGetDelegationTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_delegation_token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreGetDelegationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreGetDelegationTokenResult(%+v)", *p)
}

// Attributes:
//  - TokenStrForm
type ThriftHiveMetastoreRenewDelegationTokenArgs struct {
  TokenStrForm string `thrift:"token_str_form,1" db:"token_str_form" json:"token_str_form"`
}

func NewThriftHiveMetastoreRenewDelegationTokenArgs() *ThriftHiveMetastoreRenewDelegationTokenArgs {
  return &ThriftHiveMetastoreRenewDelegationTokenArgs{}
}


func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) GetTokenStrForm() string {
  return p.TokenStrForm
}
func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TokenStrForm = v
}
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("renew_delegation_token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token_str_form: ", p), err) }
  if err := oprot.WriteString(string(p.TokenStrForm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token_str_form (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token_str_form: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreRenewDelegationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRenewDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - O1
type ThriftHiveMetastoreRenewDelegationTokenResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreRenewDelegationTokenResult() *ThriftHiveMetastoreRenewDelegationTokenResult {
  return &ThriftHiveMetastoreRenewDelegationTokenResult{}
}

var ThriftHiveMetastoreRenewDelegationTokenResult_Success_DEFAULT int64
func (p *ThriftHiveMetastoreRenewDelegationTokenResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return ThriftHiveMetastoreRenewDelegationTokenResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveMetastoreRenewDelegationTokenResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreRenewDelegationTokenResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreRenewDelegationTokenResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreRenewDelegationTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("renew_delegation_token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreRenewDelegationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreRenewDelegationTokenResult(%+v)", *p)
}

// Attributes:
//  - TokenStrForm
type ThriftHiveMetastoreCancelDelegationTokenArgs struct {
  TokenStrForm string `thrift:"token_str_form,1" db:"token_str_form" json:"token_str_form"`
}

func NewThriftHiveMetastoreCancelDelegationTokenArgs() *ThriftHiveMetastoreCancelDelegationTokenArgs {
  return &ThriftHiveMetastoreCancelDelegationTokenArgs{}
}


func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) GetTokenStrForm() string {
  return p.TokenStrForm
}
func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TokenStrForm = v
}
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cancel_delegation_token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token_str_form: ", p), err) }
  if err := oprot.WriteString(string(p.TokenStrForm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token_str_form (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token_str_form: ", p), err) }
  return err
}

func (p *ThriftHiveMetastoreCancelDelegationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCancelDelegationTokenArgs(%+v)", *p)
}

// Attributes:
//  - O1
type ThriftHiveMetastoreCancelDelegationTokenResult struct {
  O1 *MetaException `thrift:"o1,1" db:"o1" json:"o1,omitempty"`
}

func NewThriftHiveMetastoreCancelDelegationTokenResult() *ThriftHiveMetastoreCancelDelegationTokenResult {
  return &ThriftHiveMetastoreCancelDelegationTokenResult{}
}

var ThriftHiveMetastoreCancelDelegationTokenResult_O1_DEFAULT *MetaException
func (p *ThriftHiveMetastoreCancelDelegationTokenResult) GetO1() *MetaException {
  if !p.IsSetO1() {
    return ThriftHiveMetastoreCancelDelegationTokenResult_O1_DEFAULT
  }
return p.O1
}
func (p *ThriftHiveMetastoreCancelDelegationTokenResult) IsSetO1() bool {
  return p.O1 != nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.O1 = &MetaException{}
  if err := p.O1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.O1), err)
  }
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cancel_delegation_token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetO1() {
    if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:o1: ", p), err) }
    if err := p.O1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.O1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:o1: ", p), err) }
  }
  return err
}

func (p *ThriftHiveMetastoreCancelDelegationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveMetastoreCancelDelegationTokenResult(%+v)", *p)
}


