// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
	"github.com/MediaMath/impalathing/services/fb303"
        "github.com/MediaMath/impalathing/services/hive_metastore"
)

var _ = fb303.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
  fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
  fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
  fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
  fmt.Fprintln(os.Stderr, "   get_all_databases()")
  fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
  fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
  fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
  fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
  fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
  fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
  fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
  fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
  fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
  fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
  fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
  fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
  fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
  fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
  fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
  fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  Index add_index(Index new_index, Table index_table)")
  fmt.Fprintln(os.Stderr, "  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)")
  fmt.Fprintln(os.Stderr, "  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  Index get_index_by_name(string db_name, string tbl_name, string index_name)")
  fmt.Fprintln(os.Stderr, "   get_indexes(string db_name, string tbl_name, i16 max_indexes)")
  fmt.Fprintln(os.Stderr, "   get_index_names(string db_name, string tbl_name, i16 max_indexes)")
  fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
  fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
  fmt.Fprintln(os.Stderr, "   get_role_names()")
  fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
  fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
  fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
  fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  string getName()")
  fmt.Fprintln(os.Stderr, "  string getVersion()")
  fmt.Fprintln(os.Stderr, "  fb_status getStatus()")
  fmt.Fprintln(os.Stderr, "  string getStatusDetails()")
  fmt.Fprintln(os.Stderr, "   getCounters()")
  fmt.Fprintln(os.Stderr, "  i64 getCounter(string key)")
  fmt.Fprintln(os.Stderr, "  void setOption(string key, string value)")
  fmt.Fprintln(os.Stderr, "  string getOption(string key)")
  fmt.Fprintln(os.Stderr, "   getOptions()")
  fmt.Fprintln(os.Stderr, "  string getCpuProfile(i32 profileDurationInSec)")
  fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
  fmt.Fprintln(os.Stderr, "  void reinitialize()")
  fmt.Fprintln(os.Stderr, "  void shutdown()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := hive_metastore.NewThriftHiveMetastoreClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "create_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
      flag.Usage()
    }
    arg234 := flag.Arg(1)
    mbTrans235 := thrift.NewTMemoryBufferLen(len(arg234))
    defer mbTrans235.Close()
    _, err236 := mbTrans235.WriteString(arg234)
    if err236 != nil {
      Usage()
      return
    }
    factory237 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt238 := factory237.GetProtocol(mbTrans235)
    argvalue0 := hive_metastore.NewDatabase()
    err239 := argvalue0.Read(jsProt238)
    if err239 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateDatabase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_database":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropDatabase(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_databases":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabases(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_all_databases":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllDatabases(context.Background()))
    fmt.Print("\n")
    break
  case "alter_database":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg246 := flag.Arg(2)
    mbTrans247 := thrift.NewTMemoryBufferLen(len(arg246))
    defer mbTrans247.Close()
    _, err248 := mbTrans247.WriteString(arg246)
    if err248 != nil {
      Usage()
      return
    }
    factory249 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt250 := factory249.GetProtocol(mbTrans247)
    argvalue1 := hive_metastore.NewDatabase()
    err251 := argvalue1.Read(jsProt250)
    if err251 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AlterDatabase(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
      flag.Usage()
    }
    arg253 := flag.Arg(1)
    mbTrans254 := thrift.NewTMemoryBufferLen(len(arg253))
    defer mbTrans254.Close()
    _, err255 := mbTrans254.WriteString(arg253)
    if err255 != nil {
      Usage()
      return
    }
    factory256 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt257 := factory256.GetProtocol(mbTrans254)
    argvalue0 := hive_metastore.NewType()
    err258 := argvalue0.Read(jsProt257)
    if err258 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_type_all":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTypeAll(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_fields":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFields(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_schema":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetSchema(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "create_table":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
      flag.Usage()
    }
    arg265 := flag.Arg(1)
    mbTrans266 := thrift.NewTMemoryBufferLen(len(arg265))
    defer mbTrans266.Close()
    _, err267 := mbTrans266.WriteString(arg265)
    if err267 != nil {
      Usage()
      return
    }
    factory268 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt269 := factory268.GetProtocol(mbTrans266)
    argvalue0 := hive_metastore.NewTable()
    err270 := argvalue0.Read(jsProt269)
    if err270 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_table_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg271 := flag.Arg(1)
    mbTrans272 := thrift.NewTMemoryBufferLen(len(arg271))
    defer mbTrans272.Close()
    _, err273 := mbTrans272.WriteString(arg271)
    if err273 != nil {
      Usage()
      return
    }
    factory274 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt275 := factory274.GetProtocol(mbTrans272)
    argvalue0 := hive_metastore.NewTable()
    err276 := argvalue0.Read(jsProt275)
    if err276 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg277 := flag.Arg(2)
    mbTrans278 := thrift.NewTMemoryBufferLen(len(arg277))
    defer mbTrans278.Close()
    _, err279 := mbTrans278.WriteString(arg277)
    if err279 != nil {
      Usage()
      return
    }
    factory280 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt281 := factory280.GetProtocol(mbTrans278)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err282 := argvalue1.Read(jsProt281)
    if err282 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateTableWithEnvironmentContext(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "drop_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_tables":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTables(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_all_tables":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAllTables(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_table_objects_by_name":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg292 := flag.Arg(2)
    mbTrans293 := thrift.NewTMemoryBufferLen(len(arg292))
    defer mbTrans293.Close()
    _, err294 := mbTrans293.WriteString(arg292)
    if err294 != nil { 
      Usage()
      return
    }
    factory295 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt296 := factory295.GetProtocol(mbTrans293)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
    err297 := containerStruct1.ReadField2(jsProt296)
    if err297 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.TblNames
    value1 := argvalue1
    fmt.Print(client.GetTableObjectsByName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_table_names_by_filter":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err300 := (strconv.Atoi(flag.Arg(3)))
    if err300 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetTableNamesByFilter(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg303 := flag.Arg(3)
    mbTrans304 := thrift.NewTMemoryBufferLen(len(arg303))
    defer mbTrans304.Close()
    _, err305 := mbTrans304.WriteString(arg303)
    if err305 != nil {
      Usage()
      return
    }
    factory306 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt307 := factory306.GetProtocol(mbTrans304)
    argvalue2 := hive_metastore.NewTable()
    err308 := argvalue2.Read(jsProt307)
    if err308 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg311 := flag.Arg(3)
    mbTrans312 := thrift.NewTMemoryBufferLen(len(arg311))
    defer mbTrans312.Close()
    _, err313 := mbTrans312.WriteString(arg311)
    if err313 != nil {
      Usage()
      return
    }
    factory314 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt315 := factory314.GetProtocol(mbTrans312)
    argvalue2 := hive_metastore.NewTable()
    err316 := argvalue2.Read(jsProt315)
    if err316 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg317 := flag.Arg(4)
    mbTrans318 := thrift.NewTMemoryBufferLen(len(arg317))
    defer mbTrans318.Close()
    _, err319 := mbTrans318.WriteString(arg317)
    if err319 != nil {
      Usage()
      return
    }
    factory320 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt321 := factory320.GetProtocol(mbTrans318)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err322 := argvalue3.Read(jsProt321)
    if err322 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "add_partition":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
      flag.Usage()
    }
    arg323 := flag.Arg(1)
    mbTrans324 := thrift.NewTMemoryBufferLen(len(arg323))
    defer mbTrans324.Close()
    _, err325 := mbTrans324.WriteString(arg323)
    if err325 != nil {
      Usage()
      return
    }
    factory326 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt327 := factory326.GetProtocol(mbTrans324)
    argvalue0 := hive_metastore.NewPartition()
    err328 := argvalue0.Read(jsProt327)
    if err328 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartition(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_partition_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg329 := flag.Arg(1)
    mbTrans330 := thrift.NewTMemoryBufferLen(len(arg329))
    defer mbTrans330.Close()
    _, err331 := mbTrans330.WriteString(arg329)
    if err331 != nil {
      Usage()
      return
    }
    factory332 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt333 := factory332.GetProtocol(mbTrans330)
    argvalue0 := hive_metastore.NewPartition()
    err334 := argvalue0.Read(jsProt333)
    if err334 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg335 := flag.Arg(2)
    mbTrans336 := thrift.NewTMemoryBufferLen(len(arg335))
    defer mbTrans336.Close()
    _, err337 := mbTrans336.WriteString(arg335)
    if err337 != nil {
      Usage()
      return
    }
    factory338 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt339 := factory338.GetProtocol(mbTrans336)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err340 := argvalue1.Read(jsProt339)
    if err340 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddPartitionWithEnvironmentContext(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "add_partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
      flag.Usage()
    }
    arg341 := flag.Arg(1)
    mbTrans342 := thrift.NewTMemoryBufferLen(len(arg341))
    defer mbTrans342.Close()
    _, err343 := mbTrans342.WriteString(arg341)
    if err343 != nil { 
      Usage()
      return
    }
    factory344 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt345 := factory344.GetProtocol(mbTrans342)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
    err346 := containerStruct0.ReadField1(jsProt345)
    if err346 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.NewParts_
    value0 := argvalue0
    fmt.Print(client.AddPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "append_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg349 := flag.Arg(3)
    mbTrans350 := thrift.NewTMemoryBufferLen(len(arg349))
    defer mbTrans350.Close()
    _, err351 := mbTrans350.WriteString(arg349)
    if err351 != nil { 
      Usage()
      return
    }
    factory352 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt353 := factory352.GetProtocol(mbTrans350)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
    err354 := containerStruct2.ReadField3(jsProt353)
    if err354 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.AppendPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "append_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AppendPartitionByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "drop_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg360 := flag.Arg(3)
    mbTrans361 := thrift.NewTMemoryBufferLen(len(arg360))
    defer mbTrans361.Close()
    _, err362 := mbTrans361.WriteString(arg360)
    if err362 != nil { 
      Usage()
      return
    }
    factory363 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt364 := factory363.GetProtocol(mbTrans361)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
    err365 := containerStruct2.ReadField3(jsProt364)
    if err365 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartitionByName(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg373 := flag.Arg(3)
    mbTrans374 := thrift.NewTMemoryBufferLen(len(arg373))
    defer mbTrans374.Close()
    _, err375 := mbTrans374.WriteString(arg373)
    if err375 != nil { 
      Usage()
      return
    }
    factory376 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt377 := factory376.GetProtocol(mbTrans374)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
    err378 := containerStruct2.ReadField3(jsProt377)
    if err378 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.GetPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg381 := flag.Arg(3)
    mbTrans382 := thrift.NewTMemoryBufferLen(len(arg381))
    defer mbTrans382.Close()
    _, err383 := mbTrans382.WriteString(arg381)
    if err383 != nil { 
      Usage()
      return
    }
    factory384 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt385 := factory384.GetProtocol(mbTrans382)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err386 := containerStruct2.ReadField3(jsProt385)
    if err386 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg388 := flag.Arg(5)
    mbTrans389 := thrift.NewTMemoryBufferLen(len(arg388))
    defer mbTrans389.Close()
    _, err390 := mbTrans389.WriteString(arg388)
    if err390 != nil { 
      Usage()
      return
    }
    factory391 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt392 := factory391.GetProtocol(mbTrans389)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err393 := containerStruct4.ReadField5(jsProt392)
    if err393 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionWithAuth(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPartitionByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err399 := (strconv.Atoi(flag.Arg(3)))
    if err399 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err402 := (strconv.Atoi(flag.Arg(3)))
    if err402 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg404 := flag.Arg(5)
    mbTrans405 := thrift.NewTMemoryBufferLen(len(arg404))
    defer mbTrans405.Close()
    _, err406 := mbTrans405.WriteString(arg404)
    if err406 != nil { 
      Usage()
      return
    }
    factory407 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt408 := factory407.GetProtocol(mbTrans405)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
    err409 := containerStruct4.ReadField5(jsProt408)
    if err409 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionsWithAuth(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err412 := (strconv.Atoi(flag.Arg(3)))
    if err412 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg415 := flag.Arg(3)
    mbTrans416 := thrift.NewTMemoryBufferLen(len(arg415))
    defer mbTrans416.Close()
    _, err417 := mbTrans416.WriteString(arg415)
    if err417 != nil { 
      Usage()
      return
    }
    factory418 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt419 := factory418.GetProtocol(mbTrans416)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
    err420 := containerStruct2.ReadField3(jsProt419)
    if err420 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err421 := (strconv.Atoi(flag.Arg(4)))
    if err421 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsPs(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_ps_with_auth":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg424 := flag.Arg(3)
    mbTrans425 := thrift.NewTMemoryBufferLen(len(arg424))
    defer mbTrans425.Close()
    _, err426 := mbTrans425.WriteString(arg424)
    if err426 != nil { 
      Usage()
      return
    }
    factory427 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt428 := factory427.GetProtocol(mbTrans425)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err429 := containerStruct2.ReadField3(jsProt428)
    if err429 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err430 := (strconv.Atoi(flag.Arg(4)))
    if err430 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg432 := flag.Arg(6)
    mbTrans433 := thrift.NewTMemoryBufferLen(len(arg432))
    defer mbTrans433.Close()
    _, err434 := mbTrans433.WriteString(arg432)
    if err434 != nil { 
      Usage()
      return
    }
    factory435 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt436 := factory435.GetProtocol(mbTrans433)
    containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err437 := containerStruct5.ReadField6(jsProt436)
    if err437 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.GroupNames
    value5 := argvalue5
    fmt.Print(client.GetPartitionsPsWithAuth(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "get_partition_names_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg440 := flag.Arg(3)
    mbTrans441 := thrift.NewTMemoryBufferLen(len(arg440))
    defer mbTrans441.Close()
    _, err442 := mbTrans441.WriteString(arg440)
    if err442 != nil { 
      Usage()
      return
    }
    factory443 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt444 := factory443.GetProtocol(mbTrans441)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
    err445 := containerStruct2.ReadField3(jsProt444)
    if err445 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err446 := (strconv.Atoi(flag.Arg(4)))
    if err446 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionNamesPs(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err450 := (strconv.Atoi(flag.Arg(4)))
    if err450 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsByFilter(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg453 := flag.Arg(3)
    mbTrans454 := thrift.NewTMemoryBufferLen(len(arg453))
    defer mbTrans454.Close()
    _, err455 := mbTrans454.WriteString(arg453)
    if err455 != nil { 
      Usage()
      return
    }
    factory456 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt457 := factory456.GetProtocol(mbTrans454)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
    err458 := containerStruct2.ReadField3(jsProt457)
    if err458 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Names
    value2 := argvalue2
    fmt.Print(client.GetPartitionsByNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg461 := flag.Arg(3)
    mbTrans462 := thrift.NewTMemoryBufferLen(len(arg461))
    defer mbTrans462.Close()
    _, err463 := mbTrans462.WriteString(arg461)
    if err463 != nil {
      Usage()
      return
    }
    factory464 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt465 := factory464.GetProtocol(mbTrans462)
    argvalue2 := hive_metastore.NewPartition()
    err466 := argvalue2.Read(jsProt465)
    if err466 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg469 := flag.Arg(3)
    mbTrans470 := thrift.NewTMemoryBufferLen(len(arg469))
    defer mbTrans470.Close()
    _, err471 := mbTrans470.WriteString(arg469)
    if err471 != nil { 
      Usage()
      return
    }
    factory472 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt473 := factory472.GetProtocol(mbTrans470)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
    err474 := containerStruct2.ReadField3(jsProt473)
    if err474 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.NewParts_
    value2 := argvalue2
    fmt.Print(client.AlterPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partition_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg477 := flag.Arg(3)
    mbTrans478 := thrift.NewTMemoryBufferLen(len(arg477))
    defer mbTrans478.Close()
    _, err479 := mbTrans478.WriteString(arg477)
    if err479 != nil {
      Usage()
      return
    }
    factory480 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt481 := factory480.GetProtocol(mbTrans478)
    argvalue2 := hive_metastore.NewPartition()
    err482 := argvalue2.Read(jsProt481)
    if err482 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg483 := flag.Arg(4)
    mbTrans484 := thrift.NewTMemoryBufferLen(len(arg483))
    defer mbTrans484.Close()
    _, err485 := mbTrans484.WriteString(arg483)
    if err485 != nil {
      Usage()
      return
    }
    factory486 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt487 := factory486.GetProtocol(mbTrans484)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err488 := argvalue3.Read(jsProt487)
    if err488 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "rename_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg491 := flag.Arg(3)
    mbTrans492 := thrift.NewTMemoryBufferLen(len(arg491))
    defer mbTrans492.Close()
    _, err493 := mbTrans492.WriteString(arg491)
    if err493 != nil { 
      Usage()
      return
    }
    factory494 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt495 := factory494.GetProtocol(mbTrans492)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
    err496 := containerStruct2.ReadField3(jsProt495)
    if err496 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    arg497 := flag.Arg(4)
    mbTrans498 := thrift.NewTMemoryBufferLen(len(arg497))
    defer mbTrans498.Close()
    _, err499 := mbTrans498.WriteString(arg497)
    if err499 != nil {
      Usage()
      return
    }
    factory500 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt501 := factory500.GetProtocol(mbTrans498)
    argvalue3 := hive_metastore.NewPartition()
    err502 := argvalue3.Read(jsProt501)
    if err502 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RenamePartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_config_value":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetConfigValue(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partition_name_to_vals":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToVals(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partition_name_to_spec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToSpec(context.Background(), value0))
    fmt.Print("\n")
    break
  case "markPartitionForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg509 := flag.Arg(3)
    mbTrans510 := thrift.NewTMemoryBufferLen(len(arg509))
    defer mbTrans510.Close()
    _, err511 := mbTrans510.WriteString(arg509)
    if err511 != nil { 
      Usage()
      return
    }
    factory512 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt513 := factory512.GetProtocol(mbTrans510)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
    err514 := containerStruct2.ReadField3(jsProt513)
    if err514 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.MarkPartitionForEvent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "isPartitionMarkedForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg517 := flag.Arg(3)
    mbTrans518 := thrift.NewTMemoryBufferLen(len(arg517))
    defer mbTrans518.Close()
    _, err519 := mbTrans518.WriteString(arg517)
    if err519 != nil { 
      Usage()
      return
    }
    factory520 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt521 := factory520.GetProtocol(mbTrans518)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
    err522 := containerStruct2.ReadField3(jsProt521)
    if err522 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.IsPartitionMarkedForEvent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "add_index":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddIndex requires 2 args")
      flag.Usage()
    }
    arg523 := flag.Arg(1)
    mbTrans524 := thrift.NewTMemoryBufferLen(len(arg523))
    defer mbTrans524.Close()
    _, err525 := mbTrans524.WriteString(arg523)
    if err525 != nil {
      Usage()
      return
    }
    factory526 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt527 := factory526.GetProtocol(mbTrans524)
    argvalue0 := hive_metastore.NewIndex()
    err528 := argvalue0.Read(jsProt527)
    if err528 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg529 := flag.Arg(2)
    mbTrans530 := thrift.NewTMemoryBufferLen(len(arg529))
    defer mbTrans530.Close()
    _, err531 := mbTrans530.WriteString(arg529)
    if err531 != nil {
      Usage()
      return
    }
    factory532 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt533 := factory532.GetProtocol(mbTrans530)
    argvalue1 := hive_metastore.NewTable()
    err534 := argvalue1.Read(jsProt533)
    if err534 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddIndex(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alter_index":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterIndex requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg538 := flag.Arg(4)
    mbTrans539 := thrift.NewTMemoryBufferLen(len(arg538))
    defer mbTrans539.Close()
    _, err540 := mbTrans539.WriteString(arg538)
    if err540 != nil {
      Usage()
      return
    }
    factory541 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt542 := factory541.GetProtocol(mbTrans539)
    argvalue3 := hive_metastore.NewIndex()
    err543 := argvalue3.Read(jsProt542)
    if err543 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterIndex(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_index_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropIndexByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropIndexByName(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_index_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetIndexByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_indexes":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexes requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err553 := (strconv.Atoi(flag.Arg(3)))
    if err553 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexes(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_index_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err556 := (strconv.Atoi(flag.Arg(3)))
    if err556 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "update_table_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg557 := flag.Arg(1)
    mbTrans558 := thrift.NewTMemoryBufferLen(len(arg557))
    defer mbTrans558.Close()
    _, err559 := mbTrans558.WriteString(arg557)
    if err559 != nil {
      Usage()
      return
    }
    factory560 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt561 := factory560.GetProtocol(mbTrans558)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err562 := argvalue0.Read(jsProt561)
    if err562 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateTableColumnStatistics(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_partition_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg563 := flag.Arg(1)
    mbTrans564 := thrift.NewTMemoryBufferLen(len(arg563))
    defer mbTrans564.Close()
    _, err565 := mbTrans564.WriteString(arg563)
    if err565 != nil {
      Usage()
      return
    }
    factory566 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt567 := factory566.GetProtocol(mbTrans564)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err568 := argvalue0.Read(jsProt567)
    if err568 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePartitionColumnStatistics(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_column_statistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetTableColumnStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetPartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "delete_partition_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.DeletePartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "delete_table_column_statistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteTableColumnStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "create_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
      flag.Usage()
    }
    arg583 := flag.Arg(1)
    mbTrans584 := thrift.NewTMemoryBufferLen(len(arg583))
    defer mbTrans584.Close()
    _, err585 := mbTrans584.WriteString(arg583)
    if err585 != nil {
      Usage()
      return
    }
    factory586 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt587 := factory586.GetProtocol(mbTrans584)
    argvalue0 := hive_metastore.NewRole()
    err588 := argvalue0.Read(jsProt587)
    if err588 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_role_names":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRoleNames(context.Background()))
    fmt.Print("\n")
    break
  case "grant_role":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := hive_metastore.PrincipalType(tmp4)
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GrantRole(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "revoke_role":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    fmt.Print(client.RevokeRole(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_roles":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    fmt.Print(client.ListRoles(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_privilege_set":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
      flag.Usage()
    }
    arg597 := flag.Arg(1)
    mbTrans598 := thrift.NewTMemoryBufferLen(len(arg597))
    defer mbTrans598.Close()
    _, err599 := mbTrans598.WriteString(arg597)
    if err599 != nil {
      Usage()
      return
    }
    factory600 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt601 := factory600.GetProtocol(mbTrans598)
    argvalue0 := hive_metastore.NewHiveObjectRef()
    err602 := argvalue0.Read(jsProt601)
    if err602 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg604 := flag.Arg(3)
    mbTrans605 := thrift.NewTMemoryBufferLen(len(arg604))
    defer mbTrans605.Close()
    _, err606 := mbTrans605.WriteString(arg604)
    if err606 != nil { 
      Usage()
      return
    }
    factory607 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt608 := factory607.GetProtocol(mbTrans605)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
    err609 := containerStruct2.ReadField3(jsProt608)
    if err609 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.GroupNames
    value2 := argvalue2
    fmt.Print(client.GetPrivilegeSet(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_privileges":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    arg611 := flag.Arg(3)
    mbTrans612 := thrift.NewTMemoryBufferLen(len(arg611))
    defer mbTrans612.Close()
    _, err613 := mbTrans612.WriteString(arg611)
    if err613 != nil {
      Usage()
      return
    }
    factory614 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt615 := factory614.GetProtocol(mbTrans612)
    argvalue2 := hive_metastore.NewHiveObjectRef()
    err616 := argvalue2.Read(jsProt615)
    if err616 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ListPrivileges(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "grant_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
      flag.Usage()
    }
    arg617 := flag.Arg(1)
    mbTrans618 := thrift.NewTMemoryBufferLen(len(arg617))
    defer mbTrans618.Close()
    _, err619 := mbTrans618.WriteString(arg617)
    if err619 != nil {
      Usage()
      return
    }
    factory620 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt621 := factory620.GetProtocol(mbTrans618)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err622 := argvalue0.Read(jsProt621)
    if err622 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantPrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
      flag.Usage()
    }
    arg623 := flag.Arg(1)
    mbTrans624 := thrift.NewTMemoryBufferLen(len(arg623))
    defer mbTrans624.Close()
    _, err625 := mbTrans624.WriteString(arg623)
    if err625 != nil {
      Usage()
      return
    }
    factory626 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt627 := factory626.GetProtocol(mbTrans624)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err628 := argvalue0.Read(jsProt627)
    if err628 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokePrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_ugi":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg630 := flag.Arg(2)
    mbTrans631 := thrift.NewTMemoryBufferLen(len(arg630))
    defer mbTrans631.Close()
    _, err632 := mbTrans631.WriteString(arg630)
    if err632 != nil { 
      Usage()
      return
    }
    factory633 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt634 := factory633.GetProtocol(mbTrans631)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
    err635 := containerStruct1.ReadField2(jsProt634)
    if err635 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.GroupNames
    value1 := argvalue1
    fmt.Print(client.SetUgi(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_delegation_token":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetDelegationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "renew_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RenewDelegationToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancel_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CancelDelegationToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getName":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetName requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetName(context.Background()))
    fmt.Print("\n")
    break
  case "getVersion":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetVersion(context.Background()))
    fmt.Print("\n")
    break
  case "getStatus":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetStatus requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetStatus(context.Background()))
    fmt.Print("\n")
    break
  case "getStatusDetails":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetStatusDetails requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetStatusDetails(context.Background()))
    fmt.Print("\n")
    break
  case "getCounters":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCounters requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCounters(context.Background()))
    fmt.Print("\n")
    break
  case "getCounter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCounter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setOption":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetOption requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetOption(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getOption":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetOption requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetOption(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getOptions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOptions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOptions(context.Background()))
    fmt.Print("\n")
    break
  case "getCpuProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCpuProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err644 := (strconv.Atoi(flag.Arg(1)))
    if err644 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetCpuProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "aliveSince":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.AliveSince(context.Background()))
    fmt.Print("\n")
    break
  case "reinitialize":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Reinitialize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Reinitialize(context.Background()))
    fmt.Print("\n")
    break
  case "shutdown":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Shutdown(context.Background()))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
